// Autogenerated by Thrift Compiler (0.10.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package goncrete

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"

)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

// Attached to Arguments to support situations where
// a 'participant' has more than one 'property' (in BinarySRL terms),
// whereas Arguments notionally only support one Role.
// 
// Attributes:
//  - Value: The required value of the property.
//  - Metadata: Metadata to support this particular property object.
//  - Polarity: This value is typically boolean, 0.0 or 1.0, but we use a
// float in order to potentially capture cases where an annotator is
// highly confident that the value is underspecified, via a value of
// 0.5.
type Property struct {
  Value string `thrift:"value,1,required" db:"value" json:"value"`
  Metadata *AnnotationMetadata `thrift:"metadata,2,required" db:"metadata" json:"metadata"`
  Polarity *float64 `thrift:"polarity,3" db:"polarity" json:"polarity,omitempty"`
}

func NewProperty() *Property {
  return &Property{}
}


func (p *Property) GetValue() string {
  return p.Value
}
var Property_Metadata_DEFAULT *AnnotationMetadata
func (p *Property) GetMetadata() *AnnotationMetadata {
  if !p.IsSetMetadata() {
    return Property_Metadata_DEFAULT
  }
return p.Metadata
}
var Property_Polarity_DEFAULT float64
func (p *Property) GetPolarity() float64 {
  if !p.IsSetPolarity() {
    return Property_Polarity_DEFAULT
  }
return *p.Polarity
}
func (p *Property) IsSetMetadata() bool {
  return p.Metadata != nil
}

func (p *Property) IsSetPolarity() bool {
  return p.Polarity != nil
}

func (p *Property) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetValue bool = false;
  var issetMetadata bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetValue = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
      issetMetadata = true
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetValue{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Value is not set"));
  }
  if !issetMetadata{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Metadata is not set"));
  }
  return nil
}

func (p *Property)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Value = v
}
  return nil
}

func (p *Property)  ReadField2(iprot thrift.TProtocol) error {
  p.Metadata = &AnnotationMetadata{
  KBest: 1,
}
  if err := p.Metadata.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Metadata), err)
  }
  return nil
}

func (p *Property)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Polarity = &v
}
  return nil
}

func (p *Property) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Property"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Property) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("value", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:value: ", p), err) }
  if err := oprot.WriteString(string(p.Value)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.value (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:value: ", p), err) }
  return err
}

func (p *Property) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("metadata", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:metadata: ", p), err) }
  if err := p.Metadata.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Metadata), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:metadata: ", p), err) }
  return err
}

func (p *Property) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetPolarity() {
    if err := oprot.WriteFieldBegin("polarity", thrift.DOUBLE, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:polarity: ", p), err) }
    if err := oprot.WriteDouble(float64(*p.Polarity)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.polarity (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:polarity: ", p), err) }
  }
  return err
}

func (p *Property) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Property(%+v)", *p)
}

// A situation argument, consisting of an argument role and a value.
// Argument values may be Entities or Situations.
// 
// Attributes:
//  - Role: The relationship between this argument and the situation that
// owns it. The roles that a situation's arguments can take
// depend on the type of the situation (including subtype
// information, such as event_type).
//  - EntityId: A pointer to the value of this argument, if it is explicitly
// encoded as an Entity.
//  - SituationId: A pointer to the value of this argument, if it is a situation.
//  - PropertyList: For the BinarySRL task, there may be situations
// where more than one property is attached to a single
// participant. A list of these properties can be stored in this field.
type Argument struct {
  Role *string `thrift:"role,1" db:"role" json:"role,omitempty"`
  EntityId *UUID `thrift:"entityId,2" db:"entityId" json:"entityId,omitempty"`
  SituationId *UUID `thrift:"situationId,3" db:"situationId" json:"situationId,omitempty"`
  PropertyList []*Property `thrift:"propertyList,4" db:"propertyList" json:"propertyList,omitempty"`
}

func NewArgument() *Argument {
  return &Argument{}
}

var Argument_Role_DEFAULT string
func (p *Argument) GetRole() string {
  if !p.IsSetRole() {
    return Argument_Role_DEFAULT
  }
return *p.Role
}
var Argument_EntityId_DEFAULT *UUID
func (p *Argument) GetEntityId() *UUID {
  if !p.IsSetEntityId() {
    return Argument_EntityId_DEFAULT
  }
return p.EntityId
}
var Argument_SituationId_DEFAULT *UUID
func (p *Argument) GetSituationId() *UUID {
  if !p.IsSetSituationId() {
    return Argument_SituationId_DEFAULT
  }
return p.SituationId
}
var Argument_PropertyList_DEFAULT []*Property

func (p *Argument) GetPropertyList() []*Property {
  return p.PropertyList
}
func (p *Argument) IsSetRole() bool {
  return p.Role != nil
}

func (p *Argument) IsSetEntityId() bool {
  return p.EntityId != nil
}

func (p *Argument) IsSetSituationId() bool {
  return p.SituationId != nil
}

func (p *Argument) IsSetPropertyList() bool {
  return p.PropertyList != nil
}

func (p *Argument) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Argument)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Role = &v
}
  return nil
}

func (p *Argument)  ReadField2(iprot thrift.TProtocol) error {
  p.EntityId = &UUID{}
  if err := p.EntityId.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.EntityId), err)
  }
  return nil
}

func (p *Argument)  ReadField3(iprot thrift.TProtocol) error {
  p.SituationId = &UUID{}
  if err := p.SituationId.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SituationId), err)
  }
  return nil
}

func (p *Argument)  ReadField4(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Property, 0, size)
  p.PropertyList =  tSlice
  for i := 0; i < size; i ++ {
    _elem0 := &Property{}
    if err := _elem0.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem0), err)
    }
    p.PropertyList = append(p.PropertyList, _elem0)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *Argument) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Argument"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Argument) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetRole() {
    if err := oprot.WriteFieldBegin("role", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:role: ", p), err) }
    if err := oprot.WriteString(string(*p.Role)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.role (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:role: ", p), err) }
  }
  return err
}

func (p *Argument) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetEntityId() {
    if err := oprot.WriteFieldBegin("entityId", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:entityId: ", p), err) }
    if err := p.EntityId.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.EntityId), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:entityId: ", p), err) }
  }
  return err
}

func (p *Argument) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetSituationId() {
    if err := oprot.WriteFieldBegin("situationId", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:situationId: ", p), err) }
    if err := p.SituationId.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SituationId), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:situationId: ", p), err) }
  }
  return err
}

func (p *Argument) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetPropertyList() {
    if err := oprot.WriteFieldBegin("propertyList", thrift.LIST, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:propertyList: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.PropertyList)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.PropertyList {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:propertyList: ", p), err) }
  }
  return err
}

func (p *Argument) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Argument(%+v)", *p)
}

// Attributes:
//  - JustificationType: An enumerated value used to describe the way in which the
// justification's mention provides supporting evidence for the
// situation.
//  - MentionId: A pointer to the SituationMention itself.
//  - TokenRefSeqList: An optional list of pointers to tokens that are (especially)
// relevant to the way in which this mention provides
// justification for the situation. It is left up to individual
// analytics to decide what tokens (if any) they wish to include
// in this field.
type Justification struct {
  JustificationType *string `thrift:"justificationType,1" db:"justificationType" json:"justificationType,omitempty"`
  MentionId *UUID `thrift:"mentionId,2,required" db:"mentionId" json:"mentionId"`
  TokenRefSeqList []*TokenRefSequence `thrift:"tokenRefSeqList,3" db:"tokenRefSeqList" json:"tokenRefSeqList,omitempty"`
}

func NewJustification() *Justification {
  return &Justification{}
}

var Justification_JustificationType_DEFAULT string
func (p *Justification) GetJustificationType() string {
  if !p.IsSetJustificationType() {
    return Justification_JustificationType_DEFAULT
  }
return *p.JustificationType
}
var Justification_MentionId_DEFAULT *UUID
func (p *Justification) GetMentionId() *UUID {
  if !p.IsSetMentionId() {
    return Justification_MentionId_DEFAULT
  }
return p.MentionId
}
var Justification_TokenRefSeqList_DEFAULT []*TokenRefSequence

func (p *Justification) GetTokenRefSeqList() []*TokenRefSequence {
  return p.TokenRefSeqList
}
func (p *Justification) IsSetJustificationType() bool {
  return p.JustificationType != nil
}

func (p *Justification) IsSetMentionId() bool {
  return p.MentionId != nil
}

func (p *Justification) IsSetTokenRefSeqList() bool {
  return p.TokenRefSeqList != nil
}

func (p *Justification) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetMentionId bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
      issetMentionId = true
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetMentionId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field MentionId is not set"));
  }
  return nil
}

func (p *Justification)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.JustificationType = &v
}
  return nil
}

func (p *Justification)  ReadField2(iprot thrift.TProtocol) error {
  p.MentionId = &UUID{}
  if err := p.MentionId.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.MentionId), err)
  }
  return nil
}

func (p *Justification)  ReadField3(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TokenRefSequence, 0, size)
  p.TokenRefSeqList =  tSlice
  for i := 0; i < size; i ++ {
    _elem1 := &TokenRefSequence{
    AnchorTokenIndex: -1,
}
    if err := _elem1.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem1), err)
    }
    p.TokenRefSeqList = append(p.TokenRefSeqList, _elem1)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *Justification) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Justification"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Justification) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetJustificationType() {
    if err := oprot.WriteFieldBegin("justificationType", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:justificationType: ", p), err) }
    if err := oprot.WriteString(string(*p.JustificationType)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.justificationType (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:justificationType: ", p), err) }
  }
  return err
}

func (p *Justification) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("mentionId", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:mentionId: ", p), err) }
  if err := p.MentionId.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.MentionId), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:mentionId: ", p), err) }
  return err
}

func (p *Justification) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetTokenRefSeqList() {
    if err := oprot.WriteFieldBegin("tokenRefSeqList", thrift.LIST, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:tokenRefSeqList: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.TokenRefSeqList)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.TokenRefSeqList {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:tokenRefSeqList: ", p), err) }
  }
  return err
}

func (p *Justification) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Justification(%+v)", *p)
}

// A wrapper for various TimeML annotations.
// 
// Attributes:
//  - TimeMLClass: The TimeML class for situations representing TimeML events
//  - TimeMLTense: The TimeML tense for situations representing TimeML events
//  - TimeMLAspect: The TimeML aspect for situations representing TimeML events
type TimeML struct {
  TimeMLClass *string `thrift:"timeMLClass,1" db:"timeMLClass" json:"timeMLClass,omitempty"`
  TimeMLTense *string `thrift:"timeMLTense,2" db:"timeMLTense" json:"timeMLTense,omitempty"`
  TimeMLAspect *string `thrift:"timeMLAspect,3" db:"timeMLAspect" json:"timeMLAspect,omitempty"`
}

func NewTimeML() *TimeML {
  return &TimeML{}
}

var TimeML_TimeMLClass_DEFAULT string
func (p *TimeML) GetTimeMLClass() string {
  if !p.IsSetTimeMLClass() {
    return TimeML_TimeMLClass_DEFAULT
  }
return *p.TimeMLClass
}
var TimeML_TimeMLTense_DEFAULT string
func (p *TimeML) GetTimeMLTense() string {
  if !p.IsSetTimeMLTense() {
    return TimeML_TimeMLTense_DEFAULT
  }
return *p.TimeMLTense
}
var TimeML_TimeMLAspect_DEFAULT string
func (p *TimeML) GetTimeMLAspect() string {
  if !p.IsSetTimeMLAspect() {
    return TimeML_TimeMLAspect_DEFAULT
  }
return *p.TimeMLAspect
}
func (p *TimeML) IsSetTimeMLClass() bool {
  return p.TimeMLClass != nil
}

func (p *TimeML) IsSetTimeMLTense() bool {
  return p.TimeMLTense != nil
}

func (p *TimeML) IsSetTimeMLAspect() bool {
  return p.TimeMLAspect != nil
}

func (p *TimeML) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TimeML)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TimeMLClass = &v
}
  return nil
}

func (p *TimeML)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TimeMLTense = &v
}
  return nil
}

func (p *TimeML)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.TimeMLAspect = &v
}
  return nil
}

func (p *TimeML) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TimeML"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TimeML) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetTimeMLClass() {
    if err := oprot.WriteFieldBegin("timeMLClass", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:timeMLClass: ", p), err) }
    if err := oprot.WriteString(string(*p.TimeMLClass)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.timeMLClass (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:timeMLClass: ", p), err) }
  }
  return err
}

func (p *TimeML) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetTimeMLTense() {
    if err := oprot.WriteFieldBegin("timeMLTense", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:timeMLTense: ", p), err) }
    if err := oprot.WriteString(string(*p.TimeMLTense)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.timeMLTense (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:timeMLTense: ", p), err) }
  }
  return err
}

func (p *TimeML) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetTimeMLAspect() {
    if err := oprot.WriteFieldBegin("timeMLAspect", thrift.STRING, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:timeMLAspect: ", p), err) }
    if err := oprot.WriteString(string(*p.TimeMLAspect)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.timeMLAspect (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:timeMLAspect: ", p), err) }
  }
  return err
}

func (p *TimeML) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TimeML(%+v)", *p)
}

// A single situation, along with pointers to situation mentions that
// provide evidence for the situation. "Situations" include events,
// relations, facts, sentiments, and beliefs. Each situation has a
// core type (such as EVENT or SENTIMENT), along with an optional
// subtype based on its core type (e.g., event_type=CONTACT_MEET), and
// a set of zero or more unordered arguments.
// 
// This struct may be used for a variety of "processed" Situations such
// as (but not limited to):
// - SituationMentions which have been collapsed into a coreferential cluster
// - Situations which are inferred and not directly supported by a textual mention
// 
// Attributes:
//  - UUID: Unique identifier for this situation.
//  - SituationType: The core type of this situation (eg EVENT or SENTIMENT),
// or a coarse grain situation type.
//  - SituationKind: A fine grain situation type that specifically describes the
// situation based on situationType above. It allows for more
// detailed description of the situation.
// 
// Some examples:
// 
// if situationType == EVENT, the event type for the situation
// if situationType == STATE, the state type
// if situationType == TEMPORAL_FACT, the temporal fact type
// 
// For Propbank, this field should be the predicate lemma and id,
// e.g. "strike.02". For FrameNet, this should be the frame name,
// e.g. "Commerce_buy".
// 
// Different and more varied situationTypes may be added
// in the future.
//  - ArgumentList: The arguments for this situation. Each argument consists of a
// role and a value. It is possible for an situation to have
// multiple arguments with the same role. Arguments are
// unordered.
//  - MentionIdList: Ids of the mentions of this situation in a communication
// (type=SituationMention)
//  - JustificationList: An list of pointers to SituationMentions that provide
// justification for this situation. These mentions may be either
// direct mentions of the situation, or indirect evidence.
//  - TimeML: A wrapper for TimeML annotations.
//  - Intensity: An "intensity" rating for this situation, typically ranging from
// 0-1. In the case of SENTIMENT situations, this is used to record
// the intensity of the sentiment.
//  - Polarity: The polarity of this situation. In the case of SENTIMENT
// situations, this is used to record the polarity of the
// sentiment.
//  - Confidence: A confidence score for this individual situation. You can also
// set a confidence score for an entire SituationSet using the
// SituationSet's metadata.
type Situation struct {
  UUID *UUID `thrift:"uuid,1,required" db:"uuid" json:"uuid"`
  SituationType string `thrift:"situationType,2,required" db:"situationType" json:"situationType"`
  ArgumentList []*Argument `thrift:"argumentList,3" db:"argumentList" json:"argumentList,omitempty"`
  MentionIdList []*UUID `thrift:"mentionIdList,4" db:"mentionIdList" json:"mentionIdList,omitempty"`
  JustificationList []*Justification `thrift:"justificationList,5" db:"justificationList" json:"justificationList,omitempty"`
  // unused fields # 6 to 49
  SituationKind *string `thrift:"situationKind,50" db:"situationKind" json:"situationKind,omitempty"`
  // unused fields # 51 to 53
  TimeML *TimeML `thrift:"timeML,54" db:"timeML" json:"timeML,omitempty"`
  // unused fields # 55 to 99
  Intensity *float64 `thrift:"intensity,100" db:"intensity" json:"intensity,omitempty"`
  Polarity *string `thrift:"polarity,101" db:"polarity" json:"polarity,omitempty"`
  // unused fields # 102 to 199
  Confidence *float64 `thrift:"confidence,200" db:"confidence" json:"confidence,omitempty"`
}

func NewSituation() *Situation {
  return &Situation{}
}

var Situation_UUID_DEFAULT *UUID
func (p *Situation) GetUUID() *UUID {
  if !p.IsSetUUID() {
    return Situation_UUID_DEFAULT
  }
return p.UUID
}

func (p *Situation) GetSituationType() string {
  return p.SituationType
}
var Situation_SituationKind_DEFAULT string
func (p *Situation) GetSituationKind() string {
  if !p.IsSetSituationKind() {
    return Situation_SituationKind_DEFAULT
  }
return *p.SituationKind
}
var Situation_ArgumentList_DEFAULT []*Argument

func (p *Situation) GetArgumentList() []*Argument {
  return p.ArgumentList
}
var Situation_MentionIdList_DEFAULT []*UUID

func (p *Situation) GetMentionIdList() []*UUID {
  return p.MentionIdList
}
var Situation_JustificationList_DEFAULT []*Justification

func (p *Situation) GetJustificationList() []*Justification {
  return p.JustificationList
}
var Situation_TimeML_DEFAULT *TimeML
func (p *Situation) GetTimeML() *TimeML {
  if !p.IsSetTimeML() {
    return Situation_TimeML_DEFAULT
  }
return p.TimeML
}
var Situation_Intensity_DEFAULT float64
func (p *Situation) GetIntensity() float64 {
  if !p.IsSetIntensity() {
    return Situation_Intensity_DEFAULT
  }
return *p.Intensity
}
var Situation_Polarity_DEFAULT string
func (p *Situation) GetPolarity() string {
  if !p.IsSetPolarity() {
    return Situation_Polarity_DEFAULT
  }
return *p.Polarity
}
var Situation_Confidence_DEFAULT float64
func (p *Situation) GetConfidence() float64 {
  if !p.IsSetConfidence() {
    return Situation_Confidence_DEFAULT
  }
return *p.Confidence
}
func (p *Situation) IsSetUUID() bool {
  return p.UUID != nil
}

func (p *Situation) IsSetSituationKind() bool {
  return p.SituationKind != nil
}

func (p *Situation) IsSetArgumentList() bool {
  return p.ArgumentList != nil
}

func (p *Situation) IsSetMentionIdList() bool {
  return p.MentionIdList != nil
}

func (p *Situation) IsSetJustificationList() bool {
  return p.JustificationList != nil
}

func (p *Situation) IsSetTimeML() bool {
  return p.TimeML != nil
}

func (p *Situation) IsSetIntensity() bool {
  return p.Intensity != nil
}

func (p *Situation) IsSetPolarity() bool {
  return p.Polarity != nil
}

func (p *Situation) IsSetConfidence() bool {
  return p.Confidence != nil
}

func (p *Situation) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetUUID bool = false;
  var issetSituationType bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetUUID = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
      issetSituationType = true
    case 50:
      if err := p.ReadField50(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    case 54:
      if err := p.ReadField54(iprot); err != nil {
        return err
      }
    case 100:
      if err := p.ReadField100(iprot); err != nil {
        return err
      }
    case 101:
      if err := p.ReadField101(iprot); err != nil {
        return err
      }
    case 200:
      if err := p.ReadField200(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetUUID{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field UUID is not set"));
  }
  if !issetSituationType{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field SituationType is not set"));
  }
  return nil
}

func (p *Situation)  ReadField1(iprot thrift.TProtocol) error {
  p.UUID = &UUID{}
  if err := p.UUID.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UUID), err)
  }
  return nil
}

func (p *Situation)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.SituationType = v
}
  return nil
}

func (p *Situation)  ReadField50(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 50: ", err)
} else {
  p.SituationKind = &v
}
  return nil
}

func (p *Situation)  ReadField3(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Argument, 0, size)
  p.ArgumentList =  tSlice
  for i := 0; i < size; i ++ {
    _elem2 := &Argument{}
    if err := _elem2.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem2), err)
    }
    p.ArgumentList = append(p.ArgumentList, _elem2)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *Situation)  ReadField4(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*UUID, 0, size)
  p.MentionIdList =  tSlice
  for i := 0; i < size; i ++ {
    _elem3 := &UUID{}
    if err := _elem3.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem3), err)
    }
    p.MentionIdList = append(p.MentionIdList, _elem3)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *Situation)  ReadField5(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Justification, 0, size)
  p.JustificationList =  tSlice
  for i := 0; i < size; i ++ {
    _elem4 := &Justification{}
    if err := _elem4.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem4), err)
    }
    p.JustificationList = append(p.JustificationList, _elem4)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *Situation)  ReadField54(iprot thrift.TProtocol) error {
  p.TimeML = &TimeML{}
  if err := p.TimeML.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.TimeML), err)
  }
  return nil
}

func (p *Situation)  ReadField100(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 100: ", err)
} else {
  p.Intensity = &v
}
  return nil
}

func (p *Situation)  ReadField101(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 101: ", err)
} else {
  p.Polarity = &v
}
  return nil
}

func (p *Situation)  ReadField200(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 200: ", err)
} else {
  p.Confidence = &v
}
  return nil
}

func (p *Situation) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Situation"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField50(oprot); err != nil { return err }
    if err := p.writeField54(oprot); err != nil { return err }
    if err := p.writeField100(oprot); err != nil { return err }
    if err := p.writeField101(oprot); err != nil { return err }
    if err := p.writeField200(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Situation) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("uuid", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:uuid: ", p), err) }
  if err := p.UUID.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UUID), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:uuid: ", p), err) }
  return err
}

func (p *Situation) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("situationType", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:situationType: ", p), err) }
  if err := oprot.WriteString(string(p.SituationType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.situationType (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:situationType: ", p), err) }
  return err
}

func (p *Situation) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetArgumentList() {
    if err := oprot.WriteFieldBegin("argumentList", thrift.LIST, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:argumentList: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ArgumentList)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.ArgumentList {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:argumentList: ", p), err) }
  }
  return err
}

func (p *Situation) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetMentionIdList() {
    if err := oprot.WriteFieldBegin("mentionIdList", thrift.LIST, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:mentionIdList: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.MentionIdList)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.MentionIdList {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:mentionIdList: ", p), err) }
  }
  return err
}

func (p *Situation) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetJustificationList() {
    if err := oprot.WriteFieldBegin("justificationList", thrift.LIST, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:justificationList: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.JustificationList)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.JustificationList {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:justificationList: ", p), err) }
  }
  return err
}

func (p *Situation) writeField50(oprot thrift.TProtocol) (err error) {
  if p.IsSetSituationKind() {
    if err := oprot.WriteFieldBegin("situationKind", thrift.STRING, 50); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 50:situationKind: ", p), err) }
    if err := oprot.WriteString(string(*p.SituationKind)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.situationKind (50) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 50:situationKind: ", p), err) }
  }
  return err
}

func (p *Situation) writeField54(oprot thrift.TProtocol) (err error) {
  if p.IsSetTimeML() {
    if err := oprot.WriteFieldBegin("timeML", thrift.STRUCT, 54); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 54:timeML: ", p), err) }
    if err := p.TimeML.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.TimeML), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 54:timeML: ", p), err) }
  }
  return err
}

func (p *Situation) writeField100(oprot thrift.TProtocol) (err error) {
  if p.IsSetIntensity() {
    if err := oprot.WriteFieldBegin("intensity", thrift.DOUBLE, 100); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 100:intensity: ", p), err) }
    if err := oprot.WriteDouble(float64(*p.Intensity)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.intensity (100) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 100:intensity: ", p), err) }
  }
  return err
}

func (p *Situation) writeField101(oprot thrift.TProtocol) (err error) {
  if p.IsSetPolarity() {
    if err := oprot.WriteFieldBegin("polarity", thrift.STRING, 101); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 101:polarity: ", p), err) }
    if err := oprot.WriteString(string(*p.Polarity)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.polarity (101) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 101:polarity: ", p), err) }
  }
  return err
}

func (p *Situation) writeField200(oprot thrift.TProtocol) (err error) {
  if p.IsSetConfidence() {
    if err := oprot.WriteFieldBegin("confidence", thrift.DOUBLE, 200); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 200:confidence: ", p), err) }
    if err := oprot.WriteDouble(float64(*p.Confidence)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.confidence (200) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 200:confidence: ", p), err) }
  }
  return err
}

func (p *Situation) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Situation(%+v)", *p)
}

// A theory about the set of situations that are present in a
// message. See also: Situation
// 
// Attributes:
//  - UUID: Unique identifier for this set.
//  - Metadata: Information about where this set came from.
//  - SituationList: List of mentions in this set.
//  - LinkingList: Entity linking annotations associated with this SituationSet.
type SituationSet struct {
  UUID *UUID `thrift:"uuid,1,required" db:"uuid" json:"uuid"`
  Metadata *AnnotationMetadata `thrift:"metadata,2,required" db:"metadata" json:"metadata"`
  SituationList []*Situation `thrift:"situationList,3,required" db:"situationList" json:"situationList"`
  LinkingList []*Linking `thrift:"linkingList,4" db:"linkingList" json:"linkingList,omitempty"`
}

func NewSituationSet() *SituationSet {
  return &SituationSet{}
}

var SituationSet_UUID_DEFAULT *UUID
func (p *SituationSet) GetUUID() *UUID {
  if !p.IsSetUUID() {
    return SituationSet_UUID_DEFAULT
  }
return p.UUID
}
var SituationSet_Metadata_DEFAULT *AnnotationMetadata
func (p *SituationSet) GetMetadata() *AnnotationMetadata {
  if !p.IsSetMetadata() {
    return SituationSet_Metadata_DEFAULT
  }
return p.Metadata
}

func (p *SituationSet) GetSituationList() []*Situation {
  return p.SituationList
}
var SituationSet_LinkingList_DEFAULT []*Linking

func (p *SituationSet) GetLinkingList() []*Linking {
  return p.LinkingList
}
func (p *SituationSet) IsSetUUID() bool {
  return p.UUID != nil
}

func (p *SituationSet) IsSetMetadata() bool {
  return p.Metadata != nil
}

func (p *SituationSet) IsSetLinkingList() bool {
  return p.LinkingList != nil
}

func (p *SituationSet) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetUUID bool = false;
  var issetMetadata bool = false;
  var issetSituationList bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetUUID = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
      issetMetadata = true
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
      issetSituationList = true
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetUUID{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field UUID is not set"));
  }
  if !issetMetadata{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Metadata is not set"));
  }
  if !issetSituationList{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field SituationList is not set"));
  }
  return nil
}

func (p *SituationSet)  ReadField1(iprot thrift.TProtocol) error {
  p.UUID = &UUID{}
  if err := p.UUID.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UUID), err)
  }
  return nil
}

func (p *SituationSet)  ReadField2(iprot thrift.TProtocol) error {
  p.Metadata = &AnnotationMetadata{
  KBest: 1,
}
  if err := p.Metadata.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Metadata), err)
  }
  return nil
}

func (p *SituationSet)  ReadField3(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Situation, 0, size)
  p.SituationList =  tSlice
  for i := 0; i < size; i ++ {
    _elem5 := &Situation{}
    if err := _elem5.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem5), err)
    }
    p.SituationList = append(p.SituationList, _elem5)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *SituationSet)  ReadField4(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Linking, 0, size)
  p.LinkingList =  tSlice
  for i := 0; i < size; i ++ {
    _elem6 := &Linking{}
    if err := _elem6.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem6), err)
    }
    p.LinkingList = append(p.LinkingList, _elem6)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *SituationSet) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SituationSet"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SituationSet) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("uuid", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:uuid: ", p), err) }
  if err := p.UUID.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UUID), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:uuid: ", p), err) }
  return err
}

func (p *SituationSet) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("metadata", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:metadata: ", p), err) }
  if err := p.Metadata.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Metadata), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:metadata: ", p), err) }
  return err
}

func (p *SituationSet) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("situationList", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:situationList: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.SituationList)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.SituationList {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:situationList: ", p), err) }
  return err
}

func (p *SituationSet) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetLinkingList() {
    if err := oprot.WriteFieldBegin("linkingList", thrift.LIST, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:linkingList: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.LinkingList)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.LinkingList {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:linkingList: ", p), err) }
  }
  return err
}

func (p *SituationSet) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SituationSet(%+v)", *p)
}

// A "concrete" argument, that may be used by SituationMentions or EntityMentions
// to avoid conflicts where abstract Arguments were being used to support concrete Mentions.
// 
// Attributes:
//  - Role: The relationship between this argument and the situation that
// owns it. The roles that a situation's arguments can take
// depend on the type of the situation (including subtype
// information, such as event_type).
//  - EntityMentionId: A pointer to the value of an EntityMention, if this is being used to support
// an EntityMention.
//  - SituationMentionId: A pointer to the value of this argument, if it is a SituationMention.
//  - Tokens: The location of this MentionArgument in the Communication.
// If this MentionArgument can be identified in a document using an
// EntityMention or SituationMention, then UUID references to those
// types should be preferred and this field left as null.
//  - Confidence: Confidence of this argument belonging to its SituationMention
//  - PropertyList: For the BinarySRL task, there may be situations
// where more than one property is attached to a single
// participant. A list of these properties can be stored in this field.
type MentionArgument struct {
  Role *string `thrift:"role,1" db:"role" json:"role,omitempty"`
  EntityMentionId *UUID `thrift:"entityMentionId,2" db:"entityMentionId" json:"entityMentionId,omitempty"`
  SituationMentionId *UUID `thrift:"situationMentionId,3" db:"situationMentionId" json:"situationMentionId,omitempty"`
  Tokens *TokenRefSequence `thrift:"tokens,4" db:"tokens" json:"tokens,omitempty"`
  Confidence *float64 `thrift:"confidence,5" db:"confidence" json:"confidence,omitempty"`
  PropertyList []*Property `thrift:"propertyList,6" db:"propertyList" json:"propertyList,omitempty"`
}

func NewMentionArgument() *MentionArgument {
  return &MentionArgument{}
}

var MentionArgument_Role_DEFAULT string
func (p *MentionArgument) GetRole() string {
  if !p.IsSetRole() {
    return MentionArgument_Role_DEFAULT
  }
return *p.Role
}
var MentionArgument_EntityMentionId_DEFAULT *UUID
func (p *MentionArgument) GetEntityMentionId() *UUID {
  if !p.IsSetEntityMentionId() {
    return MentionArgument_EntityMentionId_DEFAULT
  }
return p.EntityMentionId
}
var MentionArgument_SituationMentionId_DEFAULT *UUID
func (p *MentionArgument) GetSituationMentionId() *UUID {
  if !p.IsSetSituationMentionId() {
    return MentionArgument_SituationMentionId_DEFAULT
  }
return p.SituationMentionId
}
var MentionArgument_Tokens_DEFAULT *TokenRefSequence
func (p *MentionArgument) GetTokens() *TokenRefSequence {
  if !p.IsSetTokens() {
    return MentionArgument_Tokens_DEFAULT
  }
return p.Tokens
}
var MentionArgument_Confidence_DEFAULT float64
func (p *MentionArgument) GetConfidence() float64 {
  if !p.IsSetConfidence() {
    return MentionArgument_Confidence_DEFAULT
  }
return *p.Confidence
}
var MentionArgument_PropertyList_DEFAULT []*Property

func (p *MentionArgument) GetPropertyList() []*Property {
  return p.PropertyList
}
func (p *MentionArgument) IsSetRole() bool {
  return p.Role != nil
}

func (p *MentionArgument) IsSetEntityMentionId() bool {
  return p.EntityMentionId != nil
}

func (p *MentionArgument) IsSetSituationMentionId() bool {
  return p.SituationMentionId != nil
}

func (p *MentionArgument) IsSetTokens() bool {
  return p.Tokens != nil
}

func (p *MentionArgument) IsSetConfidence() bool {
  return p.Confidence != nil
}

func (p *MentionArgument) IsSetPropertyList() bool {
  return p.PropertyList != nil
}

func (p *MentionArgument) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MentionArgument)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Role = &v
}
  return nil
}

func (p *MentionArgument)  ReadField2(iprot thrift.TProtocol) error {
  p.EntityMentionId = &UUID{}
  if err := p.EntityMentionId.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.EntityMentionId), err)
  }
  return nil
}

func (p *MentionArgument)  ReadField3(iprot thrift.TProtocol) error {
  p.SituationMentionId = &UUID{}
  if err := p.SituationMentionId.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SituationMentionId), err)
  }
  return nil
}

func (p *MentionArgument)  ReadField4(iprot thrift.TProtocol) error {
  p.Tokens = &TokenRefSequence{
  AnchorTokenIndex: -1,
}
  if err := p.Tokens.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Tokens), err)
  }
  return nil
}

func (p *MentionArgument)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Confidence = &v
}
  return nil
}

func (p *MentionArgument)  ReadField6(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Property, 0, size)
  p.PropertyList =  tSlice
  for i := 0; i < size; i ++ {
    _elem7 := &Property{}
    if err := _elem7.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem7), err)
    }
    p.PropertyList = append(p.PropertyList, _elem7)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *MentionArgument) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("MentionArgument"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MentionArgument) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetRole() {
    if err := oprot.WriteFieldBegin("role", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:role: ", p), err) }
    if err := oprot.WriteString(string(*p.Role)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.role (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:role: ", p), err) }
  }
  return err
}

func (p *MentionArgument) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetEntityMentionId() {
    if err := oprot.WriteFieldBegin("entityMentionId", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:entityMentionId: ", p), err) }
    if err := p.EntityMentionId.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.EntityMentionId), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:entityMentionId: ", p), err) }
  }
  return err
}

func (p *MentionArgument) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetSituationMentionId() {
    if err := oprot.WriteFieldBegin("situationMentionId", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:situationMentionId: ", p), err) }
    if err := p.SituationMentionId.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SituationMentionId), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:situationMentionId: ", p), err) }
  }
  return err
}

func (p *MentionArgument) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetTokens() {
    if err := oprot.WriteFieldBegin("tokens", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:tokens: ", p), err) }
    if err := p.Tokens.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Tokens), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:tokens: ", p), err) }
  }
  return err
}

func (p *MentionArgument) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetConfidence() {
    if err := oprot.WriteFieldBegin("confidence", thrift.DOUBLE, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:confidence: ", p), err) }
    if err := oprot.WriteDouble(float64(*p.Confidence)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.confidence (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:confidence: ", p), err) }
  }
  return err
}

func (p *MentionArgument) writeField6(oprot thrift.TProtocol) (err error) {
  if p.IsSetPropertyList() {
    if err := oprot.WriteFieldBegin("propertyList", thrift.LIST, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:propertyList: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.PropertyList)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.PropertyList {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:propertyList: ", p), err) }
  }
  return err
}

func (p *MentionArgument) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MentionArgument(%+v)", *p)
}

// A concrete mention of a situation, where "situations" include
// events, relations, facts, sentiments, and beliefs. Each situation
// has a core type (such as EVENT or SENTIMENT), along with an
// optional subtype based on its core type (e.g.,
// event_type=CONTACT_MEET), and a set of zero or more unordered
// arguments.
// 
// This struct should be used for most types of SRL labelings
// (e.g. Propbank and FrameNet) because they are grounded in text.
// 
// Attributes:
//  - UUID: Unique identifier for this situation.
//  - Text: The text content of this situation mention. This field is
// often redundant with the 'tokens' field, and may not
// be generated by all analytics.
//  - SituationType: The core type of this situation (eg EVENT or SENTIMENT),
// or a coarse grain situation type.
//  - SituationKind: A fine grain situation type that specifically describes the
// situation mention based on situationType above. It allows for
// more detailed description of the situation mention.
// 
// Some examples:
// 
// if situationType == EVENT, the event type for the sit. mention
// if situationType == STATE, the state type for this sit. mention
// 
// For Propbank, this field should be the predicate lemma and id,
// e.g. "strike.02". For FrameNet, this should be the frame name,
// e.g. "Commerce_buy".
// 
// Different and more varied situationTypes may be added
// in the future.
//  - ArgumentList: The arguments for this situation mention. Each argument
// consists of a role and a value. It is possible for an situation
// to have multiple arguments with the same role. Arguments are
// unordered.
//  - Intensity: An "intensity" rating for the situation, typically ranging from
// 0-1. In the case of SENTIMENT situations, this is used to record
// the intensity of the sentiment.
//  - Polarity: The polarity of this situation. In the case of SENTIMENT
// situations, this is used to record the polarity of the
// sentiment.
//  - Tokens: An optional pointer to tokens that are (especially)
// relevant to this situation mention. It is left up to individual
// analytics to decide what tokens (if any) they wish to include in
// this field. In particular, it is not specified whether the
// arguments' tokens should be included.
//  - Confidence: A confidence score for this individual situation mention. You
// can also set a confidence score for an entire SituationMentionSet
// using the SituationMentionSet's metadata.
type SituationMention struct {
  UUID *UUID `thrift:"uuid,1,required" db:"uuid" json:"uuid"`
  Text *string `thrift:"text,2" db:"text" json:"text,omitempty"`
  SituationType *string `thrift:"situationType,3" db:"situationType" json:"situationType,omitempty"`
  ArgumentList []*MentionArgument `thrift:"argumentList,4,required" db:"argumentList" json:"argumentList"`
  // unused fields # 5 to 49
  SituationKind *string `thrift:"situationKind,50" db:"situationKind" json:"situationKind,omitempty"`
  // unused fields # 51 to 99
  Intensity *float64 `thrift:"intensity,100" db:"intensity" json:"intensity,omitempty"`
  Polarity *string `thrift:"polarity,101" db:"polarity" json:"polarity,omitempty"`
  // unused fields # 102 to 149
  Tokens *TokenRefSequence `thrift:"tokens,150" db:"tokens" json:"tokens,omitempty"`
  // unused fields # 151 to 199
  Confidence *float64 `thrift:"confidence,200" db:"confidence" json:"confidence,omitempty"`
}

func NewSituationMention() *SituationMention {
  return &SituationMention{}
}

var SituationMention_UUID_DEFAULT *UUID
func (p *SituationMention) GetUUID() *UUID {
  if !p.IsSetUUID() {
    return SituationMention_UUID_DEFAULT
  }
return p.UUID
}
var SituationMention_Text_DEFAULT string
func (p *SituationMention) GetText() string {
  if !p.IsSetText() {
    return SituationMention_Text_DEFAULT
  }
return *p.Text
}
var SituationMention_SituationType_DEFAULT string
func (p *SituationMention) GetSituationType() string {
  if !p.IsSetSituationType() {
    return SituationMention_SituationType_DEFAULT
  }
return *p.SituationType
}
var SituationMention_SituationKind_DEFAULT string
func (p *SituationMention) GetSituationKind() string {
  if !p.IsSetSituationKind() {
    return SituationMention_SituationKind_DEFAULT
  }
return *p.SituationKind
}

func (p *SituationMention) GetArgumentList() []*MentionArgument {
  return p.ArgumentList
}
var SituationMention_Intensity_DEFAULT float64
func (p *SituationMention) GetIntensity() float64 {
  if !p.IsSetIntensity() {
    return SituationMention_Intensity_DEFAULT
  }
return *p.Intensity
}
var SituationMention_Polarity_DEFAULT string
func (p *SituationMention) GetPolarity() string {
  if !p.IsSetPolarity() {
    return SituationMention_Polarity_DEFAULT
  }
return *p.Polarity
}
var SituationMention_Tokens_DEFAULT *TokenRefSequence
func (p *SituationMention) GetTokens() *TokenRefSequence {
  if !p.IsSetTokens() {
    return SituationMention_Tokens_DEFAULT
  }
return p.Tokens
}
var SituationMention_Confidence_DEFAULT float64
func (p *SituationMention) GetConfidence() float64 {
  if !p.IsSetConfidence() {
    return SituationMention_Confidence_DEFAULT
  }
return *p.Confidence
}
func (p *SituationMention) IsSetUUID() bool {
  return p.UUID != nil
}

func (p *SituationMention) IsSetText() bool {
  return p.Text != nil
}

func (p *SituationMention) IsSetSituationType() bool {
  return p.SituationType != nil
}

func (p *SituationMention) IsSetSituationKind() bool {
  return p.SituationKind != nil
}

func (p *SituationMention) IsSetIntensity() bool {
  return p.Intensity != nil
}

func (p *SituationMention) IsSetPolarity() bool {
  return p.Polarity != nil
}

func (p *SituationMention) IsSetTokens() bool {
  return p.Tokens != nil
}

func (p *SituationMention) IsSetConfidence() bool {
  return p.Confidence != nil
}

func (p *SituationMention) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetUUID bool = false;
  var issetArgumentList bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetUUID = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 50:
      if err := p.ReadField50(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
      issetArgumentList = true
    case 100:
      if err := p.ReadField100(iprot); err != nil {
        return err
      }
    case 101:
      if err := p.ReadField101(iprot); err != nil {
        return err
      }
    case 150:
      if err := p.ReadField150(iprot); err != nil {
        return err
      }
    case 200:
      if err := p.ReadField200(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetUUID{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field UUID is not set"));
  }
  if !issetArgumentList{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ArgumentList is not set"));
  }
  return nil
}

func (p *SituationMention)  ReadField1(iprot thrift.TProtocol) error {
  p.UUID = &UUID{}
  if err := p.UUID.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UUID), err)
  }
  return nil
}

func (p *SituationMention)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Text = &v
}
  return nil
}

func (p *SituationMention)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.SituationType = &v
}
  return nil
}

func (p *SituationMention)  ReadField50(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 50: ", err)
} else {
  p.SituationKind = &v
}
  return nil
}

func (p *SituationMention)  ReadField4(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*MentionArgument, 0, size)
  p.ArgumentList =  tSlice
  for i := 0; i < size; i ++ {
    _elem8 := &MentionArgument{}
    if err := _elem8.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem8), err)
    }
    p.ArgumentList = append(p.ArgumentList, _elem8)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *SituationMention)  ReadField100(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 100: ", err)
} else {
  p.Intensity = &v
}
  return nil
}

func (p *SituationMention)  ReadField101(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 101: ", err)
} else {
  p.Polarity = &v
}
  return nil
}

func (p *SituationMention)  ReadField150(iprot thrift.TProtocol) error {
  p.Tokens = &TokenRefSequence{
  AnchorTokenIndex: -1,
}
  if err := p.Tokens.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Tokens), err)
  }
  return nil
}

func (p *SituationMention)  ReadField200(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 200: ", err)
} else {
  p.Confidence = &v
}
  return nil
}

func (p *SituationMention) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SituationMention"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField50(oprot); err != nil { return err }
    if err := p.writeField100(oprot); err != nil { return err }
    if err := p.writeField101(oprot); err != nil { return err }
    if err := p.writeField150(oprot); err != nil { return err }
    if err := p.writeField200(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SituationMention) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("uuid", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:uuid: ", p), err) }
  if err := p.UUID.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UUID), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:uuid: ", p), err) }
  return err
}

func (p *SituationMention) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetText() {
    if err := oprot.WriteFieldBegin("text", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:text: ", p), err) }
    if err := oprot.WriteString(string(*p.Text)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.text (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:text: ", p), err) }
  }
  return err
}

func (p *SituationMention) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetSituationType() {
    if err := oprot.WriteFieldBegin("situationType", thrift.STRING, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:situationType: ", p), err) }
    if err := oprot.WriteString(string(*p.SituationType)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.situationType (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:situationType: ", p), err) }
  }
  return err
}

func (p *SituationMention) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("argumentList", thrift.LIST, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:argumentList: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ArgumentList)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.ArgumentList {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:argumentList: ", p), err) }
  return err
}

func (p *SituationMention) writeField50(oprot thrift.TProtocol) (err error) {
  if p.IsSetSituationKind() {
    if err := oprot.WriteFieldBegin("situationKind", thrift.STRING, 50); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 50:situationKind: ", p), err) }
    if err := oprot.WriteString(string(*p.SituationKind)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.situationKind (50) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 50:situationKind: ", p), err) }
  }
  return err
}

func (p *SituationMention) writeField100(oprot thrift.TProtocol) (err error) {
  if p.IsSetIntensity() {
    if err := oprot.WriteFieldBegin("intensity", thrift.DOUBLE, 100); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 100:intensity: ", p), err) }
    if err := oprot.WriteDouble(float64(*p.Intensity)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.intensity (100) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 100:intensity: ", p), err) }
  }
  return err
}

func (p *SituationMention) writeField101(oprot thrift.TProtocol) (err error) {
  if p.IsSetPolarity() {
    if err := oprot.WriteFieldBegin("polarity", thrift.STRING, 101); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 101:polarity: ", p), err) }
    if err := oprot.WriteString(string(*p.Polarity)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.polarity (101) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 101:polarity: ", p), err) }
  }
  return err
}

func (p *SituationMention) writeField150(oprot thrift.TProtocol) (err error) {
  if p.IsSetTokens() {
    if err := oprot.WriteFieldBegin("tokens", thrift.STRUCT, 150); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 150:tokens: ", p), err) }
    if err := p.Tokens.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Tokens), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 150:tokens: ", p), err) }
  }
  return err
}

func (p *SituationMention) writeField200(oprot thrift.TProtocol) (err error) {
  if p.IsSetConfidence() {
    if err := oprot.WriteFieldBegin("confidence", thrift.DOUBLE, 200); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 200:confidence: ", p), err) }
    if err := oprot.WriteDouble(float64(*p.Confidence)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.confidence (200) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 200:confidence: ", p), err) }
  }
  return err
}

func (p *SituationMention) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SituationMention(%+v)", *p)
}

// A theory about the set of situation mentions that are present in a
// message. See also: SituationMention
// 
// Attributes:
//  - UUID: Unique identifier for this set.
//  - Metadata: Information about where this set came from.
//  - MentionList: List of mentions in this set.
//  - LinkingList: Entity linking annotations associated with this SituationMentionSet.
type SituationMentionSet struct {
  UUID *UUID `thrift:"uuid,1,required" db:"uuid" json:"uuid"`
  Metadata *AnnotationMetadata `thrift:"metadata,2,required" db:"metadata" json:"metadata"`
  MentionList []*SituationMention `thrift:"mentionList,3,required" db:"mentionList" json:"mentionList"`
  LinkingList []*Linking `thrift:"linkingList,4" db:"linkingList" json:"linkingList,omitempty"`
}

func NewSituationMentionSet() *SituationMentionSet {
  return &SituationMentionSet{}
}

var SituationMentionSet_UUID_DEFAULT *UUID
func (p *SituationMentionSet) GetUUID() *UUID {
  if !p.IsSetUUID() {
    return SituationMentionSet_UUID_DEFAULT
  }
return p.UUID
}
var SituationMentionSet_Metadata_DEFAULT *AnnotationMetadata
func (p *SituationMentionSet) GetMetadata() *AnnotationMetadata {
  if !p.IsSetMetadata() {
    return SituationMentionSet_Metadata_DEFAULT
  }
return p.Metadata
}

func (p *SituationMentionSet) GetMentionList() []*SituationMention {
  return p.MentionList
}
var SituationMentionSet_LinkingList_DEFAULT []*Linking

func (p *SituationMentionSet) GetLinkingList() []*Linking {
  return p.LinkingList
}
func (p *SituationMentionSet) IsSetUUID() bool {
  return p.UUID != nil
}

func (p *SituationMentionSet) IsSetMetadata() bool {
  return p.Metadata != nil
}

func (p *SituationMentionSet) IsSetLinkingList() bool {
  return p.LinkingList != nil
}

func (p *SituationMentionSet) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetUUID bool = false;
  var issetMetadata bool = false;
  var issetMentionList bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetUUID = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
      issetMetadata = true
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
      issetMentionList = true
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetUUID{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field UUID is not set"));
  }
  if !issetMetadata{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Metadata is not set"));
  }
  if !issetMentionList{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field MentionList is not set"));
  }
  return nil
}

func (p *SituationMentionSet)  ReadField1(iprot thrift.TProtocol) error {
  p.UUID = &UUID{}
  if err := p.UUID.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UUID), err)
  }
  return nil
}

func (p *SituationMentionSet)  ReadField2(iprot thrift.TProtocol) error {
  p.Metadata = &AnnotationMetadata{
  KBest: 1,
}
  if err := p.Metadata.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Metadata), err)
  }
  return nil
}

func (p *SituationMentionSet)  ReadField3(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*SituationMention, 0, size)
  p.MentionList =  tSlice
  for i := 0; i < size; i ++ {
    _elem9 := &SituationMention{}
    if err := _elem9.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem9), err)
    }
    p.MentionList = append(p.MentionList, _elem9)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *SituationMentionSet)  ReadField4(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Linking, 0, size)
  p.LinkingList =  tSlice
  for i := 0; i < size; i ++ {
    _elem10 := &Linking{}
    if err := _elem10.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem10), err)
    }
    p.LinkingList = append(p.LinkingList, _elem10)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *SituationMentionSet) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SituationMentionSet"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SituationMentionSet) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("uuid", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:uuid: ", p), err) }
  if err := p.UUID.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UUID), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:uuid: ", p), err) }
  return err
}

func (p *SituationMentionSet) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("metadata", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:metadata: ", p), err) }
  if err := p.Metadata.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Metadata), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:metadata: ", p), err) }
  return err
}

func (p *SituationMentionSet) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("mentionList", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:mentionList: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.MentionList)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.MentionList {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:mentionList: ", p), err) }
  return err
}

func (p *SituationMentionSet) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetLinkingList() {
    if err := oprot.WriteFieldBegin("linkingList", thrift.LIST, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:linkingList: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.LinkingList)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.LinkingList {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:linkingList: ", p), err) }
  }
  return err
}

func (p *SituationMentionSet) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SituationMentionSet(%+v)", *p)
}

