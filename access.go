// Autogenerated by Thrift Compiler (0.10.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package goncrete

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"

)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

// Struct containing Communications from the FetchCommunicationService service.
// 
// Attributes:
//  - Communications: a list of Communication objects that represent the results of the request
type FetchResult_ struct {
  Communications []*Communication `thrift:"communications,1,required" db:"communications" json:"communications"`
}

func NewFetchResult_() *FetchResult_ {
  return &FetchResult_{}
}


func (p *FetchResult_) GetCommunications() []*Communication {
  return p.Communications
}
func (p *FetchResult_) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetCommunications bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetCommunications = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetCommunications{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Communications is not set"));
  }
  return nil
}

func (p *FetchResult_)  ReadField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Communication, 0, size)
  p.Communications =  tSlice
  for i := 0; i < size; i ++ {
    _elem0 := &Communication{}
    if err := _elem0.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem0), err)
    }
    p.Communications = append(p.Communications, _elem0)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *FetchResult_) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("FetchResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *FetchResult_) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("communications", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:communications: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Communications)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Communications {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:communications: ", p), err) }
  return err
}

func (p *FetchResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("FetchResult_(%+v)", *p)
}

// Struct representing a request for FetchCommunicationService.
// 
// Attributes:
//  - CommunicationIds: a list of Communication IDs
//  - Auths: optional authorization mechanism
type FetchRequest struct {
  CommunicationIds []string `thrift:"communicationIds,1,required" db:"communicationIds" json:"communicationIds"`
  Auths *string `thrift:"auths,2" db:"auths" json:"auths,omitempty"`
}

func NewFetchRequest() *FetchRequest {
  return &FetchRequest{}
}


func (p *FetchRequest) GetCommunicationIds() []string {
  return p.CommunicationIds
}
var FetchRequest_Auths_DEFAULT string
func (p *FetchRequest) GetAuths() string {
  if !p.IsSetAuths() {
    return FetchRequest_Auths_DEFAULT
  }
return *p.Auths
}
func (p *FetchRequest) IsSetAuths() bool {
  return p.Auths != nil
}

func (p *FetchRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetCommunicationIds bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetCommunicationIds = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetCommunicationIds{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field CommunicationIds is not set"));
  }
  return nil
}

func (p *FetchRequest)  ReadField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.CommunicationIds =  tSlice
  for i := 0; i < size; i ++ {
var _elem1 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem1 = v
}
    p.CommunicationIds = append(p.CommunicationIds, _elem1)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *FetchRequest)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Auths = &v
}
  return nil
}

func (p *FetchRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("FetchRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *FetchRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("communicationIds", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:communicationIds: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.CommunicationIds)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.CommunicationIds {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:communicationIds: ", p), err) }
  return err
}

func (p *FetchRequest) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetAuths() {
    if err := oprot.WriteFieldBegin("auths", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:auths: ", p), err) }
    if err := oprot.WriteString(string(*p.Auths)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.auths (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:auths: ", p), err) }
  }
  return err
}

func (p *FetchRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("FetchRequest(%+v)", *p)
}

type FetchCommunicationService interface {
Service
  //Service to fetch particular communications.

  // Parameters:
  //  - Request
  Fetch(request *FetchRequest) (r *FetchResult_, err error)
  // Get a list of 'count' Communication IDs starting at 'offset'.  Implementations
  // that do not provide this should throw an exception.
  // 
  // Parameters:
  //  - Offset
  //  - Count
  GetCommunicationIDs(offset int64, count int64) (r []string, err error)
  // Get the number of Communications this service searches over.  Implementations
  // that do not provide this should throw an exception.
  GetCommunicationCount() (r int64, err error)
}

//Service to fetch particular communications.
type FetchCommunicationServiceClient struct {
  *ServiceClient
}

func NewFetchCommunicationServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *FetchCommunicationServiceClient {
  return &FetchCommunicationServiceClient{ServiceClient: NewServiceClientFactory(t, f)}}

func NewFetchCommunicationServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *FetchCommunicationServiceClient {
  return &FetchCommunicationServiceClient{ServiceClient: NewServiceClientProtocol(t, iprot, oprot)}
}

// Parameters:
//  - Request
func (p *FetchCommunicationServiceClient) Fetch(request *FetchRequest) (r *FetchResult_, err error) {
  if err = p.sendFetch(request); err != nil { return }
  return p.recvFetch()
}

func (p *FetchCommunicationServiceClient) sendFetch(request *FetchRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("fetch", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := FetchCommunicationServiceFetchArgs{
  Request : request,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *FetchCommunicationServiceClient) recvFetch() (value *FetchResult_, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "fetch" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "fetch failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "fetch failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error2 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error3 error
    error3, err = error2.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error3
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "fetch failed: invalid message type")
    return
  }
  result := FetchCommunicationServiceFetchResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ex != nil {
    err = result.Ex
    return 
  }
  value = result.GetSuccess()
  return
}

// Get a list of 'count' Communication IDs starting at 'offset'.  Implementations
// that do not provide this should throw an exception.
// 
// Parameters:
//  - Offset
//  - Count
func (p *FetchCommunicationServiceClient) GetCommunicationIDs(offset int64, count int64) (r []string, err error) {
  if err = p.sendGetCommunicationIDs(offset, count); err != nil { return }
  return p.recvGetCommunicationIDs()
}

func (p *FetchCommunicationServiceClient) sendGetCommunicationIDs(offset int64, count int64)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("getCommunicationIDs", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := FetchCommunicationServiceGetCommunicationIDsArgs{
  Offset : offset,
  Count : count,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *FetchCommunicationServiceClient) recvGetCommunicationIDs() (value []string, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "getCommunicationIDs" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getCommunicationIDs failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getCommunicationIDs failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error4 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error5 error
    error5, err = error4.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error5
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getCommunicationIDs failed: invalid message type")
    return
  }
  result := FetchCommunicationServiceGetCommunicationIDsResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ex != nil {
    err = result.Ex
    return 
  }
  value = result.GetSuccess()
  return
}

// Get the number of Communications this service searches over.  Implementations
// that do not provide this should throw an exception.
func (p *FetchCommunicationServiceClient) GetCommunicationCount() (r int64, err error) {
  if err = p.sendGetCommunicationCount(); err != nil { return }
  return p.recvGetCommunicationCount()
}

func (p *FetchCommunicationServiceClient) sendGetCommunicationCount()(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("getCommunicationCount", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := FetchCommunicationServiceGetCommunicationCountArgs{
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *FetchCommunicationServiceClient) recvGetCommunicationCount() (value int64, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "getCommunicationCount" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getCommunicationCount failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getCommunicationCount failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error6 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error7 error
    error7, err = error6.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error7
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getCommunicationCount failed: invalid message type")
    return
  }
  result := FetchCommunicationServiceGetCommunicationCountResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ex != nil {
    err = result.Ex
    return 
  }
  value = result.GetSuccess()
  return
}


type FetchCommunicationServiceProcessor struct {
  *ServiceProcessor
}

func NewFetchCommunicationServiceProcessor(handler FetchCommunicationService) *FetchCommunicationServiceProcessor {
  self8 := &FetchCommunicationServiceProcessor{NewServiceProcessor(handler)}
  self8.AddToProcessorMap("fetch", &fetchCommunicationServiceProcessorFetch{handler:handler})
  self8.AddToProcessorMap("getCommunicationIDs", &fetchCommunicationServiceProcessorGetCommunicationIDs{handler:handler})
  self8.AddToProcessorMap("getCommunicationCount", &fetchCommunicationServiceProcessorGetCommunicationCount{handler:handler})
  return self8
}

type fetchCommunicationServiceProcessorFetch struct {
  handler FetchCommunicationService
}

func (p *fetchCommunicationServiceProcessorFetch) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := FetchCommunicationServiceFetchArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("fetch", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := FetchCommunicationServiceFetchResult{}
var retval *FetchResult_
  var err2 error
  if retval, err2 = p.handler.Fetch(args.Request); err2 != nil {
  switch v := err2.(type) {
    case *ServicesException:
  result.Ex = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing fetch: " + err2.Error())
    oprot.WriteMessageBegin("fetch", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("fetch", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type fetchCommunicationServiceProcessorGetCommunicationIDs struct {
  handler FetchCommunicationService
}

func (p *fetchCommunicationServiceProcessorGetCommunicationIDs) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := FetchCommunicationServiceGetCommunicationIDsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getCommunicationIDs", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := FetchCommunicationServiceGetCommunicationIDsResult{}
var retval []string
  var err2 error
  if retval, err2 = p.handler.GetCommunicationIDs(args.Offset, args.Count); err2 != nil {
  switch v := err2.(type) {
    case *NotImplementedException:
  result.Ex = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getCommunicationIDs: " + err2.Error())
    oprot.WriteMessageBegin("getCommunicationIDs", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getCommunicationIDs", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type fetchCommunicationServiceProcessorGetCommunicationCount struct {
  handler FetchCommunicationService
}

func (p *fetchCommunicationServiceProcessorGetCommunicationCount) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := FetchCommunicationServiceGetCommunicationCountArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getCommunicationCount", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := FetchCommunicationServiceGetCommunicationCountResult{}
var retval int64
  var err2 error
  if retval, err2 = p.handler.GetCommunicationCount(); err2 != nil {
  switch v := err2.(type) {
    case *NotImplementedException:
  result.Ex = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getCommunicationCount: " + err2.Error())
    oprot.WriteMessageBegin("getCommunicationCount", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("getCommunicationCount", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Request
type FetchCommunicationServiceFetchArgs struct {
  Request *FetchRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewFetchCommunicationServiceFetchArgs() *FetchCommunicationServiceFetchArgs {
  return &FetchCommunicationServiceFetchArgs{}
}

var FetchCommunicationServiceFetchArgs_Request_DEFAULT *FetchRequest
func (p *FetchCommunicationServiceFetchArgs) GetRequest() *FetchRequest {
  if !p.IsSetRequest() {
    return FetchCommunicationServiceFetchArgs_Request_DEFAULT
  }
return p.Request
}
func (p *FetchCommunicationServiceFetchArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *FetchCommunicationServiceFetchArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *FetchCommunicationServiceFetchArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Request = &FetchRequest{}
  if err := p.Request.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *FetchCommunicationServiceFetchArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("fetch_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *FetchCommunicationServiceFetchArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *FetchCommunicationServiceFetchArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("FetchCommunicationServiceFetchArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex
type FetchCommunicationServiceFetchResult struct {
  Success *FetchResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ex *ServicesException `thrift:"ex,1" db:"ex" json:"ex,omitempty"`
}

func NewFetchCommunicationServiceFetchResult() *FetchCommunicationServiceFetchResult {
  return &FetchCommunicationServiceFetchResult{}
}

var FetchCommunicationServiceFetchResult_Success_DEFAULT *FetchResult_
func (p *FetchCommunicationServiceFetchResult) GetSuccess() *FetchResult_ {
  if !p.IsSetSuccess() {
    return FetchCommunicationServiceFetchResult_Success_DEFAULT
  }
return p.Success
}
var FetchCommunicationServiceFetchResult_Ex_DEFAULT *ServicesException
func (p *FetchCommunicationServiceFetchResult) GetEx() *ServicesException {
  if !p.IsSetEx() {
    return FetchCommunicationServiceFetchResult_Ex_DEFAULT
  }
return p.Ex
}
func (p *FetchCommunicationServiceFetchResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *FetchCommunicationServiceFetchResult) IsSetEx() bool {
  return p.Ex != nil
}

func (p *FetchCommunicationServiceFetchResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *FetchCommunicationServiceFetchResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &FetchResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *FetchCommunicationServiceFetchResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ex = &ServicesException{}
  if err := p.Ex.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
  }
  return nil
}

func (p *FetchCommunicationServiceFetchResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("fetch_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *FetchCommunicationServiceFetchResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *FetchCommunicationServiceFetchResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetEx() {
    if err := oprot.WriteFieldBegin("ex", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err) }
    if err := p.Ex.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err) }
  }
  return err
}

func (p *FetchCommunicationServiceFetchResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("FetchCommunicationServiceFetchResult(%+v)", *p)
}

// Attributes:
//  - Offset
//  - Count
type FetchCommunicationServiceGetCommunicationIDsArgs struct {
  Offset int64 `thrift:"offset,1" db:"offset" json:"offset"`
  Count int64 `thrift:"count,2" db:"count" json:"count"`
}

func NewFetchCommunicationServiceGetCommunicationIDsArgs() *FetchCommunicationServiceGetCommunicationIDsArgs {
  return &FetchCommunicationServiceGetCommunicationIDsArgs{}
}


func (p *FetchCommunicationServiceGetCommunicationIDsArgs) GetOffset() int64 {
  return p.Offset
}

func (p *FetchCommunicationServiceGetCommunicationIDsArgs) GetCount() int64 {
  return p.Count
}
func (p *FetchCommunicationServiceGetCommunicationIDsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *FetchCommunicationServiceGetCommunicationIDsArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Offset = v
}
  return nil
}

func (p *FetchCommunicationServiceGetCommunicationIDsArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Count = v
}
  return nil
}

func (p *FetchCommunicationServiceGetCommunicationIDsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getCommunicationIDs_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *FetchCommunicationServiceGetCommunicationIDsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("offset", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:offset: ", p), err) }
  if err := oprot.WriteI64(int64(p.Offset)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.offset (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:offset: ", p), err) }
  return err
}

func (p *FetchCommunicationServiceGetCommunicationIDsArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("count", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:count: ", p), err) }
  if err := oprot.WriteI64(int64(p.Count)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.count (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:count: ", p), err) }
  return err
}

func (p *FetchCommunicationServiceGetCommunicationIDsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("FetchCommunicationServiceGetCommunicationIDsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex
type FetchCommunicationServiceGetCommunicationIDsResult struct {
  Success []string `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ex *NotImplementedException `thrift:"ex,1" db:"ex" json:"ex,omitempty"`
}

func NewFetchCommunicationServiceGetCommunicationIDsResult() *FetchCommunicationServiceGetCommunicationIDsResult {
  return &FetchCommunicationServiceGetCommunicationIDsResult{}
}

var FetchCommunicationServiceGetCommunicationIDsResult_Success_DEFAULT []string

func (p *FetchCommunicationServiceGetCommunicationIDsResult) GetSuccess() []string {
  return p.Success
}
var FetchCommunicationServiceGetCommunicationIDsResult_Ex_DEFAULT *NotImplementedException
func (p *FetchCommunicationServiceGetCommunicationIDsResult) GetEx() *NotImplementedException {
  if !p.IsSetEx() {
    return FetchCommunicationServiceGetCommunicationIDsResult_Ex_DEFAULT
  }
return p.Ex
}
func (p *FetchCommunicationServiceGetCommunicationIDsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *FetchCommunicationServiceGetCommunicationIDsResult) IsSetEx() bool {
  return p.Ex != nil
}

func (p *FetchCommunicationServiceGetCommunicationIDsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *FetchCommunicationServiceGetCommunicationIDsResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
var _elem9 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem9 = v
}
    p.Success = append(p.Success, _elem9)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *FetchCommunicationServiceGetCommunicationIDsResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ex = &NotImplementedException{}
  if err := p.Ex.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
  }
  return nil
}

func (p *FetchCommunicationServiceGetCommunicationIDsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getCommunicationIDs_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *FetchCommunicationServiceGetCommunicationIDsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRING, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *FetchCommunicationServiceGetCommunicationIDsResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetEx() {
    if err := oprot.WriteFieldBegin("ex", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err) }
    if err := p.Ex.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err) }
  }
  return err
}

func (p *FetchCommunicationServiceGetCommunicationIDsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("FetchCommunicationServiceGetCommunicationIDsResult(%+v)", *p)
}

type FetchCommunicationServiceGetCommunicationCountArgs struct {
}

func NewFetchCommunicationServiceGetCommunicationCountArgs() *FetchCommunicationServiceGetCommunicationCountArgs {
  return &FetchCommunicationServiceGetCommunicationCountArgs{}
}

func (p *FetchCommunicationServiceGetCommunicationCountArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *FetchCommunicationServiceGetCommunicationCountArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getCommunicationCount_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *FetchCommunicationServiceGetCommunicationCountArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("FetchCommunicationServiceGetCommunicationCountArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex
type FetchCommunicationServiceGetCommunicationCountResult struct {
  Success *int64 `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ex *NotImplementedException `thrift:"ex,1" db:"ex" json:"ex,omitempty"`
}

func NewFetchCommunicationServiceGetCommunicationCountResult() *FetchCommunicationServiceGetCommunicationCountResult {
  return &FetchCommunicationServiceGetCommunicationCountResult{}
}

var FetchCommunicationServiceGetCommunicationCountResult_Success_DEFAULT int64
func (p *FetchCommunicationServiceGetCommunicationCountResult) GetSuccess() int64 {
  if !p.IsSetSuccess() {
    return FetchCommunicationServiceGetCommunicationCountResult_Success_DEFAULT
  }
return *p.Success
}
var FetchCommunicationServiceGetCommunicationCountResult_Ex_DEFAULT *NotImplementedException
func (p *FetchCommunicationServiceGetCommunicationCountResult) GetEx() *NotImplementedException {
  if !p.IsSetEx() {
    return FetchCommunicationServiceGetCommunicationCountResult_Ex_DEFAULT
  }
return p.Ex
}
func (p *FetchCommunicationServiceGetCommunicationCountResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *FetchCommunicationServiceGetCommunicationCountResult) IsSetEx() bool {
  return p.Ex != nil
}

func (p *FetchCommunicationServiceGetCommunicationCountResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *FetchCommunicationServiceGetCommunicationCountResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *FetchCommunicationServiceGetCommunicationCountResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ex = &NotImplementedException{}
  if err := p.Ex.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
  }
  return nil
}

func (p *FetchCommunicationServiceGetCommunicationCountResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getCommunicationCount_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *FetchCommunicationServiceGetCommunicationCountResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.I64, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI64(int64(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *FetchCommunicationServiceGetCommunicationCountResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetEx() {
    if err := oprot.WriteFieldBegin("ex", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err) }
    if err := p.Ex.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err) }
  }
  return err
}

func (p *FetchCommunicationServiceGetCommunicationCountResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("FetchCommunicationServiceGetCommunicationCountResult(%+v)", *p)
}


type StoreCommunicationService interface {
Service
  //A service that exists so that clients can store Concrete data
  //structures to implementing servers.
  //
  //Implement this if you are creating an analytic that wishes to
  //store its results back to a server. That server may perform
  //validation, write the new layers to a database, and so forth.

  // Store a communication to a server implementing this method.
  // 
  // The communication that is stored should contain the new
  // analytic layers you wish to append. You may also wish to call
  // methods that unset annotations you feel the receiver would not
  // find useful in order to reduce network overhead.
  // 
  // Parameters:
  //  - Communication
  Store(communication *Communication) (err error)
}

//A service that exists so that clients can store Concrete data
//structures to implementing servers.
//
//Implement this if you are creating an analytic that wishes to
//store its results back to a server. That server may perform
//validation, write the new layers to a database, and so forth.
type StoreCommunicationServiceClient struct {
  *ServiceClient
}

func NewStoreCommunicationServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *StoreCommunicationServiceClient {
  return &StoreCommunicationServiceClient{ServiceClient: NewServiceClientFactory(t, f)}}

func NewStoreCommunicationServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *StoreCommunicationServiceClient {
  return &StoreCommunicationServiceClient{ServiceClient: NewServiceClientProtocol(t, iprot, oprot)}
}

// Store a communication to a server implementing this method.
// 
// The communication that is stored should contain the new
// analytic layers you wish to append. You may also wish to call
// methods that unset annotations you feel the receiver would not
// find useful in order to reduce network overhead.
// 
// Parameters:
//  - Communication
func (p *StoreCommunicationServiceClient) Store(communication *Communication) (err error) {
  if err = p.sendStore(communication); err != nil { return }
  return p.recvStore()
}

func (p *StoreCommunicationServiceClient) sendStore(communication *Communication)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("store", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := StoreCommunicationServiceStoreArgs{
  Communication : communication,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *StoreCommunicationServiceClient) recvStore() (err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "store" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "store failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "store failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error18 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error19 error
    error19, err = error18.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error19
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "store failed: invalid message type")
    return
  }
  result := StoreCommunicationServiceStoreResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ex != nil {
    err = result.Ex
    return 
  }
  return
}


type StoreCommunicationServiceProcessor struct {
  *ServiceProcessor
}

func NewStoreCommunicationServiceProcessor(handler StoreCommunicationService) *StoreCommunicationServiceProcessor {
  self20 := &StoreCommunicationServiceProcessor{NewServiceProcessor(handler)}
  self20.AddToProcessorMap("store", &storeCommunicationServiceProcessorStore{handler:handler})
  return self20
}

type storeCommunicationServiceProcessorStore struct {
  handler StoreCommunicationService
}

func (p *storeCommunicationServiceProcessorStore) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := StoreCommunicationServiceStoreArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("store", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := StoreCommunicationServiceStoreResult{}
  var err2 error
  if err2 = p.handler.Store(args.Communication); err2 != nil {
  switch v := err2.(type) {
    case *ServicesException:
  result.Ex = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing store: " + err2.Error())
    oprot.WriteMessageBegin("store", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("store", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Communication
type StoreCommunicationServiceStoreArgs struct {
  Communication *Communication `thrift:"communication,1" db:"communication" json:"communication"`
}

func NewStoreCommunicationServiceStoreArgs() *StoreCommunicationServiceStoreArgs {
  return &StoreCommunicationServiceStoreArgs{}
}

var StoreCommunicationServiceStoreArgs_Communication_DEFAULT *Communication
func (p *StoreCommunicationServiceStoreArgs) GetCommunication() *Communication {
  if !p.IsSetCommunication() {
    return StoreCommunicationServiceStoreArgs_Communication_DEFAULT
  }
return p.Communication
}
func (p *StoreCommunicationServiceStoreArgs) IsSetCommunication() bool {
  return p.Communication != nil
}

func (p *StoreCommunicationServiceStoreArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *StoreCommunicationServiceStoreArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Communication = &Communication{}
  if err := p.Communication.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Communication), err)
  }
  return nil
}

func (p *StoreCommunicationServiceStoreArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("store_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *StoreCommunicationServiceStoreArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("communication", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:communication: ", p), err) }
  if err := p.Communication.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Communication), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:communication: ", p), err) }
  return err
}

func (p *StoreCommunicationServiceStoreArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("StoreCommunicationServiceStoreArgs(%+v)", *p)
}

// Attributes:
//  - Ex
type StoreCommunicationServiceStoreResult struct {
  Ex *ServicesException `thrift:"ex,1" db:"ex" json:"ex,omitempty"`
}

func NewStoreCommunicationServiceStoreResult() *StoreCommunicationServiceStoreResult {
  return &StoreCommunicationServiceStoreResult{}
}

var StoreCommunicationServiceStoreResult_Ex_DEFAULT *ServicesException
func (p *StoreCommunicationServiceStoreResult) GetEx() *ServicesException {
  if !p.IsSetEx() {
    return StoreCommunicationServiceStoreResult_Ex_DEFAULT
  }
return p.Ex
}
func (p *StoreCommunicationServiceStoreResult) IsSetEx() bool {
  return p.Ex != nil
}

func (p *StoreCommunicationServiceStoreResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *StoreCommunicationServiceStoreResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ex = &ServicesException{}
  if err := p.Ex.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
  }
  return nil
}

func (p *StoreCommunicationServiceStoreResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("store_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *StoreCommunicationServiceStoreResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetEx() {
    if err := oprot.WriteFieldBegin("ex", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err) }
    if err := p.Ex.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err) }
  }
  return err
}

func (p *StoreCommunicationServiceStoreResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("StoreCommunicationServiceStoreResult(%+v)", *p)
}


