// Autogenerated by Thrift Compiler (0.10.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package goncrete

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"

)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

// A single referent (or "entity") that is referred to at least once
// in a given communication, along with pointers to all of the
// references to that referent. The referent's type (e.g., is it a
// person, or a location, or an organization, etc) is also recorded.
// 
// Because each Entity contains pointers to all references to a
// referent with a given communication, an Entity can be
// thought of as a coreference set.
// 
// Attributes:
//  - UUID: Unique identifier for this entity.
//  - ID: A corpus-specific and stable id such as a Freebase mid
// or a DBpedia id.
//  - MentionIdList: An list of pointers to all of the mentions of this Entity's
// referent.  (type=EntityMention)
//  - RawMentionList: An list of pointers to all of the sentences which contain a
// mention of this Entity.
//  - Type: The basic type of this entity's referent.
//  - Confidence: Confidence score for this individual entity.  You can also set a
// confidence score for an entire EntitySet using the EntitySet's
// metadata.
//  - CanonicalName: A string containing a representative, canonical, or "best" name
// for this entity's referent.  This string may match one of the
// mentions' text strings, but it is not required to.
type Entity struct {
  UUID *UUID `thrift:"uuid,1,required" db:"uuid" json:"uuid"`
  MentionIdList []*UUID `thrift:"mentionIdList,2,required" db:"mentionIdList" json:"mentionIdList"`
  Type *string `thrift:"type,3" db:"type" json:"type,omitempty"`
  Confidence *float64 `thrift:"confidence,4" db:"confidence" json:"confidence,omitempty"`
  CanonicalName *string `thrift:"canonicalName,5" db:"canonicalName" json:"canonicalName,omitempty"`
  ID *string `thrift:"id,6" db:"id" json:"id,omitempty"`
  RawMentionList []*TokenRefSequence `thrift:"rawMentionList,7" db:"rawMentionList" json:"rawMentionList,omitempty"`
}

func NewEntity() *Entity {
  return &Entity{}
}

var Entity_UUID_DEFAULT *UUID
func (p *Entity) GetUUID() *UUID {
  if !p.IsSetUUID() {
    return Entity_UUID_DEFAULT
  }
return p.UUID
}
var Entity_ID_DEFAULT string
func (p *Entity) GetID() string {
  if !p.IsSetID() {
    return Entity_ID_DEFAULT
  }
return *p.ID
}

func (p *Entity) GetMentionIdList() []*UUID {
  return p.MentionIdList
}
var Entity_RawMentionList_DEFAULT []*TokenRefSequence

func (p *Entity) GetRawMentionList() []*TokenRefSequence {
  return p.RawMentionList
}
var Entity_Type_DEFAULT string
func (p *Entity) GetType() string {
  if !p.IsSetType() {
    return Entity_Type_DEFAULT
  }
return *p.Type
}
var Entity_Confidence_DEFAULT float64
func (p *Entity) GetConfidence() float64 {
  if !p.IsSetConfidence() {
    return Entity_Confidence_DEFAULT
  }
return *p.Confidence
}
var Entity_CanonicalName_DEFAULT string
func (p *Entity) GetCanonicalName() string {
  if !p.IsSetCanonicalName() {
    return Entity_CanonicalName_DEFAULT
  }
return *p.CanonicalName
}
func (p *Entity) IsSetUUID() bool {
  return p.UUID != nil
}

func (p *Entity) IsSetID() bool {
  return p.ID != nil
}

func (p *Entity) IsSetRawMentionList() bool {
  return p.RawMentionList != nil
}

func (p *Entity) IsSetType() bool {
  return p.Type != nil
}

func (p *Entity) IsSetConfidence() bool {
  return p.Confidence != nil
}

func (p *Entity) IsSetCanonicalName() bool {
  return p.CanonicalName != nil
}

func (p *Entity) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetUUID bool = false;
  var issetMentionIdList bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetUUID = true
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
      issetMentionIdList = true
    case 7:
      if err := p.ReadField7(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetUUID{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field UUID is not set"));
  }
  if !issetMentionIdList{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field MentionIdList is not set"));
  }
  return nil
}

func (p *Entity)  ReadField1(iprot thrift.TProtocol) error {
  p.UUID = &UUID{}
  if err := p.UUID.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UUID), err)
  }
  return nil
}

func (p *Entity)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.ID = &v
}
  return nil
}

func (p *Entity)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*UUID, 0, size)
  p.MentionIdList =  tSlice
  for i := 0; i < size; i ++ {
    _elem0 := &UUID{}
    if err := _elem0.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem0), err)
    }
    p.MentionIdList = append(p.MentionIdList, _elem0)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *Entity)  ReadField7(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TokenRefSequence, 0, size)
  p.RawMentionList =  tSlice
  for i := 0; i < size; i ++ {
    _elem1 := &TokenRefSequence{
    AnchorTokenIndex: -1,
}
    if err := _elem1.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem1), err)
    }
    p.RawMentionList = append(p.RawMentionList, _elem1)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *Entity)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Type = &v
}
  return nil
}

func (p *Entity)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Confidence = &v
}
  return nil
}

func (p *Entity)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.CanonicalName = &v
}
  return nil
}

func (p *Entity) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Entity"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Entity) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("uuid", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:uuid: ", p), err) }
  if err := p.UUID.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UUID), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:uuid: ", p), err) }
  return err
}

func (p *Entity) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("mentionIdList", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:mentionIdList: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.MentionIdList)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.MentionIdList {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:mentionIdList: ", p), err) }
  return err
}

func (p *Entity) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetType() {
    if err := oprot.WriteFieldBegin("type", thrift.STRING, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:type: ", p), err) }
    if err := oprot.WriteString(string(*p.Type)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.type (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:type: ", p), err) }
  }
  return err
}

func (p *Entity) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetConfidence() {
    if err := oprot.WriteFieldBegin("confidence", thrift.DOUBLE, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:confidence: ", p), err) }
    if err := oprot.WriteDouble(float64(*p.Confidence)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.confidence (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:confidence: ", p), err) }
  }
  return err
}

func (p *Entity) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetCanonicalName() {
    if err := oprot.WriteFieldBegin("canonicalName", thrift.STRING, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:canonicalName: ", p), err) }
    if err := oprot.WriteString(string(*p.CanonicalName)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.canonicalName (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:canonicalName: ", p), err) }
  }
  return err
}

func (p *Entity) writeField6(oprot thrift.TProtocol) (err error) {
  if p.IsSetID() {
    if err := oprot.WriteFieldBegin("id", thrift.STRING, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:id: ", p), err) }
    if err := oprot.WriteString(string(*p.ID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.id (6) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:id: ", p), err) }
  }
  return err
}

func (p *Entity) writeField7(oprot thrift.TProtocol) (err error) {
  if p.IsSetRawMentionList() {
    if err := oprot.WriteFieldBegin("rawMentionList", thrift.LIST, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:rawMentionList: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.RawMentionList)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.RawMentionList {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:rawMentionList: ", p), err) }
  }
  return err
}

func (p *Entity) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Entity(%+v)", *p)
}

// A theory about the set of entities that are present in a
// message. See also: Entity.
// 
// Attributes:
//  - UUID: Unique identifier for this set.
//  - Metadata: Information about where this set came from.
//  - EntityList: List of entities in this set.
//  - LinkingList: Entity linking annotations associated with this EntitySet.
//  - MentionSetId: An optional UUID pointer to an EntityMentionSet.
// 
// If this field is present, consumers can assume that all
// Entity objects in this EntitySet have EntityMentions that are included
// in the named EntityMentionSet.
type EntitySet struct {
  UUID *UUID `thrift:"uuid,1,required" db:"uuid" json:"uuid"`
  Metadata *AnnotationMetadata `thrift:"metadata,2,required" db:"metadata" json:"metadata"`
  EntityList []*Entity `thrift:"entityList,3,required" db:"entityList" json:"entityList"`
  LinkingList []*Linking `thrift:"linkingList,4" db:"linkingList" json:"linkingList,omitempty"`
  MentionSetId *UUID `thrift:"mentionSetId,5" db:"mentionSetId" json:"mentionSetId,omitempty"`
}

func NewEntitySet() *EntitySet {
  return &EntitySet{}
}

var EntitySet_UUID_DEFAULT *UUID
func (p *EntitySet) GetUUID() *UUID {
  if !p.IsSetUUID() {
    return EntitySet_UUID_DEFAULT
  }
return p.UUID
}
var EntitySet_Metadata_DEFAULT *AnnotationMetadata
func (p *EntitySet) GetMetadata() *AnnotationMetadata {
  if !p.IsSetMetadata() {
    return EntitySet_Metadata_DEFAULT
  }
return p.Metadata
}

func (p *EntitySet) GetEntityList() []*Entity {
  return p.EntityList
}
var EntitySet_LinkingList_DEFAULT []*Linking

func (p *EntitySet) GetLinkingList() []*Linking {
  return p.LinkingList
}
var EntitySet_MentionSetId_DEFAULT *UUID
func (p *EntitySet) GetMentionSetId() *UUID {
  if !p.IsSetMentionSetId() {
    return EntitySet_MentionSetId_DEFAULT
  }
return p.MentionSetId
}
func (p *EntitySet) IsSetUUID() bool {
  return p.UUID != nil
}

func (p *EntitySet) IsSetMetadata() bool {
  return p.Metadata != nil
}

func (p *EntitySet) IsSetLinkingList() bool {
  return p.LinkingList != nil
}

func (p *EntitySet) IsSetMentionSetId() bool {
  return p.MentionSetId != nil
}

func (p *EntitySet) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetUUID bool = false;
  var issetMetadata bool = false;
  var issetEntityList bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetUUID = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
      issetMetadata = true
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
      issetEntityList = true
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetUUID{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field UUID is not set"));
  }
  if !issetMetadata{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Metadata is not set"));
  }
  if !issetEntityList{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field EntityList is not set"));
  }
  return nil
}

func (p *EntitySet)  ReadField1(iprot thrift.TProtocol) error {
  p.UUID = &UUID{}
  if err := p.UUID.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UUID), err)
  }
  return nil
}

func (p *EntitySet)  ReadField2(iprot thrift.TProtocol) error {
  p.Metadata = &AnnotationMetadata{
  KBest: 1,
}
  if err := p.Metadata.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Metadata), err)
  }
  return nil
}

func (p *EntitySet)  ReadField3(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Entity, 0, size)
  p.EntityList =  tSlice
  for i := 0; i < size; i ++ {
    _elem2 := &Entity{}
    if err := _elem2.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem2), err)
    }
    p.EntityList = append(p.EntityList, _elem2)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *EntitySet)  ReadField4(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Linking, 0, size)
  p.LinkingList =  tSlice
  for i := 0; i < size; i ++ {
    _elem3 := &Linking{}
    if err := _elem3.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem3), err)
    }
    p.LinkingList = append(p.LinkingList, _elem3)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *EntitySet)  ReadField5(iprot thrift.TProtocol) error {
  p.MentionSetId = &UUID{}
  if err := p.MentionSetId.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.MentionSetId), err)
  }
  return nil
}

func (p *EntitySet) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("EntitySet"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *EntitySet) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("uuid", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:uuid: ", p), err) }
  if err := p.UUID.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UUID), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:uuid: ", p), err) }
  return err
}

func (p *EntitySet) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("metadata", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:metadata: ", p), err) }
  if err := p.Metadata.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Metadata), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:metadata: ", p), err) }
  return err
}

func (p *EntitySet) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("entityList", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:entityList: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.EntityList)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.EntityList {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:entityList: ", p), err) }
  return err
}

func (p *EntitySet) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetLinkingList() {
    if err := oprot.WriteFieldBegin("linkingList", thrift.LIST, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:linkingList: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.LinkingList)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.LinkingList {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:linkingList: ", p), err) }
  }
  return err
}

func (p *EntitySet) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetMentionSetId() {
    if err := oprot.WriteFieldBegin("mentionSetId", thrift.STRUCT, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:mentionSetId: ", p), err) }
    if err := p.MentionSetId.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.MentionSetId), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:mentionSetId: ", p), err) }
  }
  return err
}

func (p *EntitySet) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("EntitySet(%+v)", *p)
}

// A span of text with a specific referent, such as a person,
// organization, or time. Things that can be referred to by a mention
// are called "entities."
// 
// It is left up to individual EntityMention taggers to decide which
// referent types and phrase types to identify. For example, some
// EntityMention taggers may only identify proper nouns, or may only
// identify EntityMentions that refer to people.
// 
// Each EntityMention consists of a sequence of tokens. This sequence
// is usually annotated with information about the referent type
// (e.g., is it a person, or a location, or an organization, etc) as
// well as the phrase type (is it a name, pronoun, common noun, etc.).
// 
// EntityMentions typically consist of a single noun phrase; however,
// other phrase types may also be marked as mentions. For
// example, in the phrase "French hotel," the adjective "French" might
// be marked as a mention for France.
// 
// Attributes:
//  - UUID
//  - Tokens: Pointer to sequence of tokens.
// 
// Special note: In the case of PRO-drop, where there is no explicit
// mention, but an EntityMention is needed for downstream Entity
// analysis, this field should be set to a TokenRefSequence with an
// empty tokenIndexList and the anchorTokenIndex set to the head/only
// token of the verb/predicate from which the PRO was dropped.
//  - EntityType: The type of referent that is referred to by this mention.
//  - PhraseType: The phrase type of the tokens that constitute this mention.
//  - Confidence: A confidence score for this individual mention.  You can also
// set a confidence score for an entire EntityMentionSet using the
// EntityMentionSet's metadata.
//  - Text: The text content of this entity mention.  This field is
// typically redundant with the string formed by cross-referencing
// the 'tokens.tokenIndexList' field with this mention's
// tokenization. This field may not be generated by all analytics.
//  - ChildMentionIdList: A list of pointers to the "child" EntityMentions of this
// EntityMention.
type EntityMention struct {
  UUID *UUID `thrift:"uuid,1,required" db:"uuid" json:"uuid"`
  Tokens *TokenRefSequence `thrift:"tokens,2,required" db:"tokens" json:"tokens"`
  EntityType *string `thrift:"entityType,3" db:"entityType" json:"entityType,omitempty"`
  PhraseType *string `thrift:"phraseType,4" db:"phraseType" json:"phraseType,omitempty"`
  Confidence *float64 `thrift:"confidence,5" db:"confidence" json:"confidence,omitempty"`
  Text *string `thrift:"text,6" db:"text" json:"text,omitempty"`
  ChildMentionIdList []*UUID `thrift:"childMentionIdList,7" db:"childMentionIdList" json:"childMentionIdList,omitempty"`
}

func NewEntityMention() *EntityMention {
  return &EntityMention{}
}

var EntityMention_UUID_DEFAULT *UUID
func (p *EntityMention) GetUUID() *UUID {
  if !p.IsSetUUID() {
    return EntityMention_UUID_DEFAULT
  }
return p.UUID
}
var EntityMention_Tokens_DEFAULT *TokenRefSequence
func (p *EntityMention) GetTokens() *TokenRefSequence {
  if !p.IsSetTokens() {
    return EntityMention_Tokens_DEFAULT
  }
return p.Tokens
}
var EntityMention_EntityType_DEFAULT string
func (p *EntityMention) GetEntityType() string {
  if !p.IsSetEntityType() {
    return EntityMention_EntityType_DEFAULT
  }
return *p.EntityType
}
var EntityMention_PhraseType_DEFAULT string
func (p *EntityMention) GetPhraseType() string {
  if !p.IsSetPhraseType() {
    return EntityMention_PhraseType_DEFAULT
  }
return *p.PhraseType
}
var EntityMention_Confidence_DEFAULT float64
func (p *EntityMention) GetConfidence() float64 {
  if !p.IsSetConfidence() {
    return EntityMention_Confidence_DEFAULT
  }
return *p.Confidence
}
var EntityMention_Text_DEFAULT string
func (p *EntityMention) GetText() string {
  if !p.IsSetText() {
    return EntityMention_Text_DEFAULT
  }
return *p.Text
}
var EntityMention_ChildMentionIdList_DEFAULT []*UUID

func (p *EntityMention) GetChildMentionIdList() []*UUID {
  return p.ChildMentionIdList
}
func (p *EntityMention) IsSetUUID() bool {
  return p.UUID != nil
}

func (p *EntityMention) IsSetTokens() bool {
  return p.Tokens != nil
}

func (p *EntityMention) IsSetEntityType() bool {
  return p.EntityType != nil
}

func (p *EntityMention) IsSetPhraseType() bool {
  return p.PhraseType != nil
}

func (p *EntityMention) IsSetConfidence() bool {
  return p.Confidence != nil
}

func (p *EntityMention) IsSetText() bool {
  return p.Text != nil
}

func (p *EntityMention) IsSetChildMentionIdList() bool {
  return p.ChildMentionIdList != nil
}

func (p *EntityMention) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetUUID bool = false;
  var issetTokens bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetUUID = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
      issetTokens = true
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    case 7:
      if err := p.ReadField7(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetUUID{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field UUID is not set"));
  }
  if !issetTokens{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Tokens is not set"));
  }
  return nil
}

func (p *EntityMention)  ReadField1(iprot thrift.TProtocol) error {
  p.UUID = &UUID{}
  if err := p.UUID.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UUID), err)
  }
  return nil
}

func (p *EntityMention)  ReadField2(iprot thrift.TProtocol) error {
  p.Tokens = &TokenRefSequence{
  AnchorTokenIndex: -1,
}
  if err := p.Tokens.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Tokens), err)
  }
  return nil
}

func (p *EntityMention)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.EntityType = &v
}
  return nil
}

func (p *EntityMention)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.PhraseType = &v
}
  return nil
}

func (p *EntityMention)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Confidence = &v
}
  return nil
}

func (p *EntityMention)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.Text = &v
}
  return nil
}

func (p *EntityMention)  ReadField7(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*UUID, 0, size)
  p.ChildMentionIdList =  tSlice
  for i := 0; i < size; i ++ {
    _elem4 := &UUID{}
    if err := _elem4.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem4), err)
    }
    p.ChildMentionIdList = append(p.ChildMentionIdList, _elem4)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *EntityMention) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("EntityMention"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *EntityMention) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("uuid", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:uuid: ", p), err) }
  if err := p.UUID.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UUID), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:uuid: ", p), err) }
  return err
}

func (p *EntityMention) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("tokens", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tokens: ", p), err) }
  if err := p.Tokens.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Tokens), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tokens: ", p), err) }
  return err
}

func (p *EntityMention) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetEntityType() {
    if err := oprot.WriteFieldBegin("entityType", thrift.STRING, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:entityType: ", p), err) }
    if err := oprot.WriteString(string(*p.EntityType)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.entityType (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:entityType: ", p), err) }
  }
  return err
}

func (p *EntityMention) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetPhraseType() {
    if err := oprot.WriteFieldBegin("phraseType", thrift.STRING, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:phraseType: ", p), err) }
    if err := oprot.WriteString(string(*p.PhraseType)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.phraseType (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:phraseType: ", p), err) }
  }
  return err
}

func (p *EntityMention) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetConfidence() {
    if err := oprot.WriteFieldBegin("confidence", thrift.DOUBLE, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:confidence: ", p), err) }
    if err := oprot.WriteDouble(float64(*p.Confidence)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.confidence (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:confidence: ", p), err) }
  }
  return err
}

func (p *EntityMention) writeField6(oprot thrift.TProtocol) (err error) {
  if p.IsSetText() {
    if err := oprot.WriteFieldBegin("text", thrift.STRING, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:text: ", p), err) }
    if err := oprot.WriteString(string(*p.Text)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.text (6) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:text: ", p), err) }
  }
  return err
}

func (p *EntityMention) writeField7(oprot thrift.TProtocol) (err error) {
  if p.IsSetChildMentionIdList() {
    if err := oprot.WriteFieldBegin("childMentionIdList", thrift.LIST, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:childMentionIdList: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ChildMentionIdList)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.ChildMentionIdList {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:childMentionIdList: ", p), err) }
  }
  return err
}

func (p *EntityMention) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("EntityMention(%+v)", *p)
}

// A theory about the set of entity mentions that are present in a
// message. See also: EntityMention
// 
// This type does not represent a coreference relationship, which is handled by Entity.
// This type is meant to represent the output of a entity-mention-identifier,
// which is often a part of an in-doc coreference system.
// 
// Attributes:
//  - UUID: Unique identifier for this set.
//  - Metadata: Information about where this set came from.
//  - MentionList: List of mentions in this set.
//  - LinkingList: Entity linking annotations associated with this EntityMentionSet.
type EntityMentionSet struct {
  UUID *UUID `thrift:"uuid,1,required" db:"uuid" json:"uuid"`
  Metadata *AnnotationMetadata `thrift:"metadata,2,required" db:"metadata" json:"metadata"`
  MentionList []*EntityMention `thrift:"mentionList,3,required" db:"mentionList" json:"mentionList"`
  LinkingList []*Linking `thrift:"linkingList,4" db:"linkingList" json:"linkingList,omitempty"`
}

func NewEntityMentionSet() *EntityMentionSet {
  return &EntityMentionSet{}
}

var EntityMentionSet_UUID_DEFAULT *UUID
func (p *EntityMentionSet) GetUUID() *UUID {
  if !p.IsSetUUID() {
    return EntityMentionSet_UUID_DEFAULT
  }
return p.UUID
}
var EntityMentionSet_Metadata_DEFAULT *AnnotationMetadata
func (p *EntityMentionSet) GetMetadata() *AnnotationMetadata {
  if !p.IsSetMetadata() {
    return EntityMentionSet_Metadata_DEFAULT
  }
return p.Metadata
}

func (p *EntityMentionSet) GetMentionList() []*EntityMention {
  return p.MentionList
}
var EntityMentionSet_LinkingList_DEFAULT []*Linking

func (p *EntityMentionSet) GetLinkingList() []*Linking {
  return p.LinkingList
}
func (p *EntityMentionSet) IsSetUUID() bool {
  return p.UUID != nil
}

func (p *EntityMentionSet) IsSetMetadata() bool {
  return p.Metadata != nil
}

func (p *EntityMentionSet) IsSetLinkingList() bool {
  return p.LinkingList != nil
}

func (p *EntityMentionSet) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetUUID bool = false;
  var issetMetadata bool = false;
  var issetMentionList bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetUUID = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
      issetMetadata = true
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
      issetMentionList = true
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetUUID{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field UUID is not set"));
  }
  if !issetMetadata{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Metadata is not set"));
  }
  if !issetMentionList{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field MentionList is not set"));
  }
  return nil
}

func (p *EntityMentionSet)  ReadField1(iprot thrift.TProtocol) error {
  p.UUID = &UUID{}
  if err := p.UUID.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UUID), err)
  }
  return nil
}

func (p *EntityMentionSet)  ReadField2(iprot thrift.TProtocol) error {
  p.Metadata = &AnnotationMetadata{
  KBest: 1,
}
  if err := p.Metadata.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Metadata), err)
  }
  return nil
}

func (p *EntityMentionSet)  ReadField3(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*EntityMention, 0, size)
  p.MentionList =  tSlice
  for i := 0; i < size; i ++ {
    _elem5 := &EntityMention{}
    if err := _elem5.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem5), err)
    }
    p.MentionList = append(p.MentionList, _elem5)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *EntityMentionSet)  ReadField4(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Linking, 0, size)
  p.LinkingList =  tSlice
  for i := 0; i < size; i ++ {
    _elem6 := &Linking{}
    if err := _elem6.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem6), err)
    }
    p.LinkingList = append(p.LinkingList, _elem6)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *EntityMentionSet) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("EntityMentionSet"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *EntityMentionSet) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("uuid", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:uuid: ", p), err) }
  if err := p.UUID.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UUID), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:uuid: ", p), err) }
  return err
}

func (p *EntityMentionSet) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("metadata", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:metadata: ", p), err) }
  if err := p.Metadata.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Metadata), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:metadata: ", p), err) }
  return err
}

func (p *EntityMentionSet) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("mentionList", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:mentionList: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.MentionList)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.MentionList {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:mentionList: ", p), err) }
  return err
}

func (p *EntityMentionSet) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetLinkingList() {
    if err := oprot.WriteFieldBegin("linkingList", thrift.LIST, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:linkingList: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.LinkingList)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.LinkingList {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:linkingList: ", p), err) }
  }
  return err
}

func (p *EntityMentionSet) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("EntityMentionSet(%+v)", *p)
}

