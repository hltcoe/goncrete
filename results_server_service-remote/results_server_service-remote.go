// Autogenerated by Thrift Compiler (0.10.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package main

import (
        "flag"
        "fmt"
        "math"
        "net"
        "net/url"
        "os"
        "strconv"
        "strings"
        "git.apache.org/thrift.git/lib/go/thrift"
        "goncrete"
)


func Usage() {
  fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
  flag.PrintDefaults()
  fmt.Fprintln(os.Stderr, "\nFunctions:")
  fmt.Fprintln(os.Stderr, "  void registerSearchResult(SearchResult result, AnnotationTaskType taskType)")
  fmt.Fprintln(os.Stderr, "   getSearchResults(AnnotationTaskType taskType, i32 limit)")
  fmt.Fprintln(os.Stderr, "   getSearchResultsByUser(AnnotationTaskType taskType, string userId, i32 limit)")
  fmt.Fprintln(os.Stderr, "  SearchResult getLatestSearchResult(string userId)")
  fmt.Fprintln(os.Stderr, "  SearchResult getSearchResult(UUID searchResultId)")
  fmt.Fprintln(os.Stderr, "  UUID startSession(UUID searchResultId, AnnotationTaskType taskType)")
  fmt.Fprintln(os.Stderr, "  void stopSession(UUID sessionId)")
  fmt.Fprintln(os.Stderr, "   getNextChunk(UUID sessionId)")
  fmt.Fprintln(os.Stderr, "  void submitAnnotation(UUID sessionId, AnnotationUnitIdentifier unitId, Communication communication)")
  fmt.Fprintln(os.Stderr, "  ServiceInfo about()")
  fmt.Fprintln(os.Stderr, "  bool alive()")
  fmt.Fprintln(os.Stderr)
  os.Exit(0)
}

func main() {
  flag.Usage = Usage
  var host string
  var port int
  var protocol string
  var urlString string
  var framed bool
  var useHttp bool
  var parsedUrl url.URL
  var trans thrift.TTransport
  _ = strconv.Atoi
  _ = math.Abs
  flag.Usage = Usage
  flag.StringVar(&host, "h", "localhost", "Specify host and port")
  flag.IntVar(&port, "p", 9090, "Specify port")
  flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
  flag.StringVar(&urlString, "u", "", "Specify the url")
  flag.BoolVar(&framed, "framed", false, "Use framed transport")
  flag.BoolVar(&useHttp, "http", false, "Use http")
  flag.Parse()
  
  if len(urlString) > 0 {
    parsedUrl, err := url.Parse(urlString)
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
    host = parsedUrl.Host
    useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http"
  } else if useHttp {
    _, err := url.Parse(fmt.Sprint("http://", host, ":", port))
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
  }
  
  cmd := flag.Arg(0)
  var err error
  if useHttp {
    trans, err = thrift.NewTHttpClient(parsedUrl.String())
  } else {
    portStr := fmt.Sprint(port)
    if strings.Contains(host, ":") {
           host, portStr, err = net.SplitHostPort(host)
           if err != nil {
                   fmt.Fprintln(os.Stderr, "error with host:", err)
                   os.Exit(1)
           }
    }
    trans, err = thrift.NewTSocket(net.JoinHostPort(host, portStr))
    if err != nil {
      fmt.Fprintln(os.Stderr, "error resolving address:", err)
      os.Exit(1)
    }
    if framed {
      trans = thrift.NewTFramedTransport(trans)
    }
  }
  if err != nil {
    fmt.Fprintln(os.Stderr, "Error creating transport", err)
    os.Exit(1)
  }
  defer trans.Close()
  var protocolFactory thrift.TProtocolFactory
  switch protocol {
  case "compact":
    protocolFactory = thrift.NewTCompactProtocolFactory()
    break
  case "simplejson":
    protocolFactory = thrift.NewTSimpleJSONProtocolFactory()
    break
  case "json":
    protocolFactory = thrift.NewTJSONProtocolFactory()
    break
  case "binary", "":
    protocolFactory = thrift.NewTBinaryProtocolFactoryDefault()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
    Usage()
    os.Exit(1)
  }
  client := goncrete.NewResultsServerServiceClientFactory(trans, protocolFactory)
  if err := trans.Open(); err != nil {
    fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
    os.Exit(1)
  }
  
  switch cmd {
  case "registerSearchResult":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "RegisterSearchResult_ requires 2 args")
      flag.Usage()
    }
    arg22 := flag.Arg(1)
    mbTrans23 := thrift.NewTMemoryBufferLen(len(arg22))
    defer mbTrans23.Close()
    _, err24 := mbTrans23.WriteString(arg22)
    if err24 != nil {
      Usage()
      return
    }
    factory25 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt26 := factory25.GetProtocol(mbTrans23)
    argvalue0 := goncrete.NewSearchResult_()
    err27 := argvalue0.Read(jsProt26)
    if err27 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err := (strconv.Atoi(flag.Arg(2)))
    if err != nil {
      Usage()
     return
    }
    argvalue1 := goncrete.AnnotationTaskType(tmp1)
    value1 := argvalue1
    fmt.Print(client.RegisterSearchResult_(value0, value1))
    fmt.Print("\n")
    break
  case "getSearchResults":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetSearchResults requires 2 args")
      flag.Usage()
    }
    tmp0, err := (strconv.Atoi(flag.Arg(1)))
    if err != nil {
      Usage()
     return
    }
    argvalue0 := goncrete.AnnotationTaskType(tmp0)
    value0 := argvalue0
    tmp1, err28 := (strconv.Atoi(flag.Arg(2)))
    if err28 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetSearchResults(value0, value1))
    fmt.Print("\n")
    break
  case "getSearchResultsByUser":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetSearchResultsByUser requires 3 args")
      flag.Usage()
    }
    tmp0, err := (strconv.Atoi(flag.Arg(1)))
    if err != nil {
      Usage()
     return
    }
    argvalue0 := goncrete.AnnotationTaskType(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    tmp2, err30 := (strconv.Atoi(flag.Arg(3)))
    if err30 != nil {
      Usage()
      return
    }
    argvalue2 := int32(tmp2)
    value2 := argvalue2
    fmt.Print(client.GetSearchResultsByUser(value0, value1, value2))
    fmt.Print("\n")
    break
  case "getLatestSearchResult":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetLatestSearchResult_ requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetLatestSearchResult_(value0))
    fmt.Print("\n")
    break
  case "getSearchResult":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetSearchResult_ requires 1 args")
      flag.Usage()
    }
    arg32 := flag.Arg(1)
    mbTrans33 := thrift.NewTMemoryBufferLen(len(arg32))
    defer mbTrans33.Close()
    _, err34 := mbTrans33.WriteString(arg32)
    if err34 != nil {
      Usage()
      return
    }
    factory35 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt36 := factory35.GetProtocol(mbTrans33)
    argvalue0 := goncrete.NewUUID()
    err37 := argvalue0.Read(jsProt36)
    if err37 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetSearchResult_(value0))
    fmt.Print("\n")
    break
  case "startSession":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "StartSession requires 2 args")
      flag.Usage()
    }
    arg38 := flag.Arg(1)
    mbTrans39 := thrift.NewTMemoryBufferLen(len(arg38))
    defer mbTrans39.Close()
    _, err40 := mbTrans39.WriteString(arg38)
    if err40 != nil {
      Usage()
      return
    }
    factory41 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt42 := factory41.GetProtocol(mbTrans39)
    argvalue0 := goncrete.NewUUID()
    err43 := argvalue0.Read(jsProt42)
    if err43 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err := (strconv.Atoi(flag.Arg(2)))
    if err != nil {
      Usage()
     return
    }
    argvalue1 := goncrete.AnnotationTaskType(tmp1)
    value1 := argvalue1
    fmt.Print(client.StartSession(value0, value1))
    fmt.Print("\n")
    break
  case "stopSession":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "StopSession requires 1 args")
      flag.Usage()
    }
    arg44 := flag.Arg(1)
    mbTrans45 := thrift.NewTMemoryBufferLen(len(arg44))
    defer mbTrans45.Close()
    _, err46 := mbTrans45.WriteString(arg44)
    if err46 != nil {
      Usage()
      return
    }
    factory47 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt48 := factory47.GetProtocol(mbTrans45)
    argvalue0 := goncrete.NewUUID()
    err49 := argvalue0.Read(jsProt48)
    if err49 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.StopSession(value0))
    fmt.Print("\n")
    break
  case "getNextChunk":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetNextChunk requires 1 args")
      flag.Usage()
    }
    arg50 := flag.Arg(1)
    mbTrans51 := thrift.NewTMemoryBufferLen(len(arg50))
    defer mbTrans51.Close()
    _, err52 := mbTrans51.WriteString(arg50)
    if err52 != nil {
      Usage()
      return
    }
    factory53 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt54 := factory53.GetProtocol(mbTrans51)
    argvalue0 := goncrete.NewUUID()
    err55 := argvalue0.Read(jsProt54)
    if err55 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetNextChunk(value0))
    fmt.Print("\n")
    break
  case "submitAnnotation":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "SubmitAnnotation requires 3 args")
      flag.Usage()
    }
    arg56 := flag.Arg(1)
    mbTrans57 := thrift.NewTMemoryBufferLen(len(arg56))
    defer mbTrans57.Close()
    _, err58 := mbTrans57.WriteString(arg56)
    if err58 != nil {
      Usage()
      return
    }
    factory59 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt60 := factory59.GetProtocol(mbTrans57)
    argvalue0 := goncrete.NewUUID()
    err61 := argvalue0.Read(jsProt60)
    if err61 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg62 := flag.Arg(2)
    mbTrans63 := thrift.NewTMemoryBufferLen(len(arg62))
    defer mbTrans63.Close()
    _, err64 := mbTrans63.WriteString(arg62)
    if err64 != nil {
      Usage()
      return
    }
    factory65 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt66 := factory65.GetProtocol(mbTrans63)
    argvalue1 := goncrete.NewAnnotationUnitIdentifier()
    err67 := argvalue1.Read(jsProt66)
    if err67 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg68 := flag.Arg(3)
    mbTrans69 := thrift.NewTMemoryBufferLen(len(arg68))
    defer mbTrans69.Close()
    _, err70 := mbTrans69.WriteString(arg68)
    if err70 != nil {
      Usage()
      return
    }
    factory71 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt72 := factory71.GetProtocol(mbTrans69)
    argvalue2 := goncrete.NewCommunication()
    err73 := argvalue2.Read(jsProt72)
    if err73 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.SubmitAnnotation(value0, value1, value2))
    fmt.Print("\n")
    break
  case "about":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "About requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.About())
    fmt.Print("\n")
    break
  case "alive":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "Alive requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.Alive())
    fmt.Print("\n")
    break
  case "":
    Usage()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
  }
}
