// Autogenerated by Thrift Compiler (0.10.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package goncrete

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

// Information about a Twitter user.
// 
// Attributes:
//  - ID
//  - Name
//  - ScreenName
//  - Lang
//  - GeoEnabled
//  - CreatedAt
//  - FriendsCount
//  - StatusesCount
//  - Verified
//  - ListedCount
//  - FavouritesCount
//  - FollowersCount
//  - Location
//  - TimeZone
//  - Description
//  - UtcOffset
//  - URL
type TwitterUser struct {
  ID *int64 `thrift:"id,1" db:"id" json:"id,omitempty"`
  // unused field # 2
  Name *string `thrift:"name,3" db:"name" json:"name,omitempty"`
  ScreenName *string `thrift:"screenName,4" db:"screenName" json:"screenName,omitempty"`
  Lang *string `thrift:"lang,5" db:"lang" json:"lang,omitempty"`
  GeoEnabled *bool `thrift:"geoEnabled,6" db:"geoEnabled" json:"geoEnabled,omitempty"`
  CreatedAt *string `thrift:"createdAt,7" db:"createdAt" json:"createdAt,omitempty"`
  FriendsCount *int32 `thrift:"friendsCount,8" db:"friendsCount" json:"friendsCount,omitempty"`
  StatusesCount *int32 `thrift:"statusesCount,9" db:"statusesCount" json:"statusesCount,omitempty"`
  Verified *bool `thrift:"verified,10" db:"verified" json:"verified,omitempty"`
  ListedCount *int32 `thrift:"listedCount,11" db:"listedCount" json:"listedCount,omitempty"`
  FavouritesCount *int32 `thrift:"favouritesCount,12" db:"favouritesCount" json:"favouritesCount,omitempty"`
  FollowersCount *int32 `thrift:"followersCount,13" db:"followersCount" json:"followersCount,omitempty"`
  Location *string `thrift:"location,14" db:"location" json:"location,omitempty"`
  TimeZone *string `thrift:"timeZone,15" db:"timeZone" json:"timeZone,omitempty"`
  Description *string `thrift:"description,16" db:"description" json:"description,omitempty"`
  // unused field # 17
  UtcOffset *int32 `thrift:"utcOffset,18" db:"utcOffset" json:"utcOffset,omitempty"`
  URL *string `thrift:"url,19" db:"url" json:"url,omitempty"`
}

func NewTwitterUser() *TwitterUser {
  return &TwitterUser{}
}

var TwitterUser_ID_DEFAULT int64
func (p *TwitterUser) GetID() int64 {
  if !p.IsSetID() {
    return TwitterUser_ID_DEFAULT
  }
return *p.ID
}
var TwitterUser_Name_DEFAULT string
func (p *TwitterUser) GetName() string {
  if !p.IsSetName() {
    return TwitterUser_Name_DEFAULT
  }
return *p.Name
}
var TwitterUser_ScreenName_DEFAULT string
func (p *TwitterUser) GetScreenName() string {
  if !p.IsSetScreenName() {
    return TwitterUser_ScreenName_DEFAULT
  }
return *p.ScreenName
}
var TwitterUser_Lang_DEFAULT string
func (p *TwitterUser) GetLang() string {
  if !p.IsSetLang() {
    return TwitterUser_Lang_DEFAULT
  }
return *p.Lang
}
var TwitterUser_GeoEnabled_DEFAULT bool
func (p *TwitterUser) GetGeoEnabled() bool {
  if !p.IsSetGeoEnabled() {
    return TwitterUser_GeoEnabled_DEFAULT
  }
return *p.GeoEnabled
}
var TwitterUser_CreatedAt_DEFAULT string
func (p *TwitterUser) GetCreatedAt() string {
  if !p.IsSetCreatedAt() {
    return TwitterUser_CreatedAt_DEFAULT
  }
return *p.CreatedAt
}
var TwitterUser_FriendsCount_DEFAULT int32
func (p *TwitterUser) GetFriendsCount() int32 {
  if !p.IsSetFriendsCount() {
    return TwitterUser_FriendsCount_DEFAULT
  }
return *p.FriendsCount
}
var TwitterUser_StatusesCount_DEFAULT int32
func (p *TwitterUser) GetStatusesCount() int32 {
  if !p.IsSetStatusesCount() {
    return TwitterUser_StatusesCount_DEFAULT
  }
return *p.StatusesCount
}
var TwitterUser_Verified_DEFAULT bool
func (p *TwitterUser) GetVerified() bool {
  if !p.IsSetVerified() {
    return TwitterUser_Verified_DEFAULT
  }
return *p.Verified
}
var TwitterUser_ListedCount_DEFAULT int32
func (p *TwitterUser) GetListedCount() int32 {
  if !p.IsSetListedCount() {
    return TwitterUser_ListedCount_DEFAULT
  }
return *p.ListedCount
}
var TwitterUser_FavouritesCount_DEFAULT int32
func (p *TwitterUser) GetFavouritesCount() int32 {
  if !p.IsSetFavouritesCount() {
    return TwitterUser_FavouritesCount_DEFAULT
  }
return *p.FavouritesCount
}
var TwitterUser_FollowersCount_DEFAULT int32
func (p *TwitterUser) GetFollowersCount() int32 {
  if !p.IsSetFollowersCount() {
    return TwitterUser_FollowersCount_DEFAULT
  }
return *p.FollowersCount
}
var TwitterUser_Location_DEFAULT string
func (p *TwitterUser) GetLocation() string {
  if !p.IsSetLocation() {
    return TwitterUser_Location_DEFAULT
  }
return *p.Location
}
var TwitterUser_TimeZone_DEFAULT string
func (p *TwitterUser) GetTimeZone() string {
  if !p.IsSetTimeZone() {
    return TwitterUser_TimeZone_DEFAULT
  }
return *p.TimeZone
}
var TwitterUser_Description_DEFAULT string
func (p *TwitterUser) GetDescription() string {
  if !p.IsSetDescription() {
    return TwitterUser_Description_DEFAULT
  }
return *p.Description
}
var TwitterUser_UtcOffset_DEFAULT int32
func (p *TwitterUser) GetUtcOffset() int32 {
  if !p.IsSetUtcOffset() {
    return TwitterUser_UtcOffset_DEFAULT
  }
return *p.UtcOffset
}
var TwitterUser_URL_DEFAULT string
func (p *TwitterUser) GetURL() string {
  if !p.IsSetURL() {
    return TwitterUser_URL_DEFAULT
  }
return *p.URL
}
func (p *TwitterUser) IsSetID() bool {
  return p.ID != nil
}

func (p *TwitterUser) IsSetName() bool {
  return p.Name != nil
}

func (p *TwitterUser) IsSetScreenName() bool {
  return p.ScreenName != nil
}

func (p *TwitterUser) IsSetLang() bool {
  return p.Lang != nil
}

func (p *TwitterUser) IsSetGeoEnabled() bool {
  return p.GeoEnabled != nil
}

func (p *TwitterUser) IsSetCreatedAt() bool {
  return p.CreatedAt != nil
}

func (p *TwitterUser) IsSetFriendsCount() bool {
  return p.FriendsCount != nil
}

func (p *TwitterUser) IsSetStatusesCount() bool {
  return p.StatusesCount != nil
}

func (p *TwitterUser) IsSetVerified() bool {
  return p.Verified != nil
}

func (p *TwitterUser) IsSetListedCount() bool {
  return p.ListedCount != nil
}

func (p *TwitterUser) IsSetFavouritesCount() bool {
  return p.FavouritesCount != nil
}

func (p *TwitterUser) IsSetFollowersCount() bool {
  return p.FollowersCount != nil
}

func (p *TwitterUser) IsSetLocation() bool {
  return p.Location != nil
}

func (p *TwitterUser) IsSetTimeZone() bool {
  return p.TimeZone != nil
}

func (p *TwitterUser) IsSetDescription() bool {
  return p.Description != nil
}

func (p *TwitterUser) IsSetUtcOffset() bool {
  return p.UtcOffset != nil
}

func (p *TwitterUser) IsSetURL() bool {
  return p.URL != nil
}

func (p *TwitterUser) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    case 7:
      if err := p.ReadField7(iprot); err != nil {
        return err
      }
    case 8:
      if err := p.ReadField8(iprot); err != nil {
        return err
      }
    case 9:
      if err := p.ReadField9(iprot); err != nil {
        return err
      }
    case 10:
      if err := p.ReadField10(iprot); err != nil {
        return err
      }
    case 11:
      if err := p.ReadField11(iprot); err != nil {
        return err
      }
    case 12:
      if err := p.ReadField12(iprot); err != nil {
        return err
      }
    case 13:
      if err := p.ReadField13(iprot); err != nil {
        return err
      }
    case 14:
      if err := p.ReadField14(iprot); err != nil {
        return err
      }
    case 15:
      if err := p.ReadField15(iprot); err != nil {
        return err
      }
    case 16:
      if err := p.ReadField16(iprot); err != nil {
        return err
      }
    case 18:
      if err := p.ReadField18(iprot); err != nil {
        return err
      }
    case 19:
      if err := p.ReadField19(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TwitterUser)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = &v
}
  return nil
}

func (p *TwitterUser)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Name = &v
}
  return nil
}

func (p *TwitterUser)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.ScreenName = &v
}
  return nil
}

func (p *TwitterUser)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Lang = &v
}
  return nil
}

func (p *TwitterUser)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.GeoEnabled = &v
}
  return nil
}

func (p *TwitterUser)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.CreatedAt = &v
}
  return nil
}

func (p *TwitterUser)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.FriendsCount = &v
}
  return nil
}

func (p *TwitterUser)  ReadField9(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.StatusesCount = &v
}
  return nil
}

func (p *TwitterUser)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.Verified = &v
}
  return nil
}

func (p *TwitterUser)  ReadField11(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.ListedCount = &v
}
  return nil
}

func (p *TwitterUser)  ReadField12(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  p.FavouritesCount = &v
}
  return nil
}

func (p *TwitterUser)  ReadField13(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 13: ", err)
} else {
  p.FollowersCount = &v
}
  return nil
}

func (p *TwitterUser)  ReadField14(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 14: ", err)
} else {
  p.Location = &v
}
  return nil
}

func (p *TwitterUser)  ReadField15(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 15: ", err)
} else {
  p.TimeZone = &v
}
  return nil
}

func (p *TwitterUser)  ReadField16(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 16: ", err)
} else {
  p.Description = &v
}
  return nil
}

func (p *TwitterUser)  ReadField18(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 18: ", err)
} else {
  p.UtcOffset = &v
}
  return nil
}

func (p *TwitterUser)  ReadField19(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 19: ", err)
} else {
  p.URL = &v
}
  return nil
}

func (p *TwitterUser) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TwitterUser"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField11(oprot); err != nil { return err }
    if err := p.writeField12(oprot); err != nil { return err }
    if err := p.writeField13(oprot); err != nil { return err }
    if err := p.writeField14(oprot); err != nil { return err }
    if err := p.writeField15(oprot); err != nil { return err }
    if err := p.writeField16(oprot); err != nil { return err }
    if err := p.writeField18(oprot); err != nil { return err }
    if err := p.writeField19(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TwitterUser) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetID() {
    if err := oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
    if err := oprot.WriteI64(int64(*p.ID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  }
  return err
}

func (p *TwitterUser) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetName() {
    if err := oprot.WriteFieldBegin("name", thrift.STRING, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:name: ", p), err) }
    if err := oprot.WriteString(string(*p.Name)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.name (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:name: ", p), err) }
  }
  return err
}

func (p *TwitterUser) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetScreenName() {
    if err := oprot.WriteFieldBegin("screenName", thrift.STRING, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:screenName: ", p), err) }
    if err := oprot.WriteString(string(*p.ScreenName)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.screenName (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:screenName: ", p), err) }
  }
  return err
}

func (p *TwitterUser) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetLang() {
    if err := oprot.WriteFieldBegin("lang", thrift.STRING, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:lang: ", p), err) }
    if err := oprot.WriteString(string(*p.Lang)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.lang (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:lang: ", p), err) }
  }
  return err
}

func (p *TwitterUser) writeField6(oprot thrift.TProtocol) (err error) {
  if p.IsSetGeoEnabled() {
    if err := oprot.WriteFieldBegin("geoEnabled", thrift.BOOL, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:geoEnabled: ", p), err) }
    if err := oprot.WriteBool(bool(*p.GeoEnabled)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.geoEnabled (6) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:geoEnabled: ", p), err) }
  }
  return err
}

func (p *TwitterUser) writeField7(oprot thrift.TProtocol) (err error) {
  if p.IsSetCreatedAt() {
    if err := oprot.WriteFieldBegin("createdAt", thrift.STRING, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:createdAt: ", p), err) }
    if err := oprot.WriteString(string(*p.CreatedAt)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.createdAt (7) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:createdAt: ", p), err) }
  }
  return err
}

func (p *TwitterUser) writeField8(oprot thrift.TProtocol) (err error) {
  if p.IsSetFriendsCount() {
    if err := oprot.WriteFieldBegin("friendsCount", thrift.I32, 8); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:friendsCount: ", p), err) }
    if err := oprot.WriteI32(int32(*p.FriendsCount)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.friendsCount (8) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 8:friendsCount: ", p), err) }
  }
  return err
}

func (p *TwitterUser) writeField9(oprot thrift.TProtocol) (err error) {
  if p.IsSetStatusesCount() {
    if err := oprot.WriteFieldBegin("statusesCount", thrift.I32, 9); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:statusesCount: ", p), err) }
    if err := oprot.WriteI32(int32(*p.StatusesCount)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.statusesCount (9) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 9:statusesCount: ", p), err) }
  }
  return err
}

func (p *TwitterUser) writeField10(oprot thrift.TProtocol) (err error) {
  if p.IsSetVerified() {
    if err := oprot.WriteFieldBegin("verified", thrift.BOOL, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:verified: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Verified)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.verified (10) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:verified: ", p), err) }
  }
  return err
}

func (p *TwitterUser) writeField11(oprot thrift.TProtocol) (err error) {
  if p.IsSetListedCount() {
    if err := oprot.WriteFieldBegin("listedCount", thrift.I32, 11); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:listedCount: ", p), err) }
    if err := oprot.WriteI32(int32(*p.ListedCount)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.listedCount (11) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 11:listedCount: ", p), err) }
  }
  return err
}

func (p *TwitterUser) writeField12(oprot thrift.TProtocol) (err error) {
  if p.IsSetFavouritesCount() {
    if err := oprot.WriteFieldBegin("favouritesCount", thrift.I32, 12); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:favouritesCount: ", p), err) }
    if err := oprot.WriteI32(int32(*p.FavouritesCount)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.favouritesCount (12) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 12:favouritesCount: ", p), err) }
  }
  return err
}

func (p *TwitterUser) writeField13(oprot thrift.TProtocol) (err error) {
  if p.IsSetFollowersCount() {
    if err := oprot.WriteFieldBegin("followersCount", thrift.I32, 13); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:followersCount: ", p), err) }
    if err := oprot.WriteI32(int32(*p.FollowersCount)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.followersCount (13) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 13:followersCount: ", p), err) }
  }
  return err
}

func (p *TwitterUser) writeField14(oprot thrift.TProtocol) (err error) {
  if p.IsSetLocation() {
    if err := oprot.WriteFieldBegin("location", thrift.STRING, 14); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:location: ", p), err) }
    if err := oprot.WriteString(string(*p.Location)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.location (14) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 14:location: ", p), err) }
  }
  return err
}

func (p *TwitterUser) writeField15(oprot thrift.TProtocol) (err error) {
  if p.IsSetTimeZone() {
    if err := oprot.WriteFieldBegin("timeZone", thrift.STRING, 15); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:timeZone: ", p), err) }
    if err := oprot.WriteString(string(*p.TimeZone)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.timeZone (15) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 15:timeZone: ", p), err) }
  }
  return err
}

func (p *TwitterUser) writeField16(oprot thrift.TProtocol) (err error) {
  if p.IsSetDescription() {
    if err := oprot.WriteFieldBegin("description", thrift.STRING, 16); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:description: ", p), err) }
    if err := oprot.WriteString(string(*p.Description)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.description (16) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 16:description: ", p), err) }
  }
  return err
}

func (p *TwitterUser) writeField18(oprot thrift.TProtocol) (err error) {
  if p.IsSetUtcOffset() {
    if err := oprot.WriteFieldBegin("utcOffset", thrift.I32, 18); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 18:utcOffset: ", p), err) }
    if err := oprot.WriteI32(int32(*p.UtcOffset)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.utcOffset (18) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 18:utcOffset: ", p), err) }
  }
  return err
}

func (p *TwitterUser) writeField19(oprot thrift.TProtocol) (err error) {
  if p.IsSetURL() {
    if err := oprot.WriteFieldBegin("url", thrift.STRING, 19); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 19:url: ", p), err) }
    if err := oprot.WriteString(string(*p.URL)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.url (19) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 19:url: ", p), err) }
  }
  return err
}

func (p *TwitterUser) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TwitterUser(%+v)", *p)
}

// A twitter geocoordinate.
// 
// Attributes:
//  - Latitude
//  - Longitude
type TwitterLatLong struct {
  Latitude *float64 `thrift:"latitude,1" db:"latitude" json:"latitude,omitempty"`
  Longitude *float64 `thrift:"longitude,2" db:"longitude" json:"longitude,omitempty"`
}

func NewTwitterLatLong() *TwitterLatLong {
  return &TwitterLatLong{}
}

var TwitterLatLong_Latitude_DEFAULT float64
func (p *TwitterLatLong) GetLatitude() float64 {
  if !p.IsSetLatitude() {
    return TwitterLatLong_Latitude_DEFAULT
  }
return *p.Latitude
}
var TwitterLatLong_Longitude_DEFAULT float64
func (p *TwitterLatLong) GetLongitude() float64 {
  if !p.IsSetLongitude() {
    return TwitterLatLong_Longitude_DEFAULT
  }
return *p.Longitude
}
func (p *TwitterLatLong) IsSetLatitude() bool {
  return p.Latitude != nil
}

func (p *TwitterLatLong) IsSetLongitude() bool {
  return p.Longitude != nil
}

func (p *TwitterLatLong) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TwitterLatLong)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Latitude = &v
}
  return nil
}

func (p *TwitterLatLong)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Longitude = &v
}
  return nil
}

func (p *TwitterLatLong) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TwitterLatLong"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TwitterLatLong) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetLatitude() {
    if err := oprot.WriteFieldBegin("latitude", thrift.DOUBLE, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:latitude: ", p), err) }
    if err := oprot.WriteDouble(float64(*p.Latitude)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.latitude (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:latitude: ", p), err) }
  }
  return err
}

func (p *TwitterLatLong) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetLongitude() {
    if err := oprot.WriteFieldBegin("longitude", thrift.DOUBLE, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:longitude: ", p), err) }
    if err := oprot.WriteDouble(float64(*p.Longitude)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.longitude (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:longitude: ", p), err) }
  }
  return err
}

func (p *TwitterLatLong) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TwitterLatLong(%+v)", *p)
}

// Attributes:
//  - Type
//  - CoordinateList
type BoundingBox struct {
  Type *string `thrift:"type,1" db:"type" json:"type,omitempty"`
  CoordinateList []*TwitterLatLong `thrift:"coordinateList,2,required" db:"coordinateList" json:"coordinateList"`
}

func NewBoundingBox() *BoundingBox {
  return &BoundingBox{}
}

var BoundingBox_Type_DEFAULT string
func (p *BoundingBox) GetType() string {
  if !p.IsSetType() {
    return BoundingBox_Type_DEFAULT
  }
return *p.Type
}

func (p *BoundingBox) GetCoordinateList() []*TwitterLatLong {
  return p.CoordinateList
}
func (p *BoundingBox) IsSetType() bool {
  return p.Type != nil
}

func (p *BoundingBox) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetCoordinateList bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
      issetCoordinateList = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetCoordinateList{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field CoordinateList is not set"));
  }
  return nil
}

func (p *BoundingBox)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Type = &v
}
  return nil
}

func (p *BoundingBox)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TwitterLatLong, 0, size)
  p.CoordinateList =  tSlice
  for i := 0; i < size; i ++ {
    _elem0 := &TwitterLatLong{}
    if err := _elem0.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem0), err)
    }
    p.CoordinateList = append(p.CoordinateList, _elem0)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *BoundingBox) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("BoundingBox"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BoundingBox) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetType() {
    if err := oprot.WriteFieldBegin("type", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:type: ", p), err) }
    if err := oprot.WriteString(string(*p.Type)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.type (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:type: ", p), err) }
  }
  return err
}

func (p *BoundingBox) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("coordinateList", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:coordinateList: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.CoordinateList)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.CoordinateList {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:coordinateList: ", p), err) }
  return err
}

func (p *BoundingBox) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BoundingBox(%+v)", *p)
}

// Attributes:
//  - StreetAddress
//  - Region
//  - Locality
type PlaceAttributes struct {
  StreetAddress *string `thrift:"streetAddress,1" db:"streetAddress" json:"streetAddress,omitempty"`
  Region *string `thrift:"region,2" db:"region" json:"region,omitempty"`
  Locality *string `thrift:"locality,3" db:"locality" json:"locality,omitempty"`
}

func NewPlaceAttributes() *PlaceAttributes {
  return &PlaceAttributes{}
}

var PlaceAttributes_StreetAddress_DEFAULT string
func (p *PlaceAttributes) GetStreetAddress() string {
  if !p.IsSetStreetAddress() {
    return PlaceAttributes_StreetAddress_DEFAULT
  }
return *p.StreetAddress
}
var PlaceAttributes_Region_DEFAULT string
func (p *PlaceAttributes) GetRegion() string {
  if !p.IsSetRegion() {
    return PlaceAttributes_Region_DEFAULT
  }
return *p.Region
}
var PlaceAttributes_Locality_DEFAULT string
func (p *PlaceAttributes) GetLocality() string {
  if !p.IsSetLocality() {
    return PlaceAttributes_Locality_DEFAULT
  }
return *p.Locality
}
func (p *PlaceAttributes) IsSetStreetAddress() bool {
  return p.StreetAddress != nil
}

func (p *PlaceAttributes) IsSetRegion() bool {
  return p.Region != nil
}

func (p *PlaceAttributes) IsSetLocality() bool {
  return p.Locality != nil
}

func (p *PlaceAttributes) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PlaceAttributes)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.StreetAddress = &v
}
  return nil
}

func (p *PlaceAttributes)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Region = &v
}
  return nil
}

func (p *PlaceAttributes)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Locality = &v
}
  return nil
}

func (p *PlaceAttributes) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("PlaceAttributes"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PlaceAttributes) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetStreetAddress() {
    if err := oprot.WriteFieldBegin("streetAddress", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:streetAddress: ", p), err) }
    if err := oprot.WriteString(string(*p.StreetAddress)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.streetAddress (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:streetAddress: ", p), err) }
  }
  return err
}

func (p *PlaceAttributes) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetRegion() {
    if err := oprot.WriteFieldBegin("region", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:region: ", p), err) }
    if err := oprot.WriteString(string(*p.Region)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.region (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:region: ", p), err) }
  }
  return err
}

func (p *PlaceAttributes) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetLocality() {
    if err := oprot.WriteFieldBegin("locality", thrift.STRING, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:locality: ", p), err) }
    if err := oprot.WriteString(string(*p.Locality)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.locality (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:locality: ", p), err) }
  }
  return err
}

func (p *PlaceAttributes) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PlaceAttributes(%+v)", *p)
}

// Attributes:
//  - StartOffset
//  - EndOffset
//  - ScreenName
//  - Name
//  - ID
type UserMention struct {
  StartOffset *int32 `thrift:"startOffset,1" db:"startOffset" json:"startOffset,omitempty"`
  EndOffset *int32 `thrift:"endOffset,2" db:"endOffset" json:"endOffset,omitempty"`
  // unused field # 3
  ScreenName *string `thrift:"screenName,4" db:"screenName" json:"screenName,omitempty"`
  Name *string `thrift:"name,5" db:"name" json:"name,omitempty"`
  ID *int64 `thrift:"id,6" db:"id" json:"id,omitempty"`
}

func NewUserMention() *UserMention {
  return &UserMention{}
}

var UserMention_StartOffset_DEFAULT int32
func (p *UserMention) GetStartOffset() int32 {
  if !p.IsSetStartOffset() {
    return UserMention_StartOffset_DEFAULT
  }
return *p.StartOffset
}
var UserMention_EndOffset_DEFAULT int32
func (p *UserMention) GetEndOffset() int32 {
  if !p.IsSetEndOffset() {
    return UserMention_EndOffset_DEFAULT
  }
return *p.EndOffset
}
var UserMention_ScreenName_DEFAULT string
func (p *UserMention) GetScreenName() string {
  if !p.IsSetScreenName() {
    return UserMention_ScreenName_DEFAULT
  }
return *p.ScreenName
}
var UserMention_Name_DEFAULT string
func (p *UserMention) GetName() string {
  if !p.IsSetName() {
    return UserMention_Name_DEFAULT
  }
return *p.Name
}
var UserMention_ID_DEFAULT int64
func (p *UserMention) GetID() int64 {
  if !p.IsSetID() {
    return UserMention_ID_DEFAULT
  }
return *p.ID
}
func (p *UserMention) IsSetStartOffset() bool {
  return p.StartOffset != nil
}

func (p *UserMention) IsSetEndOffset() bool {
  return p.EndOffset != nil
}

func (p *UserMention) IsSetScreenName() bool {
  return p.ScreenName != nil
}

func (p *UserMention) IsSetName() bool {
  return p.Name != nil
}

func (p *UserMention) IsSetID() bool {
  return p.ID != nil
}

func (p *UserMention) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserMention)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.StartOffset = &v
}
  return nil
}

func (p *UserMention)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.EndOffset = &v
}
  return nil
}

func (p *UserMention)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.ScreenName = &v
}
  return nil
}

func (p *UserMention)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Name = &v
}
  return nil
}

func (p *UserMention)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.ID = &v
}
  return nil
}

func (p *UserMention) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("UserMention"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserMention) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetStartOffset() {
    if err := oprot.WriteFieldBegin("startOffset", thrift.I32, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:startOffset: ", p), err) }
    if err := oprot.WriteI32(int32(*p.StartOffset)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.startOffset (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:startOffset: ", p), err) }
  }
  return err
}

func (p *UserMention) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetEndOffset() {
    if err := oprot.WriteFieldBegin("endOffset", thrift.I32, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:endOffset: ", p), err) }
    if err := oprot.WriteI32(int32(*p.EndOffset)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.endOffset (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:endOffset: ", p), err) }
  }
  return err
}

func (p *UserMention) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetScreenName() {
    if err := oprot.WriteFieldBegin("screenName", thrift.STRING, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:screenName: ", p), err) }
    if err := oprot.WriteString(string(*p.ScreenName)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.screenName (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:screenName: ", p), err) }
  }
  return err
}

func (p *UserMention) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetName() {
    if err := oprot.WriteFieldBegin("name", thrift.STRING, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:name: ", p), err) }
    if err := oprot.WriteString(string(*p.Name)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.name (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:name: ", p), err) }
  }
  return err
}

func (p *UserMention) writeField6(oprot thrift.TProtocol) (err error) {
  if p.IsSetID() {
    if err := oprot.WriteFieldBegin("id", thrift.I64, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:id: ", p), err) }
    if err := oprot.WriteI64(int64(*p.ID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.id (6) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:id: ", p), err) }
  }
  return err
}

func (p *UserMention) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserMention(%+v)", *p)
}

// Attributes:
//  - StartOffset
//  - EndOffset
//  - ExpandedUrl
//  - URL
//  - DisplayUrl
type URL struct {
  StartOffset *int32 `thrift:"startOffset,1" db:"startOffset" json:"startOffset,omitempty"`
  EndOffset *int32 `thrift:"endOffset,2" db:"endOffset" json:"endOffset,omitempty"`
  ExpandedUrl *string `thrift:"expandedUrl,3" db:"expandedUrl" json:"expandedUrl,omitempty"`
  URL *string `thrift:"url,4" db:"url" json:"url,omitempty"`
  DisplayUrl *string `thrift:"displayUrl,5" db:"displayUrl" json:"displayUrl,omitempty"`
}

func NewURL() *URL {
  return &URL{}
}

var URL_StartOffset_DEFAULT int32
func (p *URL) GetStartOffset() int32 {
  if !p.IsSetStartOffset() {
    return URL_StartOffset_DEFAULT
  }
return *p.StartOffset
}
var URL_EndOffset_DEFAULT int32
func (p *URL) GetEndOffset() int32 {
  if !p.IsSetEndOffset() {
    return URL_EndOffset_DEFAULT
  }
return *p.EndOffset
}
var URL_ExpandedUrl_DEFAULT string
func (p *URL) GetExpandedUrl() string {
  if !p.IsSetExpandedUrl() {
    return URL_ExpandedUrl_DEFAULT
  }
return *p.ExpandedUrl
}
var URL_URL_DEFAULT string
func (p *URL) GetURL() string {
  if !p.IsSetURL() {
    return URL_URL_DEFAULT
  }
return *p.URL
}
var URL_DisplayUrl_DEFAULT string
func (p *URL) GetDisplayUrl() string {
  if !p.IsSetDisplayUrl() {
    return URL_DisplayUrl_DEFAULT
  }
return *p.DisplayUrl
}
func (p *URL) IsSetStartOffset() bool {
  return p.StartOffset != nil
}

func (p *URL) IsSetEndOffset() bool {
  return p.EndOffset != nil
}

func (p *URL) IsSetExpandedUrl() bool {
  return p.ExpandedUrl != nil
}

func (p *URL) IsSetURL() bool {
  return p.URL != nil
}

func (p *URL) IsSetDisplayUrl() bool {
  return p.DisplayUrl != nil
}

func (p *URL) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *URL)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.StartOffset = &v
}
  return nil
}

func (p *URL)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.EndOffset = &v
}
  return nil
}

func (p *URL)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.ExpandedUrl = &v
}
  return nil
}

func (p *URL)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.URL = &v
}
  return nil
}

func (p *URL)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.DisplayUrl = &v
}
  return nil
}

func (p *URL) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("URL"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *URL) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetStartOffset() {
    if err := oprot.WriteFieldBegin("startOffset", thrift.I32, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:startOffset: ", p), err) }
    if err := oprot.WriteI32(int32(*p.StartOffset)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.startOffset (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:startOffset: ", p), err) }
  }
  return err
}

func (p *URL) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetEndOffset() {
    if err := oprot.WriteFieldBegin("endOffset", thrift.I32, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:endOffset: ", p), err) }
    if err := oprot.WriteI32(int32(*p.EndOffset)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.endOffset (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:endOffset: ", p), err) }
  }
  return err
}

func (p *URL) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetExpandedUrl() {
    if err := oprot.WriteFieldBegin("expandedUrl", thrift.STRING, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:expandedUrl: ", p), err) }
    if err := oprot.WriteString(string(*p.ExpandedUrl)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.expandedUrl (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:expandedUrl: ", p), err) }
  }
  return err
}

func (p *URL) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetURL() {
    if err := oprot.WriteFieldBegin("url", thrift.STRING, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:url: ", p), err) }
    if err := oprot.WriteString(string(*p.URL)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.url (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:url: ", p), err) }
  }
  return err
}

func (p *URL) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetDisplayUrl() {
    if err := oprot.WriteFieldBegin("displayUrl", thrift.STRING, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:displayUrl: ", p), err) }
    if err := oprot.WriteString(string(*p.DisplayUrl)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.displayUrl (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:displayUrl: ", p), err) }
  }
  return err
}

func (p *URL) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("URL(%+v)", *p)
}

// Attributes:
//  - Text
//  - StartOffset
//  - EndOffset
type HashTag struct {
  Text *string `thrift:"text,1" db:"text" json:"text,omitempty"`
  StartOffset *int32 `thrift:"startOffset,2" db:"startOffset" json:"startOffset,omitempty"`
  EndOffset *int32 `thrift:"endOffset,3" db:"endOffset" json:"endOffset,omitempty"`
}

func NewHashTag() *HashTag {
  return &HashTag{}
}

var HashTag_Text_DEFAULT string
func (p *HashTag) GetText() string {
  if !p.IsSetText() {
    return HashTag_Text_DEFAULT
  }
return *p.Text
}
var HashTag_StartOffset_DEFAULT int32
func (p *HashTag) GetStartOffset() int32 {
  if !p.IsSetStartOffset() {
    return HashTag_StartOffset_DEFAULT
  }
return *p.StartOffset
}
var HashTag_EndOffset_DEFAULT int32
func (p *HashTag) GetEndOffset() int32 {
  if !p.IsSetEndOffset() {
    return HashTag_EndOffset_DEFAULT
  }
return *p.EndOffset
}
func (p *HashTag) IsSetText() bool {
  return p.Text != nil
}

func (p *HashTag) IsSetStartOffset() bool {
  return p.StartOffset != nil
}

func (p *HashTag) IsSetEndOffset() bool {
  return p.EndOffset != nil
}

func (p *HashTag) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *HashTag)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Text = &v
}
  return nil
}

func (p *HashTag)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.StartOffset = &v
}
  return nil
}

func (p *HashTag)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.EndOffset = &v
}
  return nil
}

func (p *HashTag) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("HashTag"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *HashTag) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetText() {
    if err := oprot.WriteFieldBegin("text", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:text: ", p), err) }
    if err := oprot.WriteString(string(*p.Text)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.text (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:text: ", p), err) }
  }
  return err
}

func (p *HashTag) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetStartOffset() {
    if err := oprot.WriteFieldBegin("startOffset", thrift.I32, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:startOffset: ", p), err) }
    if err := oprot.WriteI32(int32(*p.StartOffset)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.startOffset (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:startOffset: ", p), err) }
  }
  return err
}

func (p *HashTag) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetEndOffset() {
    if err := oprot.WriteFieldBegin("endOffset", thrift.I32, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:endOffset: ", p), err) }
    if err := oprot.WriteI32(int32(*p.EndOffset)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.endOffset (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:endOffset: ", p), err) }
  }
  return err
}

func (p *HashTag) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("HashTag(%+v)", *p)
}

// Attributes:
//  - HashtagList
//  - UrlList
//  - UserMentionList
type TwitterEntities struct {
  HashtagList []*HashTag `thrift:"hashtagList,1" db:"hashtagList" json:"hashtagList,omitempty"`
  UrlList []*URL `thrift:"urlList,2" db:"urlList" json:"urlList,omitempty"`
  UserMentionList []*UserMention `thrift:"userMentionList,3" db:"userMentionList" json:"userMentionList,omitempty"`
}

func NewTwitterEntities() *TwitterEntities {
  return &TwitterEntities{}
}

var TwitterEntities_HashtagList_DEFAULT []*HashTag

func (p *TwitterEntities) GetHashtagList() []*HashTag {
  return p.HashtagList
}
var TwitterEntities_UrlList_DEFAULT []*URL

func (p *TwitterEntities) GetUrlList() []*URL {
  return p.UrlList
}
var TwitterEntities_UserMentionList_DEFAULT []*UserMention

func (p *TwitterEntities) GetUserMentionList() []*UserMention {
  return p.UserMentionList
}
func (p *TwitterEntities) IsSetHashtagList() bool {
  return p.HashtagList != nil
}

func (p *TwitterEntities) IsSetUrlList() bool {
  return p.UrlList != nil
}

func (p *TwitterEntities) IsSetUserMentionList() bool {
  return p.UserMentionList != nil
}

func (p *TwitterEntities) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TwitterEntities)  ReadField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*HashTag, 0, size)
  p.HashtagList =  tSlice
  for i := 0; i < size; i ++ {
    _elem1 := &HashTag{}
    if err := _elem1.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem1), err)
    }
    p.HashtagList = append(p.HashtagList, _elem1)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TwitterEntities)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*URL, 0, size)
  p.UrlList =  tSlice
  for i := 0; i < size; i ++ {
    _elem2 := &URL{}
    if err := _elem2.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem2), err)
    }
    p.UrlList = append(p.UrlList, _elem2)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TwitterEntities)  ReadField3(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*UserMention, 0, size)
  p.UserMentionList =  tSlice
  for i := 0; i < size; i ++ {
    _elem3 := &UserMention{}
    if err := _elem3.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem3), err)
    }
    p.UserMentionList = append(p.UserMentionList, _elem3)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TwitterEntities) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TwitterEntities"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TwitterEntities) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetHashtagList() {
    if err := oprot.WriteFieldBegin("hashtagList", thrift.LIST, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:hashtagList: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.HashtagList)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.HashtagList {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:hashtagList: ", p), err) }
  }
  return err
}

func (p *TwitterEntities) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetUrlList() {
    if err := oprot.WriteFieldBegin("urlList", thrift.LIST, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:urlList: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.UrlList)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.UrlList {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:urlList: ", p), err) }
  }
  return err
}

func (p *TwitterEntities) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetUserMentionList() {
    if err := oprot.WriteFieldBegin("userMentionList", thrift.LIST, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:userMentionList: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.UserMentionList)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.UserMentionList {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:userMentionList: ", p), err) }
  }
  return err
}

func (p *TwitterEntities) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TwitterEntities(%+v)", *p)
}

// Attributes:
//  - PlaceType
//  - CountryCode
//  - Country
//  - FullName
//  - Name
//  - ID
//  - URL
//  - BoundingBox
//  - Attributes
type TwitterPlace struct {
  PlaceType *string `thrift:"placeType,1" db:"placeType" json:"placeType,omitempty"`
  CountryCode *string `thrift:"countryCode,2" db:"countryCode" json:"countryCode,omitempty"`
  Country *string `thrift:"country,3" db:"country" json:"country,omitempty"`
  FullName *string `thrift:"fullName,4" db:"fullName" json:"fullName,omitempty"`
  Name *string `thrift:"name,5" db:"name" json:"name,omitempty"`
  ID *string `thrift:"id,6" db:"id" json:"id,omitempty"`
  URL *string `thrift:"url,7" db:"url" json:"url,omitempty"`
  BoundingBox *BoundingBox `thrift:"boundingBox,8" db:"boundingBox" json:"boundingBox,omitempty"`
  Attributes *PlaceAttributes `thrift:"attributes,9" db:"attributes" json:"attributes,omitempty"`
}

func NewTwitterPlace() *TwitterPlace {
  return &TwitterPlace{}
}

var TwitterPlace_PlaceType_DEFAULT string
func (p *TwitterPlace) GetPlaceType() string {
  if !p.IsSetPlaceType() {
    return TwitterPlace_PlaceType_DEFAULT
  }
return *p.PlaceType
}
var TwitterPlace_CountryCode_DEFAULT string
func (p *TwitterPlace) GetCountryCode() string {
  if !p.IsSetCountryCode() {
    return TwitterPlace_CountryCode_DEFAULT
  }
return *p.CountryCode
}
var TwitterPlace_Country_DEFAULT string
func (p *TwitterPlace) GetCountry() string {
  if !p.IsSetCountry() {
    return TwitterPlace_Country_DEFAULT
  }
return *p.Country
}
var TwitterPlace_FullName_DEFAULT string
func (p *TwitterPlace) GetFullName() string {
  if !p.IsSetFullName() {
    return TwitterPlace_FullName_DEFAULT
  }
return *p.FullName
}
var TwitterPlace_Name_DEFAULT string
func (p *TwitterPlace) GetName() string {
  if !p.IsSetName() {
    return TwitterPlace_Name_DEFAULT
  }
return *p.Name
}
var TwitterPlace_ID_DEFAULT string
func (p *TwitterPlace) GetID() string {
  if !p.IsSetID() {
    return TwitterPlace_ID_DEFAULT
  }
return *p.ID
}
var TwitterPlace_URL_DEFAULT string
func (p *TwitterPlace) GetURL() string {
  if !p.IsSetURL() {
    return TwitterPlace_URL_DEFAULT
  }
return *p.URL
}
var TwitterPlace_BoundingBox_DEFAULT *BoundingBox
func (p *TwitterPlace) GetBoundingBox() *BoundingBox {
  if !p.IsSetBoundingBox() {
    return TwitterPlace_BoundingBox_DEFAULT
  }
return p.BoundingBox
}
var TwitterPlace_Attributes_DEFAULT *PlaceAttributes
func (p *TwitterPlace) GetAttributes() *PlaceAttributes {
  if !p.IsSetAttributes() {
    return TwitterPlace_Attributes_DEFAULT
  }
return p.Attributes
}
func (p *TwitterPlace) IsSetPlaceType() bool {
  return p.PlaceType != nil
}

func (p *TwitterPlace) IsSetCountryCode() bool {
  return p.CountryCode != nil
}

func (p *TwitterPlace) IsSetCountry() bool {
  return p.Country != nil
}

func (p *TwitterPlace) IsSetFullName() bool {
  return p.FullName != nil
}

func (p *TwitterPlace) IsSetName() bool {
  return p.Name != nil
}

func (p *TwitterPlace) IsSetID() bool {
  return p.ID != nil
}

func (p *TwitterPlace) IsSetURL() bool {
  return p.URL != nil
}

func (p *TwitterPlace) IsSetBoundingBox() bool {
  return p.BoundingBox != nil
}

func (p *TwitterPlace) IsSetAttributes() bool {
  return p.Attributes != nil
}

func (p *TwitterPlace) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    case 7:
      if err := p.ReadField7(iprot); err != nil {
        return err
      }
    case 8:
      if err := p.ReadField8(iprot); err != nil {
        return err
      }
    case 9:
      if err := p.ReadField9(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TwitterPlace)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.PlaceType = &v
}
  return nil
}

func (p *TwitterPlace)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.CountryCode = &v
}
  return nil
}

func (p *TwitterPlace)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Country = &v
}
  return nil
}

func (p *TwitterPlace)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.FullName = &v
}
  return nil
}

func (p *TwitterPlace)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Name = &v
}
  return nil
}

func (p *TwitterPlace)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.ID = &v
}
  return nil
}

func (p *TwitterPlace)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.URL = &v
}
  return nil
}

func (p *TwitterPlace)  ReadField8(iprot thrift.TProtocol) error {
  p.BoundingBox = &BoundingBox{}
  if err := p.BoundingBox.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.BoundingBox), err)
  }
  return nil
}

func (p *TwitterPlace)  ReadField9(iprot thrift.TProtocol) error {
  p.Attributes = &PlaceAttributes{}
  if err := p.Attributes.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Attributes), err)
  }
  return nil
}

func (p *TwitterPlace) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TwitterPlace"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TwitterPlace) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetPlaceType() {
    if err := oprot.WriteFieldBegin("placeType", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:placeType: ", p), err) }
    if err := oprot.WriteString(string(*p.PlaceType)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.placeType (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:placeType: ", p), err) }
  }
  return err
}

func (p *TwitterPlace) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetCountryCode() {
    if err := oprot.WriteFieldBegin("countryCode", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:countryCode: ", p), err) }
    if err := oprot.WriteString(string(*p.CountryCode)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.countryCode (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:countryCode: ", p), err) }
  }
  return err
}

func (p *TwitterPlace) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetCountry() {
    if err := oprot.WriteFieldBegin("country", thrift.STRING, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:country: ", p), err) }
    if err := oprot.WriteString(string(*p.Country)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.country (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:country: ", p), err) }
  }
  return err
}

func (p *TwitterPlace) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetFullName() {
    if err := oprot.WriteFieldBegin("fullName", thrift.STRING, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:fullName: ", p), err) }
    if err := oprot.WriteString(string(*p.FullName)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.fullName (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:fullName: ", p), err) }
  }
  return err
}

func (p *TwitterPlace) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetName() {
    if err := oprot.WriteFieldBegin("name", thrift.STRING, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:name: ", p), err) }
    if err := oprot.WriteString(string(*p.Name)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.name (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:name: ", p), err) }
  }
  return err
}

func (p *TwitterPlace) writeField6(oprot thrift.TProtocol) (err error) {
  if p.IsSetID() {
    if err := oprot.WriteFieldBegin("id", thrift.STRING, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:id: ", p), err) }
    if err := oprot.WriteString(string(*p.ID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.id (6) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:id: ", p), err) }
  }
  return err
}

func (p *TwitterPlace) writeField7(oprot thrift.TProtocol) (err error) {
  if p.IsSetURL() {
    if err := oprot.WriteFieldBegin("url", thrift.STRING, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:url: ", p), err) }
    if err := oprot.WriteString(string(*p.URL)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.url (7) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:url: ", p), err) }
  }
  return err
}

func (p *TwitterPlace) writeField8(oprot thrift.TProtocol) (err error) {
  if p.IsSetBoundingBox() {
    if err := oprot.WriteFieldBegin("boundingBox", thrift.STRUCT, 8); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:boundingBox: ", p), err) }
    if err := p.BoundingBox.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.BoundingBox), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 8:boundingBox: ", p), err) }
  }
  return err
}

func (p *TwitterPlace) writeField9(oprot thrift.TProtocol) (err error) {
  if p.IsSetAttributes() {
    if err := oprot.WriteFieldBegin("attributes", thrift.STRUCT, 9); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:attributes: ", p), err) }
    if err := p.Attributes.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Attributes), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 9:attributes: ", p), err) }
  }
  return err
}

func (p *TwitterPlace) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TwitterPlace(%+v)", *p)
}

// Attributes:
//  - Type
//  - Coordinates
type TwitterCoordinates struct {
  Type *string `thrift:"type,1" db:"type" json:"type,omitempty"`
  Coordinates *TwitterLatLong `thrift:"coordinates,2" db:"coordinates" json:"coordinates,omitempty"`
}

func NewTwitterCoordinates() *TwitterCoordinates {
  return &TwitterCoordinates{}
}

var TwitterCoordinates_Type_DEFAULT string
func (p *TwitterCoordinates) GetType() string {
  if !p.IsSetType() {
    return TwitterCoordinates_Type_DEFAULT
  }
return *p.Type
}
var TwitterCoordinates_Coordinates_DEFAULT *TwitterLatLong
func (p *TwitterCoordinates) GetCoordinates() *TwitterLatLong {
  if !p.IsSetCoordinates() {
    return TwitterCoordinates_Coordinates_DEFAULT
  }
return p.Coordinates
}
func (p *TwitterCoordinates) IsSetType() bool {
  return p.Type != nil
}

func (p *TwitterCoordinates) IsSetCoordinates() bool {
  return p.Coordinates != nil
}

func (p *TwitterCoordinates) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TwitterCoordinates)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Type = &v
}
  return nil
}

func (p *TwitterCoordinates)  ReadField2(iprot thrift.TProtocol) error {
  p.Coordinates = &TwitterLatLong{}
  if err := p.Coordinates.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Coordinates), err)
  }
  return nil
}

func (p *TwitterCoordinates) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TwitterCoordinates"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TwitterCoordinates) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetType() {
    if err := oprot.WriteFieldBegin("type", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:type: ", p), err) }
    if err := oprot.WriteString(string(*p.Type)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.type (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:type: ", p), err) }
  }
  return err
}

func (p *TwitterCoordinates) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetCoordinates() {
    if err := oprot.WriteFieldBegin("coordinates", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:coordinates: ", p), err) }
    if err := p.Coordinates.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Coordinates), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:coordinates: ", p), err) }
  }
  return err
}

func (p *TwitterCoordinates) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TwitterCoordinates(%+v)", *p)
}

// Attributes:
//  - ID
//  - Text
//  - CreatedAt
//  - User
//  - Truncated
//  - Entities
//  - Source
//  - Coordinates
//  - Place
//  - Favorited
//  - Retweeted
//  - RetweetCount
//  - InReplyToScreenName
//  - InReplyToStatusId
//  - InReplyToUserId
//  - RetweetedScreenName
//  - RetweetedStatusId
//  - RetweetedUserId
type TweetInfo struct {
  ID *int64 `thrift:"id,1" db:"id" json:"id,omitempty"`
  // unused field # 2
  Text *string `thrift:"text,3" db:"text" json:"text,omitempty"`
  CreatedAt *string `thrift:"createdAt,4" db:"createdAt" json:"createdAt,omitempty"`
  User *TwitterUser `thrift:"user,5" db:"user" json:"user,omitempty"`
  Truncated *bool `thrift:"truncated,6" db:"truncated" json:"truncated,omitempty"`
  Entities *TwitterEntities `thrift:"entities,7" db:"entities" json:"entities,omitempty"`
  Source *string `thrift:"source,8" db:"source" json:"source,omitempty"`
  Coordinates *TwitterCoordinates `thrift:"coordinates,9" db:"coordinates" json:"coordinates,omitempty"`
  // unused field # 10
  Place *TwitterPlace `thrift:"place,11" db:"place" json:"place,omitempty"`
  Favorited *bool `thrift:"favorited,12" db:"favorited" json:"favorited,omitempty"`
  Retweeted *bool `thrift:"retweeted,13" db:"retweeted" json:"retweeted,omitempty"`
  RetweetCount *int32 `thrift:"retweetCount,14" db:"retweetCount" json:"retweetCount,omitempty"`
  InReplyToScreenName *string `thrift:"inReplyToScreenName,15" db:"inReplyToScreenName" json:"inReplyToScreenName,omitempty"`
  InReplyToStatusId *int64 `thrift:"inReplyToStatusId,16" db:"inReplyToStatusId" json:"inReplyToStatusId,omitempty"`
  // unused field # 17
  InReplyToUserId *int64 `thrift:"inReplyToUserId,18" db:"inReplyToUserId" json:"inReplyToUserId,omitempty"`
  RetweetedScreenName *string `thrift:"retweetedScreenName,19" db:"retweetedScreenName" json:"retweetedScreenName,omitempty"`
  RetweetedStatusId *int64 `thrift:"retweetedStatusId,20" db:"retweetedStatusId" json:"retweetedStatusId,omitempty"`
  RetweetedUserId *int64 `thrift:"retweetedUserId,21" db:"retweetedUserId" json:"retweetedUserId,omitempty"`
}

func NewTweetInfo() *TweetInfo {
  return &TweetInfo{}
}

var TweetInfo_ID_DEFAULT int64
func (p *TweetInfo) GetID() int64 {
  if !p.IsSetID() {
    return TweetInfo_ID_DEFAULT
  }
return *p.ID
}
var TweetInfo_Text_DEFAULT string
func (p *TweetInfo) GetText() string {
  if !p.IsSetText() {
    return TweetInfo_Text_DEFAULT
  }
return *p.Text
}
var TweetInfo_CreatedAt_DEFAULT string
func (p *TweetInfo) GetCreatedAt() string {
  if !p.IsSetCreatedAt() {
    return TweetInfo_CreatedAt_DEFAULT
  }
return *p.CreatedAt
}
var TweetInfo_User_DEFAULT *TwitterUser
func (p *TweetInfo) GetUser() *TwitterUser {
  if !p.IsSetUser() {
    return TweetInfo_User_DEFAULT
  }
return p.User
}
var TweetInfo_Truncated_DEFAULT bool
func (p *TweetInfo) GetTruncated() bool {
  if !p.IsSetTruncated() {
    return TweetInfo_Truncated_DEFAULT
  }
return *p.Truncated
}
var TweetInfo_Entities_DEFAULT *TwitterEntities
func (p *TweetInfo) GetEntities() *TwitterEntities {
  if !p.IsSetEntities() {
    return TweetInfo_Entities_DEFAULT
  }
return p.Entities
}
var TweetInfo_Source_DEFAULT string
func (p *TweetInfo) GetSource() string {
  if !p.IsSetSource() {
    return TweetInfo_Source_DEFAULT
  }
return *p.Source
}
var TweetInfo_Coordinates_DEFAULT *TwitterCoordinates
func (p *TweetInfo) GetCoordinates() *TwitterCoordinates {
  if !p.IsSetCoordinates() {
    return TweetInfo_Coordinates_DEFAULT
  }
return p.Coordinates
}
var TweetInfo_Place_DEFAULT *TwitterPlace
func (p *TweetInfo) GetPlace() *TwitterPlace {
  if !p.IsSetPlace() {
    return TweetInfo_Place_DEFAULT
  }
return p.Place
}
var TweetInfo_Favorited_DEFAULT bool
func (p *TweetInfo) GetFavorited() bool {
  if !p.IsSetFavorited() {
    return TweetInfo_Favorited_DEFAULT
  }
return *p.Favorited
}
var TweetInfo_Retweeted_DEFAULT bool
func (p *TweetInfo) GetRetweeted() bool {
  if !p.IsSetRetweeted() {
    return TweetInfo_Retweeted_DEFAULT
  }
return *p.Retweeted
}
var TweetInfo_RetweetCount_DEFAULT int32
func (p *TweetInfo) GetRetweetCount() int32 {
  if !p.IsSetRetweetCount() {
    return TweetInfo_RetweetCount_DEFAULT
  }
return *p.RetweetCount
}
var TweetInfo_InReplyToScreenName_DEFAULT string
func (p *TweetInfo) GetInReplyToScreenName() string {
  if !p.IsSetInReplyToScreenName() {
    return TweetInfo_InReplyToScreenName_DEFAULT
  }
return *p.InReplyToScreenName
}
var TweetInfo_InReplyToStatusId_DEFAULT int64
func (p *TweetInfo) GetInReplyToStatusId() int64 {
  if !p.IsSetInReplyToStatusId() {
    return TweetInfo_InReplyToStatusId_DEFAULT
  }
return *p.InReplyToStatusId
}
var TweetInfo_InReplyToUserId_DEFAULT int64
func (p *TweetInfo) GetInReplyToUserId() int64 {
  if !p.IsSetInReplyToUserId() {
    return TweetInfo_InReplyToUserId_DEFAULT
  }
return *p.InReplyToUserId
}
var TweetInfo_RetweetedScreenName_DEFAULT string
func (p *TweetInfo) GetRetweetedScreenName() string {
  if !p.IsSetRetweetedScreenName() {
    return TweetInfo_RetweetedScreenName_DEFAULT
  }
return *p.RetweetedScreenName
}
var TweetInfo_RetweetedStatusId_DEFAULT int64
func (p *TweetInfo) GetRetweetedStatusId() int64 {
  if !p.IsSetRetweetedStatusId() {
    return TweetInfo_RetweetedStatusId_DEFAULT
  }
return *p.RetweetedStatusId
}
var TweetInfo_RetweetedUserId_DEFAULT int64
func (p *TweetInfo) GetRetweetedUserId() int64 {
  if !p.IsSetRetweetedUserId() {
    return TweetInfo_RetweetedUserId_DEFAULT
  }
return *p.RetweetedUserId
}
func (p *TweetInfo) IsSetID() bool {
  return p.ID != nil
}

func (p *TweetInfo) IsSetText() bool {
  return p.Text != nil
}

func (p *TweetInfo) IsSetCreatedAt() bool {
  return p.CreatedAt != nil
}

func (p *TweetInfo) IsSetUser() bool {
  return p.User != nil
}

func (p *TweetInfo) IsSetTruncated() bool {
  return p.Truncated != nil
}

func (p *TweetInfo) IsSetEntities() bool {
  return p.Entities != nil
}

func (p *TweetInfo) IsSetSource() bool {
  return p.Source != nil
}

func (p *TweetInfo) IsSetCoordinates() bool {
  return p.Coordinates != nil
}

func (p *TweetInfo) IsSetPlace() bool {
  return p.Place != nil
}

func (p *TweetInfo) IsSetFavorited() bool {
  return p.Favorited != nil
}

func (p *TweetInfo) IsSetRetweeted() bool {
  return p.Retweeted != nil
}

func (p *TweetInfo) IsSetRetweetCount() bool {
  return p.RetweetCount != nil
}

func (p *TweetInfo) IsSetInReplyToScreenName() bool {
  return p.InReplyToScreenName != nil
}

func (p *TweetInfo) IsSetInReplyToStatusId() bool {
  return p.InReplyToStatusId != nil
}

func (p *TweetInfo) IsSetInReplyToUserId() bool {
  return p.InReplyToUserId != nil
}

func (p *TweetInfo) IsSetRetweetedScreenName() bool {
  return p.RetweetedScreenName != nil
}

func (p *TweetInfo) IsSetRetweetedStatusId() bool {
  return p.RetweetedStatusId != nil
}

func (p *TweetInfo) IsSetRetweetedUserId() bool {
  return p.RetweetedUserId != nil
}

func (p *TweetInfo) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    case 7:
      if err := p.ReadField7(iprot); err != nil {
        return err
      }
    case 8:
      if err := p.ReadField8(iprot); err != nil {
        return err
      }
    case 9:
      if err := p.ReadField9(iprot); err != nil {
        return err
      }
    case 11:
      if err := p.ReadField11(iprot); err != nil {
        return err
      }
    case 12:
      if err := p.ReadField12(iprot); err != nil {
        return err
      }
    case 13:
      if err := p.ReadField13(iprot); err != nil {
        return err
      }
    case 14:
      if err := p.ReadField14(iprot); err != nil {
        return err
      }
    case 15:
      if err := p.ReadField15(iprot); err != nil {
        return err
      }
    case 16:
      if err := p.ReadField16(iprot); err != nil {
        return err
      }
    case 18:
      if err := p.ReadField18(iprot); err != nil {
        return err
      }
    case 19:
      if err := p.ReadField19(iprot); err != nil {
        return err
      }
    case 20:
      if err := p.ReadField20(iprot); err != nil {
        return err
      }
    case 21:
      if err := p.ReadField21(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TweetInfo)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = &v
}
  return nil
}

func (p *TweetInfo)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Text = &v
}
  return nil
}

func (p *TweetInfo)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.CreatedAt = &v
}
  return nil
}

func (p *TweetInfo)  ReadField5(iprot thrift.TProtocol) error {
  p.User = &TwitterUser{}
  if err := p.User.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.User), err)
  }
  return nil
}

func (p *TweetInfo)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.Truncated = &v
}
  return nil
}

func (p *TweetInfo)  ReadField7(iprot thrift.TProtocol) error {
  p.Entities = &TwitterEntities{}
  if err := p.Entities.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Entities), err)
  }
  return nil
}

func (p *TweetInfo)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.Source = &v
}
  return nil
}

func (p *TweetInfo)  ReadField9(iprot thrift.TProtocol) error {
  p.Coordinates = &TwitterCoordinates{}
  if err := p.Coordinates.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Coordinates), err)
  }
  return nil
}

func (p *TweetInfo)  ReadField11(iprot thrift.TProtocol) error {
  p.Place = &TwitterPlace{}
  if err := p.Place.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Place), err)
  }
  return nil
}

func (p *TweetInfo)  ReadField12(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  p.Favorited = &v
}
  return nil
}

func (p *TweetInfo)  ReadField13(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 13: ", err)
} else {
  p.Retweeted = &v
}
  return nil
}

func (p *TweetInfo)  ReadField14(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 14: ", err)
} else {
  p.RetweetCount = &v
}
  return nil
}

func (p *TweetInfo)  ReadField15(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 15: ", err)
} else {
  p.InReplyToScreenName = &v
}
  return nil
}

func (p *TweetInfo)  ReadField16(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 16: ", err)
} else {
  p.InReplyToStatusId = &v
}
  return nil
}

func (p *TweetInfo)  ReadField18(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 18: ", err)
} else {
  p.InReplyToUserId = &v
}
  return nil
}

func (p *TweetInfo)  ReadField19(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 19: ", err)
} else {
  p.RetweetedScreenName = &v
}
  return nil
}

func (p *TweetInfo)  ReadField20(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 20: ", err)
} else {
  p.RetweetedStatusId = &v
}
  return nil
}

func (p *TweetInfo)  ReadField21(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 21: ", err)
} else {
  p.RetweetedUserId = &v
}
  return nil
}

func (p *TweetInfo) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TweetInfo"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
    if err := p.writeField11(oprot); err != nil { return err }
    if err := p.writeField12(oprot); err != nil { return err }
    if err := p.writeField13(oprot); err != nil { return err }
    if err := p.writeField14(oprot); err != nil { return err }
    if err := p.writeField15(oprot); err != nil { return err }
    if err := p.writeField16(oprot); err != nil { return err }
    if err := p.writeField18(oprot); err != nil { return err }
    if err := p.writeField19(oprot); err != nil { return err }
    if err := p.writeField20(oprot); err != nil { return err }
    if err := p.writeField21(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TweetInfo) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetID() {
    if err := oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
    if err := oprot.WriteI64(int64(*p.ID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  }
  return err
}

func (p *TweetInfo) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetText() {
    if err := oprot.WriteFieldBegin("text", thrift.STRING, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:text: ", p), err) }
    if err := oprot.WriteString(string(*p.Text)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.text (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:text: ", p), err) }
  }
  return err
}

func (p *TweetInfo) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetCreatedAt() {
    if err := oprot.WriteFieldBegin("createdAt", thrift.STRING, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:createdAt: ", p), err) }
    if err := oprot.WriteString(string(*p.CreatedAt)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.createdAt (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:createdAt: ", p), err) }
  }
  return err
}

func (p *TweetInfo) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetUser() {
    if err := oprot.WriteFieldBegin("user", thrift.STRUCT, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:user: ", p), err) }
    if err := p.User.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.User), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:user: ", p), err) }
  }
  return err
}

func (p *TweetInfo) writeField6(oprot thrift.TProtocol) (err error) {
  if p.IsSetTruncated() {
    if err := oprot.WriteFieldBegin("truncated", thrift.BOOL, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:truncated: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Truncated)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.truncated (6) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:truncated: ", p), err) }
  }
  return err
}

func (p *TweetInfo) writeField7(oprot thrift.TProtocol) (err error) {
  if p.IsSetEntities() {
    if err := oprot.WriteFieldBegin("entities", thrift.STRUCT, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:entities: ", p), err) }
    if err := p.Entities.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Entities), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:entities: ", p), err) }
  }
  return err
}

func (p *TweetInfo) writeField8(oprot thrift.TProtocol) (err error) {
  if p.IsSetSource() {
    if err := oprot.WriteFieldBegin("source", thrift.STRING, 8); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:source: ", p), err) }
    if err := oprot.WriteString(string(*p.Source)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.source (8) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 8:source: ", p), err) }
  }
  return err
}

func (p *TweetInfo) writeField9(oprot thrift.TProtocol) (err error) {
  if p.IsSetCoordinates() {
    if err := oprot.WriteFieldBegin("coordinates", thrift.STRUCT, 9); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:coordinates: ", p), err) }
    if err := p.Coordinates.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Coordinates), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 9:coordinates: ", p), err) }
  }
  return err
}

func (p *TweetInfo) writeField11(oprot thrift.TProtocol) (err error) {
  if p.IsSetPlace() {
    if err := oprot.WriteFieldBegin("place", thrift.STRUCT, 11); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:place: ", p), err) }
    if err := p.Place.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Place), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 11:place: ", p), err) }
  }
  return err
}

func (p *TweetInfo) writeField12(oprot thrift.TProtocol) (err error) {
  if p.IsSetFavorited() {
    if err := oprot.WriteFieldBegin("favorited", thrift.BOOL, 12); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:favorited: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Favorited)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.favorited (12) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 12:favorited: ", p), err) }
  }
  return err
}

func (p *TweetInfo) writeField13(oprot thrift.TProtocol) (err error) {
  if p.IsSetRetweeted() {
    if err := oprot.WriteFieldBegin("retweeted", thrift.BOOL, 13); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:retweeted: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Retweeted)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.retweeted (13) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 13:retweeted: ", p), err) }
  }
  return err
}

func (p *TweetInfo) writeField14(oprot thrift.TProtocol) (err error) {
  if p.IsSetRetweetCount() {
    if err := oprot.WriteFieldBegin("retweetCount", thrift.I32, 14); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:retweetCount: ", p), err) }
    if err := oprot.WriteI32(int32(*p.RetweetCount)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.retweetCount (14) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 14:retweetCount: ", p), err) }
  }
  return err
}

func (p *TweetInfo) writeField15(oprot thrift.TProtocol) (err error) {
  if p.IsSetInReplyToScreenName() {
    if err := oprot.WriteFieldBegin("inReplyToScreenName", thrift.STRING, 15); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:inReplyToScreenName: ", p), err) }
    if err := oprot.WriteString(string(*p.InReplyToScreenName)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.inReplyToScreenName (15) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 15:inReplyToScreenName: ", p), err) }
  }
  return err
}

func (p *TweetInfo) writeField16(oprot thrift.TProtocol) (err error) {
  if p.IsSetInReplyToStatusId() {
    if err := oprot.WriteFieldBegin("inReplyToStatusId", thrift.I64, 16); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:inReplyToStatusId: ", p), err) }
    if err := oprot.WriteI64(int64(*p.InReplyToStatusId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.inReplyToStatusId (16) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 16:inReplyToStatusId: ", p), err) }
  }
  return err
}

func (p *TweetInfo) writeField18(oprot thrift.TProtocol) (err error) {
  if p.IsSetInReplyToUserId() {
    if err := oprot.WriteFieldBegin("inReplyToUserId", thrift.I64, 18); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 18:inReplyToUserId: ", p), err) }
    if err := oprot.WriteI64(int64(*p.InReplyToUserId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.inReplyToUserId (18) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 18:inReplyToUserId: ", p), err) }
  }
  return err
}

func (p *TweetInfo) writeField19(oprot thrift.TProtocol) (err error) {
  if p.IsSetRetweetedScreenName() {
    if err := oprot.WriteFieldBegin("retweetedScreenName", thrift.STRING, 19); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 19:retweetedScreenName: ", p), err) }
    if err := oprot.WriteString(string(*p.RetweetedScreenName)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.retweetedScreenName (19) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 19:retweetedScreenName: ", p), err) }
  }
  return err
}

func (p *TweetInfo) writeField20(oprot thrift.TProtocol) (err error) {
  if p.IsSetRetweetedStatusId() {
    if err := oprot.WriteFieldBegin("retweetedStatusId", thrift.I64, 20); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:retweetedStatusId: ", p), err) }
    if err := oprot.WriteI64(int64(*p.RetweetedStatusId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.retweetedStatusId (20) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 20:retweetedStatusId: ", p), err) }
  }
  return err
}

func (p *TweetInfo) writeField21(oprot thrift.TProtocol) (err error) {
  if p.IsSetRetweetedUserId() {
    if err := oprot.WriteFieldBegin("retweetedUserId", thrift.I64, 21); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 21:retweetedUserId: ", p), err) }
    if err := oprot.WriteI64(int64(*p.RetweetedUserId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.retweetedUserId (21) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 21:retweetedUserId: ", p), err) }
  }
  return err
}

func (p *TweetInfo) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TweetInfo(%+v)", *p)
}

