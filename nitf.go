// Autogenerated by Thrift Compiler (0.10.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package goncrete

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

// Attributes:
//  - AlternateURL: This field specifies the URL of the article, if published online. In some
// cases, such as with the New York Times, when this field is present,
// the URL is preferred to the URL field on articles published on
// or after April 02, 2006, as the linked page will have richer content.
//  - ArticleAbstract: This field is a summary of the article, possibly written by
// an indexing service.
//  - AuthorBiography: This field specifies the biography of the author of the article.
// Generally, this field is specified for guest authors, and not for
// regular reporters, except to provide the author's email address.
//  - Banner: The banner field is used to indicate if there has been additional
// information appended to the articles since its publication. Examples of
// banners include ('Correction Appended' and 'Editor's Note Appended').
//  - BiographicalCategoryList: When present, the biographical category field generally indicates that a
// document focuses on a particular individual. The value of the field
// indicates the area or category in which this individual is best known.
// This field is most often defined for Obituaries and Book Reviews.
// 
// <ol>
// <li>Politics and Government (U.S.)</li>
// <li>Books and Magazines <li>Royalty</li>
// </ol>
//  - ColumnName: If the article is part of a regular column, this field specifies the name
// of that column.
// <br>
// Sample Column Names:
// <br>
// <ol>
// <li>World News Briefs</li>
// <li>WEDDINGS</li>
// <li>The Accessories Channel</li>
// </ol>
// 
//  - ColumnNumber: This field specifies the column in which the article starts in the print
// paper. A typical printed page in the paper has six columns numbered from
// right to left. As a consequence most, but not all, of the values for this
// field fall in the range 1-6.
//  - CorrectionDate: This field specifies the date on which a correction was made to the
// article. Generally, if the correction date is specified, the correction
// text will also be specified (and vice versa).
//  - CorrectionText: For articles corrected following publication, this field specifies the
// correction. Generally, if the correction text is specified, the
// correction date will also be specified (and vice versa).
//  - Credit: This field indicates the entity that produced the editorial content of
// this document.
//  - DayOfWeek: This field specifies the day of week on which the article was published.
// <ul>
// <li>Monday</li>
// <li>Tuesday</li>
// <li>Wednesday</li>
// <li>Thursday</li>
// <li>Friday</li>
// <li>Saturday</li>
// <li>Sunday</li>
// </ul>
//  - DescriptorList: The &quot;descriptors&quot; field specifies a list of descriptive terms drawn from
// a normalized controlled vocabulary corresponding to subjects mentioned in
// the article.
// <br>
// Examples Include:
// <ol>
// <li>ECONOMIC CONDITIONS AND TRENDS</li>
// <li>AIRPLANES</li>
// <li>VIOLINS</li>
// </ol>
//  - FeaturePage: The feature page containing this article, such as
// <ul>
// <li>Education Page</li>
// <li>Fashion Page</li>
// </ul>
//  - GeneralOnlineDescriptorList: The &quot;general online descriptors&quot; field specifies a list of descriptors
// that are at a higher level of generality than the other tags associated
// with the article.
// <br>
// Examples Include:
// <ol>
// <li>Surfing</li>
// <li>Venice Biennale</li>
// <li>Ranches</li>
// </ol>
//  - GUID: The GUID field specifies an integer that is guaranteed to be unique for
// every document in the corpus.
//  - Kicker: The kicker is an additional piece of information printed as an
// accompaniment to a news headline.
//  - LeadParagraphList: The &quot;lead Paragraph&quot; field is the lead paragraph of the article.
// Generally this field is populated with the first two paragraphs from the
// article.
//  - LocationList: The &quot;locations&quot; field specifies a list of geographic descriptors drawn
// from a normalized controlled vocabulary that correspond to places
// mentioned in the article.
// <br>
// Examples Include:
// <ol>
// <li>Wellsboro (Pa)</li>
// <li>Kansas City (Kan)</li>
// <li>Park Slope (NYC)</li>
// </ol>
//  - NameList: The &quot;names&quot; field specifies a list of names mentioned in the article.
// <br>
// Examples Include:
// <ol>
// <li>Azza Fahmy</li>
// <li>George C. Izenour</li>
// <li>Chris Schenkel</li>
// </ol>
//  - NewsDesk_: This field specifies the desk in the newsroom that
// produced the article. The desk is related to, but is not the same as the
// section in which the article appears.
//  - NormalizedByline: The Normalized Byline field is the byline normalized to the form (last
// name, first name).
//  - OnlineDescriptorList: This field specifies a list of descriptors from a normalized controlled
// vocabulary that correspond to topics mentioned in the article.
// <br>
// Examples Include:
// <ol>
// <li>Marriages</li>
// <li>Parks and Other Recreation Areas</li>
// <li>Cooking and Cookbooks</li>
// </ol>
//  - OnlineHeadline: This field specifies the headline displayed with the article
// online. Often this differs from the headline used in print.
//  - OnlineLeadParagraph: This field specifies the lead paragraph for the online version.
//  - OnlineLocationList: This field specifies a list of place names that correspond to geographic
// locations mentioned in the article.
// <br>
// Examples Include:
// <ol>
// <li>Hollywood</li>
// <li>Los Angeles</li>
// <li>Arcadia</li>
// </ol>
//  - OnlineOrganizationList: This field specifies a list of organizations that correspond to
// organizations mentioned in the article.
// <br>
// Examples Include:
// <ol>
// <li>Nintendo Company Limited</li>
// <li>Yeshiva University</li>
// <li>Rose Center</li>
// </ol>
//  - OnlinePeople: This field specifies a list of people that correspond to individuals
// mentioned in the article.
// <br>
// Examples Include:
// <ol>
// <li>Lopez, Jennifer</li>
// <li>Joyce, James</li>
// <li>Robinson, Jackie</li>
// </ol>
//  - OnlineSectionList: This field specifies the section(s) in which the online version of the article
// is placed. This may typically be populated from a semicolon (;) delineated list.
//  - OnlineTitleList: This field specifies a list of authored works mentioned in the article.
// <br>
// Examples Include:
// <ol>
// <li>Matchstick Men (Movie)</li>
// <li>Blades of Glory (Movie)</li>
// <li>Bridge and Tunnel (Play)</li>
// </ol>
//  - OrganizationList: This field specifies a list of organization names drawn from a normalized
// controlled vocabulary that correspond to organizations mentioned in the
// article.
// <br>
// Examples Include:
// <ol>
// <li>Circuit City Stores Inc</li>
// <li>Delaware County Community College (Pa)</li>
// <li>CONNECTICUT GRAND OPERA</li>
// </ol>
//  - Page: This field specifies the page of the section in the paper in which the
// article appears. This is not an absolute pagination. An article that
// appears on page 3 in section A occurs in the physical paper before an
// article that occurs on page 1 of section F. The section is encoded in
// the <strong>section</strong> field.
//  - PeopleList: This field specifies a list of people from a normalized controlled
// vocabulary that correspond to individuals mentioned in the article.
// <br>
// Examples Include:
// <ol>
// <li>REAGAN, RONALD WILSON (PRES)</li>
// <li>BEGIN, MENACHEM (PRIME MIN)</li>
// <li>COLLINS, GLENN</li>
// </ol>
//  - PublicationDate: This field specifies the date of the article's publication.
//  - PublicationDayOfMonth: This field specifies the day of the month on which the article was
// published, always in the range 1-31.
//  - PublicationMonth: This field specifies the month on which the article was published in the
// range 1-12 where 1 is January 2 is February etc.
//  - PublicationYear: This field specifies the year in which the article was published. This
// value is in the range 1987-2007 for this collection.
//  - Section: This field specifies the section of the paper in which the article
// appears. This is not the name of the section, but rather a letter or
// number that indicates the section.
//  - SeriesName: If the article is part of a regular series, this field specifies the name
// of that column.
//  - Slug: The slug is a short string that uniquely identifies an article from all
// other articles published on the same day. Please note, however, that
// different articles on different days may have the same slug.
// <ul>
// <li>30other</li>
// <li>12reunion</li>
// </ul>
//  - TaxonomicClassifierList: This field specifies a list of taxonomic classifiers that place this
// article into a hierarchy of articles. The individual terms of each
// taxonomic classifier are separated with the '/' character.
// <br>
// Examples Include:
// <ol>
// <li>Top/Features/Travel/Guides/Destinations/North America/United
// States/Arizona</li>
// <li>Top/News/U.S./Rockies</li>
// <li>Top/Opinion</li>
// </ol>
//  - TitleList: This field specifies a list of authored works that correspond to works
// mentioned in the article.
// <br>
// Examples Include:
// <ol>
// <li>Greystoke: The Legend of Tarzan, Lord of the Apes (Movie)</li>
// <li>Law and Order (TV Program)</li>
// <li>BATTLEFIELD EARTH (BOOK)</li>
// </ol>
//  - TypesOfMaterialList: This field specifies a normalized list of terms describing the general
// editorial category of the article.
// <br>
// Examples Include:
// <ol>
// <li>REVIEW</li>
// <li>OBITUARY</li>
// <li>ANALYSIS</li>
// </ol>
//  - URL: This field specifies the location of the online version of the article. The
// &quot;Alternative Url&quot; field is preferred to this field on articles published
// on or after April 02, 2006, as the linked page will have richer content.
//  - WordCount: This field specifies the number of words in the body of the article,
// including the lead paragraph.
type NITFInfo struct {
  AlternateURL *string `thrift:"alternateURL,1" db:"alternateURL" json:"alternateURL,omitempty"`
  ArticleAbstract *string `thrift:"articleAbstract,2" db:"articleAbstract" json:"articleAbstract,omitempty"`
  AuthorBiography *string `thrift:"authorBiography,3" db:"authorBiography" json:"authorBiography,omitempty"`
  Banner *string `thrift:"banner,4" db:"banner" json:"banner,omitempty"`
  BiographicalCategoryList []string `thrift:"biographicalCategoryList,5" db:"biographicalCategoryList" json:"biographicalCategoryList,omitempty"`
  ColumnName *string `thrift:"columnName,6" db:"columnName" json:"columnName,omitempty"`
  ColumnNumber *int32 `thrift:"columnNumber,7" db:"columnNumber" json:"columnNumber,omitempty"`
  CorrectionDate *int64 `thrift:"correctionDate,8" db:"correctionDate" json:"correctionDate,omitempty"`
  CorrectionText *string `thrift:"correctionText,9" db:"correctionText" json:"correctionText,omitempty"`
  Credit *string `thrift:"credit,10" db:"credit" json:"credit,omitempty"`
  DayOfWeek *string `thrift:"dayOfWeek,11" db:"dayOfWeek" json:"dayOfWeek,omitempty"`
  DescriptorList []string `thrift:"descriptorList,12" db:"descriptorList" json:"descriptorList,omitempty"`
  FeaturePage *string `thrift:"featurePage,13" db:"featurePage" json:"featurePage,omitempty"`
  GeneralOnlineDescriptorList []string `thrift:"generalOnlineDescriptorList,14" db:"generalOnlineDescriptorList" json:"generalOnlineDescriptorList,omitempty"`
  GUID *int32 `thrift:"guid,15" db:"guid" json:"guid,omitempty"`
  Kicker *string `thrift:"kicker,16" db:"kicker" json:"kicker,omitempty"`
  LeadParagraphList []string `thrift:"leadParagraphList,17" db:"leadParagraphList" json:"leadParagraphList,omitempty"`
  LocationList []string `thrift:"locationList,18" db:"locationList" json:"locationList,omitempty"`
  NameList []string `thrift:"nameList,19" db:"nameList" json:"nameList,omitempty"`
  NewsDesk_ *string `thrift:"newsDesk,20" db:"newsDesk" json:"newsDesk,omitempty"`
  NormalizedByline *string `thrift:"normalizedByline,21" db:"normalizedByline" json:"normalizedByline,omitempty"`
  OnlineDescriptorList []string `thrift:"onlineDescriptorList,22" db:"onlineDescriptorList" json:"onlineDescriptorList,omitempty"`
  OnlineHeadline *string `thrift:"onlineHeadline,23" db:"onlineHeadline" json:"onlineHeadline,omitempty"`
  OnlineLeadParagraph *string `thrift:"onlineLeadParagraph,24" db:"onlineLeadParagraph" json:"onlineLeadParagraph,omitempty"`
  OnlineLocationList []string `thrift:"onlineLocationList,25" db:"onlineLocationList" json:"onlineLocationList,omitempty"`
  OnlineOrganizationList []string `thrift:"onlineOrganizationList,26" db:"onlineOrganizationList" json:"onlineOrganizationList,omitempty"`
  OnlinePeople []string `thrift:"onlinePeople,27" db:"onlinePeople" json:"onlinePeople,omitempty"`
  OnlineSectionList []string `thrift:"onlineSectionList,28" db:"onlineSectionList" json:"onlineSectionList,omitempty"`
  OnlineTitleList []string `thrift:"onlineTitleList,29" db:"onlineTitleList" json:"onlineTitleList,omitempty"`
  OrganizationList []string `thrift:"organizationList,30" db:"organizationList" json:"organizationList,omitempty"`
  Page *int32 `thrift:"page,31" db:"page" json:"page,omitempty"`
  PeopleList []string `thrift:"peopleList,32" db:"peopleList" json:"peopleList,omitempty"`
  PublicationDate *int64 `thrift:"publicationDate,33" db:"publicationDate" json:"publicationDate,omitempty"`
  PublicationDayOfMonth *int32 `thrift:"publicationDayOfMonth,34" db:"publicationDayOfMonth" json:"publicationDayOfMonth,omitempty"`
  PublicationMonth *int32 `thrift:"publicationMonth,35" db:"publicationMonth" json:"publicationMonth,omitempty"`
  PublicationYear *int32 `thrift:"publicationYear,36" db:"publicationYear" json:"publicationYear,omitempty"`
  Section *string `thrift:"section,37" db:"section" json:"section,omitempty"`
  SeriesName *string `thrift:"seriesName,38" db:"seriesName" json:"seriesName,omitempty"`
  Slug *string `thrift:"slug,39" db:"slug" json:"slug,omitempty"`
  TaxonomicClassifierList []string `thrift:"taxonomicClassifierList,40" db:"taxonomicClassifierList" json:"taxonomicClassifierList,omitempty"`
  TitleList []string `thrift:"titleList,41" db:"titleList" json:"titleList,omitempty"`
  TypesOfMaterialList []string `thrift:"typesOfMaterialList,42" db:"typesOfMaterialList" json:"typesOfMaterialList,omitempty"`
  URL *string `thrift:"url,43" db:"url" json:"url,omitempty"`
  WordCount *int32 `thrift:"wordCount,44" db:"wordCount" json:"wordCount,omitempty"`
}

func NewNITFInfo() *NITFInfo {
  return &NITFInfo{}
}

var NITFInfo_AlternateURL_DEFAULT string
func (p *NITFInfo) GetAlternateURL() string {
  if !p.IsSetAlternateURL() {
    return NITFInfo_AlternateURL_DEFAULT
  }
return *p.AlternateURL
}
var NITFInfo_ArticleAbstract_DEFAULT string
func (p *NITFInfo) GetArticleAbstract() string {
  if !p.IsSetArticleAbstract() {
    return NITFInfo_ArticleAbstract_DEFAULT
  }
return *p.ArticleAbstract
}
var NITFInfo_AuthorBiography_DEFAULT string
func (p *NITFInfo) GetAuthorBiography() string {
  if !p.IsSetAuthorBiography() {
    return NITFInfo_AuthorBiography_DEFAULT
  }
return *p.AuthorBiography
}
var NITFInfo_Banner_DEFAULT string
func (p *NITFInfo) GetBanner() string {
  if !p.IsSetBanner() {
    return NITFInfo_Banner_DEFAULT
  }
return *p.Banner
}
var NITFInfo_BiographicalCategoryList_DEFAULT []string

func (p *NITFInfo) GetBiographicalCategoryList() []string {
  return p.BiographicalCategoryList
}
var NITFInfo_ColumnName_DEFAULT string
func (p *NITFInfo) GetColumnName() string {
  if !p.IsSetColumnName() {
    return NITFInfo_ColumnName_DEFAULT
  }
return *p.ColumnName
}
var NITFInfo_ColumnNumber_DEFAULT int32
func (p *NITFInfo) GetColumnNumber() int32 {
  if !p.IsSetColumnNumber() {
    return NITFInfo_ColumnNumber_DEFAULT
  }
return *p.ColumnNumber
}
var NITFInfo_CorrectionDate_DEFAULT int64
func (p *NITFInfo) GetCorrectionDate() int64 {
  if !p.IsSetCorrectionDate() {
    return NITFInfo_CorrectionDate_DEFAULT
  }
return *p.CorrectionDate
}
var NITFInfo_CorrectionText_DEFAULT string
func (p *NITFInfo) GetCorrectionText() string {
  if !p.IsSetCorrectionText() {
    return NITFInfo_CorrectionText_DEFAULT
  }
return *p.CorrectionText
}
var NITFInfo_Credit_DEFAULT string
func (p *NITFInfo) GetCredit() string {
  if !p.IsSetCredit() {
    return NITFInfo_Credit_DEFAULT
  }
return *p.Credit
}
var NITFInfo_DayOfWeek_DEFAULT string
func (p *NITFInfo) GetDayOfWeek() string {
  if !p.IsSetDayOfWeek() {
    return NITFInfo_DayOfWeek_DEFAULT
  }
return *p.DayOfWeek
}
var NITFInfo_DescriptorList_DEFAULT []string

func (p *NITFInfo) GetDescriptorList() []string {
  return p.DescriptorList
}
var NITFInfo_FeaturePage_DEFAULT string
func (p *NITFInfo) GetFeaturePage() string {
  if !p.IsSetFeaturePage() {
    return NITFInfo_FeaturePage_DEFAULT
  }
return *p.FeaturePage
}
var NITFInfo_GeneralOnlineDescriptorList_DEFAULT []string

func (p *NITFInfo) GetGeneralOnlineDescriptorList() []string {
  return p.GeneralOnlineDescriptorList
}
var NITFInfo_GUID_DEFAULT int32
func (p *NITFInfo) GetGUID() int32 {
  if !p.IsSetGUID() {
    return NITFInfo_GUID_DEFAULT
  }
return *p.GUID
}
var NITFInfo_Kicker_DEFAULT string
func (p *NITFInfo) GetKicker() string {
  if !p.IsSetKicker() {
    return NITFInfo_Kicker_DEFAULT
  }
return *p.Kicker
}
var NITFInfo_LeadParagraphList_DEFAULT []string

func (p *NITFInfo) GetLeadParagraphList() []string {
  return p.LeadParagraphList
}
var NITFInfo_LocationList_DEFAULT []string

func (p *NITFInfo) GetLocationList() []string {
  return p.LocationList
}
var NITFInfo_NameList_DEFAULT []string

func (p *NITFInfo) GetNameList() []string {
  return p.NameList
}
var NITFInfo_NewsDesk__DEFAULT string
func (p *NITFInfo) GetNewsDesk_() string {
  if !p.IsSetNewsDesk_() {
    return NITFInfo_NewsDesk__DEFAULT
  }
return *p.NewsDesk_
}
var NITFInfo_NormalizedByline_DEFAULT string
func (p *NITFInfo) GetNormalizedByline() string {
  if !p.IsSetNormalizedByline() {
    return NITFInfo_NormalizedByline_DEFAULT
  }
return *p.NormalizedByline
}
var NITFInfo_OnlineDescriptorList_DEFAULT []string

func (p *NITFInfo) GetOnlineDescriptorList() []string {
  return p.OnlineDescriptorList
}
var NITFInfo_OnlineHeadline_DEFAULT string
func (p *NITFInfo) GetOnlineHeadline() string {
  if !p.IsSetOnlineHeadline() {
    return NITFInfo_OnlineHeadline_DEFAULT
  }
return *p.OnlineHeadline
}
var NITFInfo_OnlineLeadParagraph_DEFAULT string
func (p *NITFInfo) GetOnlineLeadParagraph() string {
  if !p.IsSetOnlineLeadParagraph() {
    return NITFInfo_OnlineLeadParagraph_DEFAULT
  }
return *p.OnlineLeadParagraph
}
var NITFInfo_OnlineLocationList_DEFAULT []string

func (p *NITFInfo) GetOnlineLocationList() []string {
  return p.OnlineLocationList
}
var NITFInfo_OnlineOrganizationList_DEFAULT []string

func (p *NITFInfo) GetOnlineOrganizationList() []string {
  return p.OnlineOrganizationList
}
var NITFInfo_OnlinePeople_DEFAULT []string

func (p *NITFInfo) GetOnlinePeople() []string {
  return p.OnlinePeople
}
var NITFInfo_OnlineSectionList_DEFAULT []string

func (p *NITFInfo) GetOnlineSectionList() []string {
  return p.OnlineSectionList
}
var NITFInfo_OnlineTitleList_DEFAULT []string

func (p *NITFInfo) GetOnlineTitleList() []string {
  return p.OnlineTitleList
}
var NITFInfo_OrganizationList_DEFAULT []string

func (p *NITFInfo) GetOrganizationList() []string {
  return p.OrganizationList
}
var NITFInfo_Page_DEFAULT int32
func (p *NITFInfo) GetPage() int32 {
  if !p.IsSetPage() {
    return NITFInfo_Page_DEFAULT
  }
return *p.Page
}
var NITFInfo_PeopleList_DEFAULT []string

func (p *NITFInfo) GetPeopleList() []string {
  return p.PeopleList
}
var NITFInfo_PublicationDate_DEFAULT int64
func (p *NITFInfo) GetPublicationDate() int64 {
  if !p.IsSetPublicationDate() {
    return NITFInfo_PublicationDate_DEFAULT
  }
return *p.PublicationDate
}
var NITFInfo_PublicationDayOfMonth_DEFAULT int32
func (p *NITFInfo) GetPublicationDayOfMonth() int32 {
  if !p.IsSetPublicationDayOfMonth() {
    return NITFInfo_PublicationDayOfMonth_DEFAULT
  }
return *p.PublicationDayOfMonth
}
var NITFInfo_PublicationMonth_DEFAULT int32
func (p *NITFInfo) GetPublicationMonth() int32 {
  if !p.IsSetPublicationMonth() {
    return NITFInfo_PublicationMonth_DEFAULT
  }
return *p.PublicationMonth
}
var NITFInfo_PublicationYear_DEFAULT int32
func (p *NITFInfo) GetPublicationYear() int32 {
  if !p.IsSetPublicationYear() {
    return NITFInfo_PublicationYear_DEFAULT
  }
return *p.PublicationYear
}
var NITFInfo_Section_DEFAULT string
func (p *NITFInfo) GetSection() string {
  if !p.IsSetSection() {
    return NITFInfo_Section_DEFAULT
  }
return *p.Section
}
var NITFInfo_SeriesName_DEFAULT string
func (p *NITFInfo) GetSeriesName() string {
  if !p.IsSetSeriesName() {
    return NITFInfo_SeriesName_DEFAULT
  }
return *p.SeriesName
}
var NITFInfo_Slug_DEFAULT string
func (p *NITFInfo) GetSlug() string {
  if !p.IsSetSlug() {
    return NITFInfo_Slug_DEFAULT
  }
return *p.Slug
}
var NITFInfo_TaxonomicClassifierList_DEFAULT []string

func (p *NITFInfo) GetTaxonomicClassifierList() []string {
  return p.TaxonomicClassifierList
}
var NITFInfo_TitleList_DEFAULT []string

func (p *NITFInfo) GetTitleList() []string {
  return p.TitleList
}
var NITFInfo_TypesOfMaterialList_DEFAULT []string

func (p *NITFInfo) GetTypesOfMaterialList() []string {
  return p.TypesOfMaterialList
}
var NITFInfo_URL_DEFAULT string
func (p *NITFInfo) GetURL() string {
  if !p.IsSetURL() {
    return NITFInfo_URL_DEFAULT
  }
return *p.URL
}
var NITFInfo_WordCount_DEFAULT int32
func (p *NITFInfo) GetWordCount() int32 {
  if !p.IsSetWordCount() {
    return NITFInfo_WordCount_DEFAULT
  }
return *p.WordCount
}
func (p *NITFInfo) IsSetAlternateURL() bool {
  return p.AlternateURL != nil
}

func (p *NITFInfo) IsSetArticleAbstract() bool {
  return p.ArticleAbstract != nil
}

func (p *NITFInfo) IsSetAuthorBiography() bool {
  return p.AuthorBiography != nil
}

func (p *NITFInfo) IsSetBanner() bool {
  return p.Banner != nil
}

func (p *NITFInfo) IsSetBiographicalCategoryList() bool {
  return p.BiographicalCategoryList != nil
}

func (p *NITFInfo) IsSetColumnName() bool {
  return p.ColumnName != nil
}

func (p *NITFInfo) IsSetColumnNumber() bool {
  return p.ColumnNumber != nil
}

func (p *NITFInfo) IsSetCorrectionDate() bool {
  return p.CorrectionDate != nil
}

func (p *NITFInfo) IsSetCorrectionText() bool {
  return p.CorrectionText != nil
}

func (p *NITFInfo) IsSetCredit() bool {
  return p.Credit != nil
}

func (p *NITFInfo) IsSetDayOfWeek() bool {
  return p.DayOfWeek != nil
}

func (p *NITFInfo) IsSetDescriptorList() bool {
  return p.DescriptorList != nil
}

func (p *NITFInfo) IsSetFeaturePage() bool {
  return p.FeaturePage != nil
}

func (p *NITFInfo) IsSetGeneralOnlineDescriptorList() bool {
  return p.GeneralOnlineDescriptorList != nil
}

func (p *NITFInfo) IsSetGUID() bool {
  return p.GUID != nil
}

func (p *NITFInfo) IsSetKicker() bool {
  return p.Kicker != nil
}

func (p *NITFInfo) IsSetLeadParagraphList() bool {
  return p.LeadParagraphList != nil
}

func (p *NITFInfo) IsSetLocationList() bool {
  return p.LocationList != nil
}

func (p *NITFInfo) IsSetNameList() bool {
  return p.NameList != nil
}

func (p *NITFInfo) IsSetNewsDesk_() bool {
  return p.NewsDesk_ != nil
}

func (p *NITFInfo) IsSetNormalizedByline() bool {
  return p.NormalizedByline != nil
}

func (p *NITFInfo) IsSetOnlineDescriptorList() bool {
  return p.OnlineDescriptorList != nil
}

func (p *NITFInfo) IsSetOnlineHeadline() bool {
  return p.OnlineHeadline != nil
}

func (p *NITFInfo) IsSetOnlineLeadParagraph() bool {
  return p.OnlineLeadParagraph != nil
}

func (p *NITFInfo) IsSetOnlineLocationList() bool {
  return p.OnlineLocationList != nil
}

func (p *NITFInfo) IsSetOnlineOrganizationList() bool {
  return p.OnlineOrganizationList != nil
}

func (p *NITFInfo) IsSetOnlinePeople() bool {
  return p.OnlinePeople != nil
}

func (p *NITFInfo) IsSetOnlineSectionList() bool {
  return p.OnlineSectionList != nil
}

func (p *NITFInfo) IsSetOnlineTitleList() bool {
  return p.OnlineTitleList != nil
}

func (p *NITFInfo) IsSetOrganizationList() bool {
  return p.OrganizationList != nil
}

func (p *NITFInfo) IsSetPage() bool {
  return p.Page != nil
}

func (p *NITFInfo) IsSetPeopleList() bool {
  return p.PeopleList != nil
}

func (p *NITFInfo) IsSetPublicationDate() bool {
  return p.PublicationDate != nil
}

func (p *NITFInfo) IsSetPublicationDayOfMonth() bool {
  return p.PublicationDayOfMonth != nil
}

func (p *NITFInfo) IsSetPublicationMonth() bool {
  return p.PublicationMonth != nil
}

func (p *NITFInfo) IsSetPublicationYear() bool {
  return p.PublicationYear != nil
}

func (p *NITFInfo) IsSetSection() bool {
  return p.Section != nil
}

func (p *NITFInfo) IsSetSeriesName() bool {
  return p.SeriesName != nil
}

func (p *NITFInfo) IsSetSlug() bool {
  return p.Slug != nil
}

func (p *NITFInfo) IsSetTaxonomicClassifierList() bool {
  return p.TaxonomicClassifierList != nil
}

func (p *NITFInfo) IsSetTitleList() bool {
  return p.TitleList != nil
}

func (p *NITFInfo) IsSetTypesOfMaterialList() bool {
  return p.TypesOfMaterialList != nil
}

func (p *NITFInfo) IsSetURL() bool {
  return p.URL != nil
}

func (p *NITFInfo) IsSetWordCount() bool {
  return p.WordCount != nil
}

func (p *NITFInfo) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    case 7:
      if err := p.ReadField7(iprot); err != nil {
        return err
      }
    case 8:
      if err := p.ReadField8(iprot); err != nil {
        return err
      }
    case 9:
      if err := p.ReadField9(iprot); err != nil {
        return err
      }
    case 10:
      if err := p.ReadField10(iprot); err != nil {
        return err
      }
    case 11:
      if err := p.ReadField11(iprot); err != nil {
        return err
      }
    case 12:
      if err := p.ReadField12(iprot); err != nil {
        return err
      }
    case 13:
      if err := p.ReadField13(iprot); err != nil {
        return err
      }
    case 14:
      if err := p.ReadField14(iprot); err != nil {
        return err
      }
    case 15:
      if err := p.ReadField15(iprot); err != nil {
        return err
      }
    case 16:
      if err := p.ReadField16(iprot); err != nil {
        return err
      }
    case 17:
      if err := p.ReadField17(iprot); err != nil {
        return err
      }
    case 18:
      if err := p.ReadField18(iprot); err != nil {
        return err
      }
    case 19:
      if err := p.ReadField19(iprot); err != nil {
        return err
      }
    case 20:
      if err := p.ReadField20(iprot); err != nil {
        return err
      }
    case 21:
      if err := p.ReadField21(iprot); err != nil {
        return err
      }
    case 22:
      if err := p.ReadField22(iprot); err != nil {
        return err
      }
    case 23:
      if err := p.ReadField23(iprot); err != nil {
        return err
      }
    case 24:
      if err := p.ReadField24(iprot); err != nil {
        return err
      }
    case 25:
      if err := p.ReadField25(iprot); err != nil {
        return err
      }
    case 26:
      if err := p.ReadField26(iprot); err != nil {
        return err
      }
    case 27:
      if err := p.ReadField27(iprot); err != nil {
        return err
      }
    case 28:
      if err := p.ReadField28(iprot); err != nil {
        return err
      }
    case 29:
      if err := p.ReadField29(iprot); err != nil {
        return err
      }
    case 30:
      if err := p.ReadField30(iprot); err != nil {
        return err
      }
    case 31:
      if err := p.ReadField31(iprot); err != nil {
        return err
      }
    case 32:
      if err := p.ReadField32(iprot); err != nil {
        return err
      }
    case 33:
      if err := p.ReadField33(iprot); err != nil {
        return err
      }
    case 34:
      if err := p.ReadField34(iprot); err != nil {
        return err
      }
    case 35:
      if err := p.ReadField35(iprot); err != nil {
        return err
      }
    case 36:
      if err := p.ReadField36(iprot); err != nil {
        return err
      }
    case 37:
      if err := p.ReadField37(iprot); err != nil {
        return err
      }
    case 38:
      if err := p.ReadField38(iprot); err != nil {
        return err
      }
    case 39:
      if err := p.ReadField39(iprot); err != nil {
        return err
      }
    case 40:
      if err := p.ReadField40(iprot); err != nil {
        return err
      }
    case 41:
      if err := p.ReadField41(iprot); err != nil {
        return err
      }
    case 42:
      if err := p.ReadField42(iprot); err != nil {
        return err
      }
    case 43:
      if err := p.ReadField43(iprot); err != nil {
        return err
      }
    case 44:
      if err := p.ReadField44(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *NITFInfo)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.AlternateURL = &v
}
  return nil
}

func (p *NITFInfo)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ArticleAbstract = &v
}
  return nil
}

func (p *NITFInfo)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.AuthorBiography = &v
}
  return nil
}

func (p *NITFInfo)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Banner = &v
}
  return nil
}

func (p *NITFInfo)  ReadField5(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.BiographicalCategoryList =  tSlice
  for i := 0; i < size; i ++ {
var _elem0 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem0 = v
}
    p.BiographicalCategoryList = append(p.BiographicalCategoryList, _elem0)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *NITFInfo)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.ColumnName = &v
}
  return nil
}

func (p *NITFInfo)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.ColumnNumber = &v
}
  return nil
}

func (p *NITFInfo)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.CorrectionDate = &v
}
  return nil
}

func (p *NITFInfo)  ReadField9(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.CorrectionText = &v
}
  return nil
}

func (p *NITFInfo)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.Credit = &v
}
  return nil
}

func (p *NITFInfo)  ReadField11(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.DayOfWeek = &v
}
  return nil
}

func (p *NITFInfo)  ReadField12(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.DescriptorList =  tSlice
  for i := 0; i < size; i ++ {
var _elem1 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem1 = v
}
    p.DescriptorList = append(p.DescriptorList, _elem1)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *NITFInfo)  ReadField13(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 13: ", err)
} else {
  p.FeaturePage = &v
}
  return nil
}

func (p *NITFInfo)  ReadField14(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.GeneralOnlineDescriptorList =  tSlice
  for i := 0; i < size; i ++ {
var _elem2 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem2 = v
}
    p.GeneralOnlineDescriptorList = append(p.GeneralOnlineDescriptorList, _elem2)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *NITFInfo)  ReadField15(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 15: ", err)
} else {
  p.GUID = &v
}
  return nil
}

func (p *NITFInfo)  ReadField16(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 16: ", err)
} else {
  p.Kicker = &v
}
  return nil
}

func (p *NITFInfo)  ReadField17(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.LeadParagraphList =  tSlice
  for i := 0; i < size; i ++ {
var _elem3 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem3 = v
}
    p.LeadParagraphList = append(p.LeadParagraphList, _elem3)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *NITFInfo)  ReadField18(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.LocationList =  tSlice
  for i := 0; i < size; i ++ {
var _elem4 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem4 = v
}
    p.LocationList = append(p.LocationList, _elem4)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *NITFInfo)  ReadField19(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.NameList =  tSlice
  for i := 0; i < size; i ++ {
var _elem5 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem5 = v
}
    p.NameList = append(p.NameList, _elem5)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *NITFInfo)  ReadField20(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 20: ", err)
} else {
  p.NewsDesk_ = &v
}
  return nil
}

func (p *NITFInfo)  ReadField21(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 21: ", err)
} else {
  p.NormalizedByline = &v
}
  return nil
}

func (p *NITFInfo)  ReadField22(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.OnlineDescriptorList =  tSlice
  for i := 0; i < size; i ++ {
var _elem6 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem6 = v
}
    p.OnlineDescriptorList = append(p.OnlineDescriptorList, _elem6)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *NITFInfo)  ReadField23(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 23: ", err)
} else {
  p.OnlineHeadline = &v
}
  return nil
}

func (p *NITFInfo)  ReadField24(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 24: ", err)
} else {
  p.OnlineLeadParagraph = &v
}
  return nil
}

func (p *NITFInfo)  ReadField25(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.OnlineLocationList =  tSlice
  for i := 0; i < size; i ++ {
var _elem7 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem7 = v
}
    p.OnlineLocationList = append(p.OnlineLocationList, _elem7)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *NITFInfo)  ReadField26(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.OnlineOrganizationList =  tSlice
  for i := 0; i < size; i ++ {
var _elem8 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem8 = v
}
    p.OnlineOrganizationList = append(p.OnlineOrganizationList, _elem8)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *NITFInfo)  ReadField27(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.OnlinePeople =  tSlice
  for i := 0; i < size; i ++ {
var _elem9 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem9 = v
}
    p.OnlinePeople = append(p.OnlinePeople, _elem9)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *NITFInfo)  ReadField28(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.OnlineSectionList =  tSlice
  for i := 0; i < size; i ++ {
var _elem10 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem10 = v
}
    p.OnlineSectionList = append(p.OnlineSectionList, _elem10)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *NITFInfo)  ReadField29(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.OnlineTitleList =  tSlice
  for i := 0; i < size; i ++ {
var _elem11 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem11 = v
}
    p.OnlineTitleList = append(p.OnlineTitleList, _elem11)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *NITFInfo)  ReadField30(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.OrganizationList =  tSlice
  for i := 0; i < size; i ++ {
var _elem12 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem12 = v
}
    p.OrganizationList = append(p.OrganizationList, _elem12)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *NITFInfo)  ReadField31(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 31: ", err)
} else {
  p.Page = &v
}
  return nil
}

func (p *NITFInfo)  ReadField32(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.PeopleList =  tSlice
  for i := 0; i < size; i ++ {
var _elem13 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem13 = v
}
    p.PeopleList = append(p.PeopleList, _elem13)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *NITFInfo)  ReadField33(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 33: ", err)
} else {
  p.PublicationDate = &v
}
  return nil
}

func (p *NITFInfo)  ReadField34(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 34: ", err)
} else {
  p.PublicationDayOfMonth = &v
}
  return nil
}

func (p *NITFInfo)  ReadField35(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 35: ", err)
} else {
  p.PublicationMonth = &v
}
  return nil
}

func (p *NITFInfo)  ReadField36(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 36: ", err)
} else {
  p.PublicationYear = &v
}
  return nil
}

func (p *NITFInfo)  ReadField37(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 37: ", err)
} else {
  p.Section = &v
}
  return nil
}

func (p *NITFInfo)  ReadField38(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 38: ", err)
} else {
  p.SeriesName = &v
}
  return nil
}

func (p *NITFInfo)  ReadField39(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 39: ", err)
} else {
  p.Slug = &v
}
  return nil
}

func (p *NITFInfo)  ReadField40(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.TaxonomicClassifierList =  tSlice
  for i := 0; i < size; i ++ {
var _elem14 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem14 = v
}
    p.TaxonomicClassifierList = append(p.TaxonomicClassifierList, _elem14)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *NITFInfo)  ReadField41(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.TitleList =  tSlice
  for i := 0; i < size; i ++ {
var _elem15 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem15 = v
}
    p.TitleList = append(p.TitleList, _elem15)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *NITFInfo)  ReadField42(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.TypesOfMaterialList =  tSlice
  for i := 0; i < size; i ++ {
var _elem16 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem16 = v
}
    p.TypesOfMaterialList = append(p.TypesOfMaterialList, _elem16)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *NITFInfo)  ReadField43(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 43: ", err)
} else {
  p.URL = &v
}
  return nil
}

func (p *NITFInfo)  ReadField44(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 44: ", err)
} else {
  p.WordCount = &v
}
  return nil
}

func (p *NITFInfo) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("NITFInfo"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField11(oprot); err != nil { return err }
    if err := p.writeField12(oprot); err != nil { return err }
    if err := p.writeField13(oprot); err != nil { return err }
    if err := p.writeField14(oprot); err != nil { return err }
    if err := p.writeField15(oprot); err != nil { return err }
    if err := p.writeField16(oprot); err != nil { return err }
    if err := p.writeField17(oprot); err != nil { return err }
    if err := p.writeField18(oprot); err != nil { return err }
    if err := p.writeField19(oprot); err != nil { return err }
    if err := p.writeField20(oprot); err != nil { return err }
    if err := p.writeField21(oprot); err != nil { return err }
    if err := p.writeField22(oprot); err != nil { return err }
    if err := p.writeField23(oprot); err != nil { return err }
    if err := p.writeField24(oprot); err != nil { return err }
    if err := p.writeField25(oprot); err != nil { return err }
    if err := p.writeField26(oprot); err != nil { return err }
    if err := p.writeField27(oprot); err != nil { return err }
    if err := p.writeField28(oprot); err != nil { return err }
    if err := p.writeField29(oprot); err != nil { return err }
    if err := p.writeField30(oprot); err != nil { return err }
    if err := p.writeField31(oprot); err != nil { return err }
    if err := p.writeField32(oprot); err != nil { return err }
    if err := p.writeField33(oprot); err != nil { return err }
    if err := p.writeField34(oprot); err != nil { return err }
    if err := p.writeField35(oprot); err != nil { return err }
    if err := p.writeField36(oprot); err != nil { return err }
    if err := p.writeField37(oprot); err != nil { return err }
    if err := p.writeField38(oprot); err != nil { return err }
    if err := p.writeField39(oprot); err != nil { return err }
    if err := p.writeField40(oprot); err != nil { return err }
    if err := p.writeField41(oprot); err != nil { return err }
    if err := p.writeField42(oprot); err != nil { return err }
    if err := p.writeField43(oprot); err != nil { return err }
    if err := p.writeField44(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *NITFInfo) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetAlternateURL() {
    if err := oprot.WriteFieldBegin("alternateURL", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:alternateURL: ", p), err) }
    if err := oprot.WriteString(string(*p.AlternateURL)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.alternateURL (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:alternateURL: ", p), err) }
  }
  return err
}

func (p *NITFInfo) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetArticleAbstract() {
    if err := oprot.WriteFieldBegin("articleAbstract", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:articleAbstract: ", p), err) }
    if err := oprot.WriteString(string(*p.ArticleAbstract)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.articleAbstract (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:articleAbstract: ", p), err) }
  }
  return err
}

func (p *NITFInfo) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetAuthorBiography() {
    if err := oprot.WriteFieldBegin("authorBiography", thrift.STRING, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:authorBiography: ", p), err) }
    if err := oprot.WriteString(string(*p.AuthorBiography)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.authorBiography (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:authorBiography: ", p), err) }
  }
  return err
}

func (p *NITFInfo) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetBanner() {
    if err := oprot.WriteFieldBegin("banner", thrift.STRING, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:banner: ", p), err) }
    if err := oprot.WriteString(string(*p.Banner)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.banner (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:banner: ", p), err) }
  }
  return err
}

func (p *NITFInfo) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetBiographicalCategoryList() {
    if err := oprot.WriteFieldBegin("biographicalCategoryList", thrift.LIST, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:biographicalCategoryList: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRING, len(p.BiographicalCategoryList)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.BiographicalCategoryList {
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:biographicalCategoryList: ", p), err) }
  }
  return err
}

func (p *NITFInfo) writeField6(oprot thrift.TProtocol) (err error) {
  if p.IsSetColumnName() {
    if err := oprot.WriteFieldBegin("columnName", thrift.STRING, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:columnName: ", p), err) }
    if err := oprot.WriteString(string(*p.ColumnName)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.columnName (6) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:columnName: ", p), err) }
  }
  return err
}

func (p *NITFInfo) writeField7(oprot thrift.TProtocol) (err error) {
  if p.IsSetColumnNumber() {
    if err := oprot.WriteFieldBegin("columnNumber", thrift.I32, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:columnNumber: ", p), err) }
    if err := oprot.WriteI32(int32(*p.ColumnNumber)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.columnNumber (7) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:columnNumber: ", p), err) }
  }
  return err
}

func (p *NITFInfo) writeField8(oprot thrift.TProtocol) (err error) {
  if p.IsSetCorrectionDate() {
    if err := oprot.WriteFieldBegin("correctionDate", thrift.I64, 8); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:correctionDate: ", p), err) }
    if err := oprot.WriteI64(int64(*p.CorrectionDate)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.correctionDate (8) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 8:correctionDate: ", p), err) }
  }
  return err
}

func (p *NITFInfo) writeField9(oprot thrift.TProtocol) (err error) {
  if p.IsSetCorrectionText() {
    if err := oprot.WriteFieldBegin("correctionText", thrift.STRING, 9); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:correctionText: ", p), err) }
    if err := oprot.WriteString(string(*p.CorrectionText)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.correctionText (9) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 9:correctionText: ", p), err) }
  }
  return err
}

func (p *NITFInfo) writeField10(oprot thrift.TProtocol) (err error) {
  if p.IsSetCredit() {
    if err := oprot.WriteFieldBegin("credit", thrift.STRING, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:credit: ", p), err) }
    if err := oprot.WriteString(string(*p.Credit)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.credit (10) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:credit: ", p), err) }
  }
  return err
}

func (p *NITFInfo) writeField11(oprot thrift.TProtocol) (err error) {
  if p.IsSetDayOfWeek() {
    if err := oprot.WriteFieldBegin("dayOfWeek", thrift.STRING, 11); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:dayOfWeek: ", p), err) }
    if err := oprot.WriteString(string(*p.DayOfWeek)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.dayOfWeek (11) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 11:dayOfWeek: ", p), err) }
  }
  return err
}

func (p *NITFInfo) writeField12(oprot thrift.TProtocol) (err error) {
  if p.IsSetDescriptorList() {
    if err := oprot.WriteFieldBegin("descriptorList", thrift.LIST, 12); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:descriptorList: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRING, len(p.DescriptorList)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.DescriptorList {
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 12:descriptorList: ", p), err) }
  }
  return err
}

func (p *NITFInfo) writeField13(oprot thrift.TProtocol) (err error) {
  if p.IsSetFeaturePage() {
    if err := oprot.WriteFieldBegin("featurePage", thrift.STRING, 13); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:featurePage: ", p), err) }
    if err := oprot.WriteString(string(*p.FeaturePage)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.featurePage (13) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 13:featurePage: ", p), err) }
  }
  return err
}

func (p *NITFInfo) writeField14(oprot thrift.TProtocol) (err error) {
  if p.IsSetGeneralOnlineDescriptorList() {
    if err := oprot.WriteFieldBegin("generalOnlineDescriptorList", thrift.LIST, 14); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:generalOnlineDescriptorList: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRING, len(p.GeneralOnlineDescriptorList)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.GeneralOnlineDescriptorList {
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 14:generalOnlineDescriptorList: ", p), err) }
  }
  return err
}

func (p *NITFInfo) writeField15(oprot thrift.TProtocol) (err error) {
  if p.IsSetGUID() {
    if err := oprot.WriteFieldBegin("guid", thrift.I32, 15); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:guid: ", p), err) }
    if err := oprot.WriteI32(int32(*p.GUID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.guid (15) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 15:guid: ", p), err) }
  }
  return err
}

func (p *NITFInfo) writeField16(oprot thrift.TProtocol) (err error) {
  if p.IsSetKicker() {
    if err := oprot.WriteFieldBegin("kicker", thrift.STRING, 16); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:kicker: ", p), err) }
    if err := oprot.WriteString(string(*p.Kicker)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.kicker (16) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 16:kicker: ", p), err) }
  }
  return err
}

func (p *NITFInfo) writeField17(oprot thrift.TProtocol) (err error) {
  if p.IsSetLeadParagraphList() {
    if err := oprot.WriteFieldBegin("leadParagraphList", thrift.LIST, 17); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 17:leadParagraphList: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRING, len(p.LeadParagraphList)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.LeadParagraphList {
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 17:leadParagraphList: ", p), err) }
  }
  return err
}

func (p *NITFInfo) writeField18(oprot thrift.TProtocol) (err error) {
  if p.IsSetLocationList() {
    if err := oprot.WriteFieldBegin("locationList", thrift.LIST, 18); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 18:locationList: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRING, len(p.LocationList)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.LocationList {
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 18:locationList: ", p), err) }
  }
  return err
}

func (p *NITFInfo) writeField19(oprot thrift.TProtocol) (err error) {
  if p.IsSetNameList() {
    if err := oprot.WriteFieldBegin("nameList", thrift.LIST, 19); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 19:nameList: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRING, len(p.NameList)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.NameList {
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 19:nameList: ", p), err) }
  }
  return err
}

func (p *NITFInfo) writeField20(oprot thrift.TProtocol) (err error) {
  if p.IsSetNewsDesk_() {
    if err := oprot.WriteFieldBegin("newsDesk", thrift.STRING, 20); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:newsDesk: ", p), err) }
    if err := oprot.WriteString(string(*p.NewsDesk_)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.newsDesk (20) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 20:newsDesk: ", p), err) }
  }
  return err
}

func (p *NITFInfo) writeField21(oprot thrift.TProtocol) (err error) {
  if p.IsSetNormalizedByline() {
    if err := oprot.WriteFieldBegin("normalizedByline", thrift.STRING, 21); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 21:normalizedByline: ", p), err) }
    if err := oprot.WriteString(string(*p.NormalizedByline)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.normalizedByline (21) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 21:normalizedByline: ", p), err) }
  }
  return err
}

func (p *NITFInfo) writeField22(oprot thrift.TProtocol) (err error) {
  if p.IsSetOnlineDescriptorList() {
    if err := oprot.WriteFieldBegin("onlineDescriptorList", thrift.LIST, 22); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 22:onlineDescriptorList: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRING, len(p.OnlineDescriptorList)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.OnlineDescriptorList {
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 22:onlineDescriptorList: ", p), err) }
  }
  return err
}

func (p *NITFInfo) writeField23(oprot thrift.TProtocol) (err error) {
  if p.IsSetOnlineHeadline() {
    if err := oprot.WriteFieldBegin("onlineHeadline", thrift.STRING, 23); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 23:onlineHeadline: ", p), err) }
    if err := oprot.WriteString(string(*p.OnlineHeadline)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.onlineHeadline (23) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 23:onlineHeadline: ", p), err) }
  }
  return err
}

func (p *NITFInfo) writeField24(oprot thrift.TProtocol) (err error) {
  if p.IsSetOnlineLeadParagraph() {
    if err := oprot.WriteFieldBegin("onlineLeadParagraph", thrift.STRING, 24); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 24:onlineLeadParagraph: ", p), err) }
    if err := oprot.WriteString(string(*p.OnlineLeadParagraph)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.onlineLeadParagraph (24) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 24:onlineLeadParagraph: ", p), err) }
  }
  return err
}

func (p *NITFInfo) writeField25(oprot thrift.TProtocol) (err error) {
  if p.IsSetOnlineLocationList() {
    if err := oprot.WriteFieldBegin("onlineLocationList", thrift.LIST, 25); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 25:onlineLocationList: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRING, len(p.OnlineLocationList)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.OnlineLocationList {
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 25:onlineLocationList: ", p), err) }
  }
  return err
}

func (p *NITFInfo) writeField26(oprot thrift.TProtocol) (err error) {
  if p.IsSetOnlineOrganizationList() {
    if err := oprot.WriteFieldBegin("onlineOrganizationList", thrift.LIST, 26); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 26:onlineOrganizationList: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRING, len(p.OnlineOrganizationList)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.OnlineOrganizationList {
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 26:onlineOrganizationList: ", p), err) }
  }
  return err
}

func (p *NITFInfo) writeField27(oprot thrift.TProtocol) (err error) {
  if p.IsSetOnlinePeople() {
    if err := oprot.WriteFieldBegin("onlinePeople", thrift.LIST, 27); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 27:onlinePeople: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRING, len(p.OnlinePeople)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.OnlinePeople {
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 27:onlinePeople: ", p), err) }
  }
  return err
}

func (p *NITFInfo) writeField28(oprot thrift.TProtocol) (err error) {
  if p.IsSetOnlineSectionList() {
    if err := oprot.WriteFieldBegin("onlineSectionList", thrift.LIST, 28); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 28:onlineSectionList: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRING, len(p.OnlineSectionList)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.OnlineSectionList {
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 28:onlineSectionList: ", p), err) }
  }
  return err
}

func (p *NITFInfo) writeField29(oprot thrift.TProtocol) (err error) {
  if p.IsSetOnlineTitleList() {
    if err := oprot.WriteFieldBegin("onlineTitleList", thrift.LIST, 29); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 29:onlineTitleList: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRING, len(p.OnlineTitleList)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.OnlineTitleList {
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 29:onlineTitleList: ", p), err) }
  }
  return err
}

func (p *NITFInfo) writeField30(oprot thrift.TProtocol) (err error) {
  if p.IsSetOrganizationList() {
    if err := oprot.WriteFieldBegin("organizationList", thrift.LIST, 30); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 30:organizationList: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRING, len(p.OrganizationList)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.OrganizationList {
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 30:organizationList: ", p), err) }
  }
  return err
}

func (p *NITFInfo) writeField31(oprot thrift.TProtocol) (err error) {
  if p.IsSetPage() {
    if err := oprot.WriteFieldBegin("page", thrift.I32, 31); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 31:page: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Page)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.page (31) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 31:page: ", p), err) }
  }
  return err
}

func (p *NITFInfo) writeField32(oprot thrift.TProtocol) (err error) {
  if p.IsSetPeopleList() {
    if err := oprot.WriteFieldBegin("peopleList", thrift.LIST, 32); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 32:peopleList: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRING, len(p.PeopleList)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.PeopleList {
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 32:peopleList: ", p), err) }
  }
  return err
}

func (p *NITFInfo) writeField33(oprot thrift.TProtocol) (err error) {
  if p.IsSetPublicationDate() {
    if err := oprot.WriteFieldBegin("publicationDate", thrift.I64, 33); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 33:publicationDate: ", p), err) }
    if err := oprot.WriteI64(int64(*p.PublicationDate)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.publicationDate (33) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 33:publicationDate: ", p), err) }
  }
  return err
}

func (p *NITFInfo) writeField34(oprot thrift.TProtocol) (err error) {
  if p.IsSetPublicationDayOfMonth() {
    if err := oprot.WriteFieldBegin("publicationDayOfMonth", thrift.I32, 34); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 34:publicationDayOfMonth: ", p), err) }
    if err := oprot.WriteI32(int32(*p.PublicationDayOfMonth)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.publicationDayOfMonth (34) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 34:publicationDayOfMonth: ", p), err) }
  }
  return err
}

func (p *NITFInfo) writeField35(oprot thrift.TProtocol) (err error) {
  if p.IsSetPublicationMonth() {
    if err := oprot.WriteFieldBegin("publicationMonth", thrift.I32, 35); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 35:publicationMonth: ", p), err) }
    if err := oprot.WriteI32(int32(*p.PublicationMonth)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.publicationMonth (35) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 35:publicationMonth: ", p), err) }
  }
  return err
}

func (p *NITFInfo) writeField36(oprot thrift.TProtocol) (err error) {
  if p.IsSetPublicationYear() {
    if err := oprot.WriteFieldBegin("publicationYear", thrift.I32, 36); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 36:publicationYear: ", p), err) }
    if err := oprot.WriteI32(int32(*p.PublicationYear)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.publicationYear (36) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 36:publicationYear: ", p), err) }
  }
  return err
}

func (p *NITFInfo) writeField37(oprot thrift.TProtocol) (err error) {
  if p.IsSetSection() {
    if err := oprot.WriteFieldBegin("section", thrift.STRING, 37); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 37:section: ", p), err) }
    if err := oprot.WriteString(string(*p.Section)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.section (37) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 37:section: ", p), err) }
  }
  return err
}

func (p *NITFInfo) writeField38(oprot thrift.TProtocol) (err error) {
  if p.IsSetSeriesName() {
    if err := oprot.WriteFieldBegin("seriesName", thrift.STRING, 38); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 38:seriesName: ", p), err) }
    if err := oprot.WriteString(string(*p.SeriesName)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.seriesName (38) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 38:seriesName: ", p), err) }
  }
  return err
}

func (p *NITFInfo) writeField39(oprot thrift.TProtocol) (err error) {
  if p.IsSetSlug() {
    if err := oprot.WriteFieldBegin("slug", thrift.STRING, 39); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 39:slug: ", p), err) }
    if err := oprot.WriteString(string(*p.Slug)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.slug (39) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 39:slug: ", p), err) }
  }
  return err
}

func (p *NITFInfo) writeField40(oprot thrift.TProtocol) (err error) {
  if p.IsSetTaxonomicClassifierList() {
    if err := oprot.WriteFieldBegin("taxonomicClassifierList", thrift.LIST, 40); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 40:taxonomicClassifierList: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRING, len(p.TaxonomicClassifierList)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.TaxonomicClassifierList {
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 40:taxonomicClassifierList: ", p), err) }
  }
  return err
}

func (p *NITFInfo) writeField41(oprot thrift.TProtocol) (err error) {
  if p.IsSetTitleList() {
    if err := oprot.WriteFieldBegin("titleList", thrift.LIST, 41); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 41:titleList: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRING, len(p.TitleList)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.TitleList {
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 41:titleList: ", p), err) }
  }
  return err
}

func (p *NITFInfo) writeField42(oprot thrift.TProtocol) (err error) {
  if p.IsSetTypesOfMaterialList() {
    if err := oprot.WriteFieldBegin("typesOfMaterialList", thrift.LIST, 42); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 42:typesOfMaterialList: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRING, len(p.TypesOfMaterialList)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.TypesOfMaterialList {
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 42:typesOfMaterialList: ", p), err) }
  }
  return err
}

func (p *NITFInfo) writeField43(oprot thrift.TProtocol) (err error) {
  if p.IsSetURL() {
    if err := oprot.WriteFieldBegin("url", thrift.STRING, 43); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 43:url: ", p), err) }
    if err := oprot.WriteString(string(*p.URL)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.url (43) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 43:url: ", p), err) }
  }
  return err
}

func (p *NITFInfo) writeField44(oprot thrift.TProtocol) (err error) {
  if p.IsSetWordCount() {
    if err := oprot.WriteFieldBegin("wordCount", thrift.I32, 44); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 44:wordCount: ", p), err) }
    if err := oprot.WriteI32(int32(*p.WordCount)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.wordCount (44) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 44:wordCount: ", p), err) }
  }
  return err
}

func (p *NITFInfo) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("NITFInfo(%+v)", *p)
}

