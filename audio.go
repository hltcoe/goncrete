// Autogenerated by Thrift Compiler (0.10.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package goncrete

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

// A sound wave. A separate optional field is defined for each
// suppported format. Typically, a Sound object will only define
// a single field.
// 
// Note: we may want to have separate fields for separate channels
// (left vs right), etc.
// 
// Attributes:
//  - Wav
//  - Mp3
//  - Sph
//  - Path: An absolute path to a file on disk where the sound file can be
// found. It is assumed that this path will be accessable from any
// machine that the system is run on (i.e., it should be a shared
// disk, or possibly a mirrored directory).
type Sound struct {
  Wav []byte `thrift:"wav,1" db:"wav" json:"wav,omitempty"`
  Mp3 []byte `thrift:"mp3,2" db:"mp3" json:"mp3,omitempty"`
  Sph []byte `thrift:"sph,3" db:"sph" json:"sph,omitempty"`
  Path *string `thrift:"path,4" db:"path" json:"path,omitempty"`
}

func NewSound() *Sound {
  return &Sound{}
}

var Sound_Wav_DEFAULT []byte

func (p *Sound) GetWav() []byte {
  return p.Wav
}
var Sound_Mp3_DEFAULT []byte

func (p *Sound) GetMp3() []byte {
  return p.Mp3
}
var Sound_Sph_DEFAULT []byte

func (p *Sound) GetSph() []byte {
  return p.Sph
}
var Sound_Path_DEFAULT string
func (p *Sound) GetPath() string {
  if !p.IsSetPath() {
    return Sound_Path_DEFAULT
  }
return *p.Path
}
func (p *Sound) IsSetWav() bool {
  return p.Wav != nil
}

func (p *Sound) IsSetMp3() bool {
  return p.Mp3 != nil
}

func (p *Sound) IsSetSph() bool {
  return p.Sph != nil
}

func (p *Sound) IsSetPath() bool {
  return p.Path != nil
}

func (p *Sound) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Sound)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Wav = v
}
  return nil
}

func (p *Sound)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Mp3 = v
}
  return nil
}

func (p *Sound)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Sph = v
}
  return nil
}

func (p *Sound)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Path = &v
}
  return nil
}

func (p *Sound) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Sound"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Sound) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetWav() {
    if err := oprot.WriteFieldBegin("wav", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:wav: ", p), err) }
    if err := oprot.WriteBinary(p.Wav); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.wav (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:wav: ", p), err) }
  }
  return err
}

func (p *Sound) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetMp3() {
    if err := oprot.WriteFieldBegin("mp3", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:mp3: ", p), err) }
    if err := oprot.WriteBinary(p.Mp3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.mp3 (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:mp3: ", p), err) }
  }
  return err
}

func (p *Sound) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetSph() {
    if err := oprot.WriteFieldBegin("sph", thrift.STRING, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:sph: ", p), err) }
    if err := oprot.WriteBinary(p.Sph); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.sph (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:sph: ", p), err) }
  }
  return err
}

func (p *Sound) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetPath() {
    if err := oprot.WriteFieldBegin("path", thrift.STRING, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:path: ", p), err) }
    if err := oprot.WriteString(string(*p.Path)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.path (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:path: ", p), err) }
  }
  return err
}

func (p *Sound) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Sound(%+v)", *p)
}

