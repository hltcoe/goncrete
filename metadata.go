// Autogenerated by Thrift Compiler (0.10.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package goncrete

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"

)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

// A struct that holds UUIDs for all theories that a particular
// annotation was based upon (and presumably requires).
// 
// Producers of TheoryDependencies should list all stages that they
// used in constructing their particular annotation. They do not,
// however, need to explicitly label *each* stage; they can label
// only the immediate stage before them.
// 
// Examples:
// 
// If you are producing a Tokenization, and only used the
// SentenceSegmentation in order to produce that Tokenization, list
// only the single SentenceSegmentation UUID in sentenceTheoryList.
// 
// In this example, even though the SentenceSegmentation will have
// a dependency on some SectionSegmentation, it is not necessary
// for the Tokenization to list the SectionSegmentation UUID as a
// dependency.
// 
// If you are a producer of EntityMentions, and you use two
// POSTokenTagging and one NERTokenTagging objects, add the UUIDs for
// the POSTokenTagging objects to posTagTheoryList, and the UUID of
// the NER TokenTagging to the nerTagTheoryList.
// 
// In this example, because multiple annotations influenced the
// new annotation, they should all be listed as dependencies.
// 
// Attributes:
//  - SectionTheoryList
//  - SentenceTheoryList
//  - TokenizationTheoryList
//  - PosTagTheoryList
//  - NerTagTheoryList
//  - LemmaTheoryList
//  - LangIdTheoryList
//  - ParseTheoryList
//  - DependencyParseTheoryList
//  - TokenAnnotationTheoryList
//  - EntityMentionSetTheoryList
//  - EntitySetTheoryList
//  - SituationMentionSetTheoryList
//  - SituationSetTheoryList
//  - CommunicationsList
type TheoryDependencies struct {
  SectionTheoryList []*UUID `thrift:"sectionTheoryList,1" db:"sectionTheoryList" json:"sectionTheoryList,omitempty"`
  SentenceTheoryList []*UUID `thrift:"sentenceTheoryList,2" db:"sentenceTheoryList" json:"sentenceTheoryList,omitempty"`
  TokenizationTheoryList []*UUID `thrift:"tokenizationTheoryList,3" db:"tokenizationTheoryList" json:"tokenizationTheoryList,omitempty"`
  PosTagTheoryList []*UUID `thrift:"posTagTheoryList,4" db:"posTagTheoryList" json:"posTagTheoryList,omitempty"`
  NerTagTheoryList []*UUID `thrift:"nerTagTheoryList,5" db:"nerTagTheoryList" json:"nerTagTheoryList,omitempty"`
  LemmaTheoryList []*UUID `thrift:"lemmaTheoryList,6" db:"lemmaTheoryList" json:"lemmaTheoryList,omitempty"`
  LangIdTheoryList []*UUID `thrift:"langIdTheoryList,7" db:"langIdTheoryList" json:"langIdTheoryList,omitempty"`
  ParseTheoryList []*UUID `thrift:"parseTheoryList,8" db:"parseTheoryList" json:"parseTheoryList,omitempty"`
  DependencyParseTheoryList []*UUID `thrift:"dependencyParseTheoryList,9" db:"dependencyParseTheoryList" json:"dependencyParseTheoryList,omitempty"`
  TokenAnnotationTheoryList []*UUID `thrift:"tokenAnnotationTheoryList,10" db:"tokenAnnotationTheoryList" json:"tokenAnnotationTheoryList,omitempty"`
  EntityMentionSetTheoryList []*UUID `thrift:"entityMentionSetTheoryList,11" db:"entityMentionSetTheoryList" json:"entityMentionSetTheoryList,omitempty"`
  EntitySetTheoryList []*UUID `thrift:"entitySetTheoryList,12" db:"entitySetTheoryList" json:"entitySetTheoryList,omitempty"`
  SituationMentionSetTheoryList []*UUID `thrift:"situationMentionSetTheoryList,13" db:"situationMentionSetTheoryList" json:"situationMentionSetTheoryList,omitempty"`
  SituationSetTheoryList []*UUID `thrift:"situationSetTheoryList,14" db:"situationSetTheoryList" json:"situationSetTheoryList,omitempty"`
  CommunicationsList []*UUID `thrift:"communicationsList,15" db:"communicationsList" json:"communicationsList,omitempty"`
}

func NewTheoryDependencies() *TheoryDependencies {
  return &TheoryDependencies{}
}

var TheoryDependencies_SectionTheoryList_DEFAULT []*UUID

func (p *TheoryDependencies) GetSectionTheoryList() []*UUID {
  return p.SectionTheoryList
}
var TheoryDependencies_SentenceTheoryList_DEFAULT []*UUID

func (p *TheoryDependencies) GetSentenceTheoryList() []*UUID {
  return p.SentenceTheoryList
}
var TheoryDependencies_TokenizationTheoryList_DEFAULT []*UUID

func (p *TheoryDependencies) GetTokenizationTheoryList() []*UUID {
  return p.TokenizationTheoryList
}
var TheoryDependencies_PosTagTheoryList_DEFAULT []*UUID

func (p *TheoryDependencies) GetPosTagTheoryList() []*UUID {
  return p.PosTagTheoryList
}
var TheoryDependencies_NerTagTheoryList_DEFAULT []*UUID

func (p *TheoryDependencies) GetNerTagTheoryList() []*UUID {
  return p.NerTagTheoryList
}
var TheoryDependencies_LemmaTheoryList_DEFAULT []*UUID

func (p *TheoryDependencies) GetLemmaTheoryList() []*UUID {
  return p.LemmaTheoryList
}
var TheoryDependencies_LangIdTheoryList_DEFAULT []*UUID

func (p *TheoryDependencies) GetLangIdTheoryList() []*UUID {
  return p.LangIdTheoryList
}
var TheoryDependencies_ParseTheoryList_DEFAULT []*UUID

func (p *TheoryDependencies) GetParseTheoryList() []*UUID {
  return p.ParseTheoryList
}
var TheoryDependencies_DependencyParseTheoryList_DEFAULT []*UUID

func (p *TheoryDependencies) GetDependencyParseTheoryList() []*UUID {
  return p.DependencyParseTheoryList
}
var TheoryDependencies_TokenAnnotationTheoryList_DEFAULT []*UUID

func (p *TheoryDependencies) GetTokenAnnotationTheoryList() []*UUID {
  return p.TokenAnnotationTheoryList
}
var TheoryDependencies_EntityMentionSetTheoryList_DEFAULT []*UUID

func (p *TheoryDependencies) GetEntityMentionSetTheoryList() []*UUID {
  return p.EntityMentionSetTheoryList
}
var TheoryDependencies_EntitySetTheoryList_DEFAULT []*UUID

func (p *TheoryDependencies) GetEntitySetTheoryList() []*UUID {
  return p.EntitySetTheoryList
}
var TheoryDependencies_SituationMentionSetTheoryList_DEFAULT []*UUID

func (p *TheoryDependencies) GetSituationMentionSetTheoryList() []*UUID {
  return p.SituationMentionSetTheoryList
}
var TheoryDependencies_SituationSetTheoryList_DEFAULT []*UUID

func (p *TheoryDependencies) GetSituationSetTheoryList() []*UUID {
  return p.SituationSetTheoryList
}
var TheoryDependencies_CommunicationsList_DEFAULT []*UUID

func (p *TheoryDependencies) GetCommunicationsList() []*UUID {
  return p.CommunicationsList
}
func (p *TheoryDependencies) IsSetSectionTheoryList() bool {
  return p.SectionTheoryList != nil
}

func (p *TheoryDependencies) IsSetSentenceTheoryList() bool {
  return p.SentenceTheoryList != nil
}

func (p *TheoryDependencies) IsSetTokenizationTheoryList() bool {
  return p.TokenizationTheoryList != nil
}

func (p *TheoryDependencies) IsSetPosTagTheoryList() bool {
  return p.PosTagTheoryList != nil
}

func (p *TheoryDependencies) IsSetNerTagTheoryList() bool {
  return p.NerTagTheoryList != nil
}

func (p *TheoryDependencies) IsSetLemmaTheoryList() bool {
  return p.LemmaTheoryList != nil
}

func (p *TheoryDependencies) IsSetLangIdTheoryList() bool {
  return p.LangIdTheoryList != nil
}

func (p *TheoryDependencies) IsSetParseTheoryList() bool {
  return p.ParseTheoryList != nil
}

func (p *TheoryDependencies) IsSetDependencyParseTheoryList() bool {
  return p.DependencyParseTheoryList != nil
}

func (p *TheoryDependencies) IsSetTokenAnnotationTheoryList() bool {
  return p.TokenAnnotationTheoryList != nil
}

func (p *TheoryDependencies) IsSetEntityMentionSetTheoryList() bool {
  return p.EntityMentionSetTheoryList != nil
}

func (p *TheoryDependencies) IsSetEntitySetTheoryList() bool {
  return p.EntitySetTheoryList != nil
}

func (p *TheoryDependencies) IsSetSituationMentionSetTheoryList() bool {
  return p.SituationMentionSetTheoryList != nil
}

func (p *TheoryDependencies) IsSetSituationSetTheoryList() bool {
  return p.SituationSetTheoryList != nil
}

func (p *TheoryDependencies) IsSetCommunicationsList() bool {
  return p.CommunicationsList != nil
}

func (p *TheoryDependencies) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    case 7:
      if err := p.ReadField7(iprot); err != nil {
        return err
      }
    case 8:
      if err := p.ReadField8(iprot); err != nil {
        return err
      }
    case 9:
      if err := p.ReadField9(iprot); err != nil {
        return err
      }
    case 10:
      if err := p.ReadField10(iprot); err != nil {
        return err
      }
    case 11:
      if err := p.ReadField11(iprot); err != nil {
        return err
      }
    case 12:
      if err := p.ReadField12(iprot); err != nil {
        return err
      }
    case 13:
      if err := p.ReadField13(iprot); err != nil {
        return err
      }
    case 14:
      if err := p.ReadField14(iprot); err != nil {
        return err
      }
    case 15:
      if err := p.ReadField15(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TheoryDependencies)  ReadField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*UUID, 0, size)
  p.SectionTheoryList =  tSlice
  for i := 0; i < size; i ++ {
    _elem0 := &UUID{}
    if err := _elem0.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem0), err)
    }
    p.SectionTheoryList = append(p.SectionTheoryList, _elem0)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TheoryDependencies)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*UUID, 0, size)
  p.SentenceTheoryList =  tSlice
  for i := 0; i < size; i ++ {
    _elem1 := &UUID{}
    if err := _elem1.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem1), err)
    }
    p.SentenceTheoryList = append(p.SentenceTheoryList, _elem1)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TheoryDependencies)  ReadField3(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*UUID, 0, size)
  p.TokenizationTheoryList =  tSlice
  for i := 0; i < size; i ++ {
    _elem2 := &UUID{}
    if err := _elem2.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem2), err)
    }
    p.TokenizationTheoryList = append(p.TokenizationTheoryList, _elem2)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TheoryDependencies)  ReadField4(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*UUID, 0, size)
  p.PosTagTheoryList =  tSlice
  for i := 0; i < size; i ++ {
    _elem3 := &UUID{}
    if err := _elem3.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem3), err)
    }
    p.PosTagTheoryList = append(p.PosTagTheoryList, _elem3)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TheoryDependencies)  ReadField5(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*UUID, 0, size)
  p.NerTagTheoryList =  tSlice
  for i := 0; i < size; i ++ {
    _elem4 := &UUID{}
    if err := _elem4.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem4), err)
    }
    p.NerTagTheoryList = append(p.NerTagTheoryList, _elem4)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TheoryDependencies)  ReadField6(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*UUID, 0, size)
  p.LemmaTheoryList =  tSlice
  for i := 0; i < size; i ++ {
    _elem5 := &UUID{}
    if err := _elem5.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem5), err)
    }
    p.LemmaTheoryList = append(p.LemmaTheoryList, _elem5)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TheoryDependencies)  ReadField7(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*UUID, 0, size)
  p.LangIdTheoryList =  tSlice
  for i := 0; i < size; i ++ {
    _elem6 := &UUID{}
    if err := _elem6.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem6), err)
    }
    p.LangIdTheoryList = append(p.LangIdTheoryList, _elem6)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TheoryDependencies)  ReadField8(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*UUID, 0, size)
  p.ParseTheoryList =  tSlice
  for i := 0; i < size; i ++ {
    _elem7 := &UUID{}
    if err := _elem7.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem7), err)
    }
    p.ParseTheoryList = append(p.ParseTheoryList, _elem7)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TheoryDependencies)  ReadField9(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*UUID, 0, size)
  p.DependencyParseTheoryList =  tSlice
  for i := 0; i < size; i ++ {
    _elem8 := &UUID{}
    if err := _elem8.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem8), err)
    }
    p.DependencyParseTheoryList = append(p.DependencyParseTheoryList, _elem8)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TheoryDependencies)  ReadField10(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*UUID, 0, size)
  p.TokenAnnotationTheoryList =  tSlice
  for i := 0; i < size; i ++ {
    _elem9 := &UUID{}
    if err := _elem9.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem9), err)
    }
    p.TokenAnnotationTheoryList = append(p.TokenAnnotationTheoryList, _elem9)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TheoryDependencies)  ReadField11(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*UUID, 0, size)
  p.EntityMentionSetTheoryList =  tSlice
  for i := 0; i < size; i ++ {
    _elem10 := &UUID{}
    if err := _elem10.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem10), err)
    }
    p.EntityMentionSetTheoryList = append(p.EntityMentionSetTheoryList, _elem10)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TheoryDependencies)  ReadField12(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*UUID, 0, size)
  p.EntitySetTheoryList =  tSlice
  for i := 0; i < size; i ++ {
    _elem11 := &UUID{}
    if err := _elem11.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem11), err)
    }
    p.EntitySetTheoryList = append(p.EntitySetTheoryList, _elem11)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TheoryDependencies)  ReadField13(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*UUID, 0, size)
  p.SituationMentionSetTheoryList =  tSlice
  for i := 0; i < size; i ++ {
    _elem12 := &UUID{}
    if err := _elem12.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem12), err)
    }
    p.SituationMentionSetTheoryList = append(p.SituationMentionSetTheoryList, _elem12)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TheoryDependencies)  ReadField14(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*UUID, 0, size)
  p.SituationSetTheoryList =  tSlice
  for i := 0; i < size; i ++ {
    _elem13 := &UUID{}
    if err := _elem13.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem13), err)
    }
    p.SituationSetTheoryList = append(p.SituationSetTheoryList, _elem13)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TheoryDependencies)  ReadField15(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*UUID, 0, size)
  p.CommunicationsList =  tSlice
  for i := 0; i < size; i ++ {
    _elem14 := &UUID{}
    if err := _elem14.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem14), err)
    }
    p.CommunicationsList = append(p.CommunicationsList, _elem14)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TheoryDependencies) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TheoryDependencies"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField11(oprot); err != nil { return err }
    if err := p.writeField12(oprot); err != nil { return err }
    if err := p.writeField13(oprot); err != nil { return err }
    if err := p.writeField14(oprot); err != nil { return err }
    if err := p.writeField15(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TheoryDependencies) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetSectionTheoryList() {
    if err := oprot.WriteFieldBegin("sectionTheoryList", thrift.LIST, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:sectionTheoryList: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.SectionTheoryList)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.SectionTheoryList {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:sectionTheoryList: ", p), err) }
  }
  return err
}

func (p *TheoryDependencies) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetSentenceTheoryList() {
    if err := oprot.WriteFieldBegin("sentenceTheoryList", thrift.LIST, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:sentenceTheoryList: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.SentenceTheoryList)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.SentenceTheoryList {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:sentenceTheoryList: ", p), err) }
  }
  return err
}

func (p *TheoryDependencies) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetTokenizationTheoryList() {
    if err := oprot.WriteFieldBegin("tokenizationTheoryList", thrift.LIST, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:tokenizationTheoryList: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.TokenizationTheoryList)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.TokenizationTheoryList {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:tokenizationTheoryList: ", p), err) }
  }
  return err
}

func (p *TheoryDependencies) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetPosTagTheoryList() {
    if err := oprot.WriteFieldBegin("posTagTheoryList", thrift.LIST, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:posTagTheoryList: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.PosTagTheoryList)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.PosTagTheoryList {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:posTagTheoryList: ", p), err) }
  }
  return err
}

func (p *TheoryDependencies) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetNerTagTheoryList() {
    if err := oprot.WriteFieldBegin("nerTagTheoryList", thrift.LIST, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:nerTagTheoryList: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.NerTagTheoryList)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.NerTagTheoryList {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:nerTagTheoryList: ", p), err) }
  }
  return err
}

func (p *TheoryDependencies) writeField6(oprot thrift.TProtocol) (err error) {
  if p.IsSetLemmaTheoryList() {
    if err := oprot.WriteFieldBegin("lemmaTheoryList", thrift.LIST, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:lemmaTheoryList: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.LemmaTheoryList)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.LemmaTheoryList {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:lemmaTheoryList: ", p), err) }
  }
  return err
}

func (p *TheoryDependencies) writeField7(oprot thrift.TProtocol) (err error) {
  if p.IsSetLangIdTheoryList() {
    if err := oprot.WriteFieldBegin("langIdTheoryList", thrift.LIST, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:langIdTheoryList: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.LangIdTheoryList)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.LangIdTheoryList {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:langIdTheoryList: ", p), err) }
  }
  return err
}

func (p *TheoryDependencies) writeField8(oprot thrift.TProtocol) (err error) {
  if p.IsSetParseTheoryList() {
    if err := oprot.WriteFieldBegin("parseTheoryList", thrift.LIST, 8); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:parseTheoryList: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ParseTheoryList)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.ParseTheoryList {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 8:parseTheoryList: ", p), err) }
  }
  return err
}

func (p *TheoryDependencies) writeField9(oprot thrift.TProtocol) (err error) {
  if p.IsSetDependencyParseTheoryList() {
    if err := oprot.WriteFieldBegin("dependencyParseTheoryList", thrift.LIST, 9); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:dependencyParseTheoryList: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.DependencyParseTheoryList)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.DependencyParseTheoryList {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 9:dependencyParseTheoryList: ", p), err) }
  }
  return err
}

func (p *TheoryDependencies) writeField10(oprot thrift.TProtocol) (err error) {
  if p.IsSetTokenAnnotationTheoryList() {
    if err := oprot.WriteFieldBegin("tokenAnnotationTheoryList", thrift.LIST, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:tokenAnnotationTheoryList: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.TokenAnnotationTheoryList)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.TokenAnnotationTheoryList {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:tokenAnnotationTheoryList: ", p), err) }
  }
  return err
}

func (p *TheoryDependencies) writeField11(oprot thrift.TProtocol) (err error) {
  if p.IsSetEntityMentionSetTheoryList() {
    if err := oprot.WriteFieldBegin("entityMentionSetTheoryList", thrift.LIST, 11); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:entityMentionSetTheoryList: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.EntityMentionSetTheoryList)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.EntityMentionSetTheoryList {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 11:entityMentionSetTheoryList: ", p), err) }
  }
  return err
}

func (p *TheoryDependencies) writeField12(oprot thrift.TProtocol) (err error) {
  if p.IsSetEntitySetTheoryList() {
    if err := oprot.WriteFieldBegin("entitySetTheoryList", thrift.LIST, 12); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:entitySetTheoryList: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.EntitySetTheoryList)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.EntitySetTheoryList {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 12:entitySetTheoryList: ", p), err) }
  }
  return err
}

func (p *TheoryDependencies) writeField13(oprot thrift.TProtocol) (err error) {
  if p.IsSetSituationMentionSetTheoryList() {
    if err := oprot.WriteFieldBegin("situationMentionSetTheoryList", thrift.LIST, 13); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:situationMentionSetTheoryList: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.SituationMentionSetTheoryList)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.SituationMentionSetTheoryList {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 13:situationMentionSetTheoryList: ", p), err) }
  }
  return err
}

func (p *TheoryDependencies) writeField14(oprot thrift.TProtocol) (err error) {
  if p.IsSetSituationSetTheoryList() {
    if err := oprot.WriteFieldBegin("situationSetTheoryList", thrift.LIST, 14); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:situationSetTheoryList: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.SituationSetTheoryList)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.SituationSetTheoryList {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 14:situationSetTheoryList: ", p), err) }
  }
  return err
}

func (p *TheoryDependencies) writeField15(oprot thrift.TProtocol) (err error) {
  if p.IsSetCommunicationsList() {
    if err := oprot.WriteFieldBegin("communicationsList", thrift.LIST, 15); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:communicationsList: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.CommunicationsList)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.CommunicationsList {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 15:communicationsList: ", p), err) }
  }
  return err
}

func (p *TheoryDependencies) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TheoryDependencies(%+v)", *p)
}

// Analytic-specific information about an attribute or edge. Digests
// are used to combine information from multiple sources to generate a
// unified value. The digests generated by an analytic will only ever
// be used by that same analytic, so analytics can feel free to encode
// information in whatever way is convenient.
// 
// Attributes:
//  - BytesValue: The following fields define various ways you can store the
// digest data (for convenience). If none of these meets your
// needs, then serialize the digest to a byte sequence and store it
// in bytesValue.
//  - Int64Value
//  - DoubleValue
//  - StringValue
//  - Int64List
//  - DoubleList
//  - StringList
type Digest struct {
  BytesValue []byte `thrift:"bytesValue,1" db:"bytesValue" json:"bytesValue,omitempty"`
  Int64Value *int64 `thrift:"int64Value,2" db:"int64Value" json:"int64Value,omitempty"`
  DoubleValue *float64 `thrift:"doubleValue,3" db:"doubleValue" json:"doubleValue,omitempty"`
  StringValue *string `thrift:"stringValue,4" db:"stringValue" json:"stringValue,omitempty"`
  Int64List []int64 `thrift:"int64List,5" db:"int64List" json:"int64List,omitempty"`
  DoubleList []float64 `thrift:"doubleList,6" db:"doubleList" json:"doubleList,omitempty"`
  StringList []string `thrift:"stringList,7" db:"stringList" json:"stringList,omitempty"`
}

func NewDigest() *Digest {
  return &Digest{}
}

var Digest_BytesValue_DEFAULT []byte

func (p *Digest) GetBytesValue() []byte {
  return p.BytesValue
}
var Digest_Int64Value_DEFAULT int64
func (p *Digest) GetInt64Value() int64 {
  if !p.IsSetInt64Value() {
    return Digest_Int64Value_DEFAULT
  }
return *p.Int64Value
}
var Digest_DoubleValue_DEFAULT float64
func (p *Digest) GetDoubleValue() float64 {
  if !p.IsSetDoubleValue() {
    return Digest_DoubleValue_DEFAULT
  }
return *p.DoubleValue
}
var Digest_StringValue_DEFAULT string
func (p *Digest) GetStringValue() string {
  if !p.IsSetStringValue() {
    return Digest_StringValue_DEFAULT
  }
return *p.StringValue
}
var Digest_Int64List_DEFAULT []int64

func (p *Digest) GetInt64List() []int64 {
  return p.Int64List
}
var Digest_DoubleList_DEFAULT []float64

func (p *Digest) GetDoubleList() []float64 {
  return p.DoubleList
}
var Digest_StringList_DEFAULT []string

func (p *Digest) GetStringList() []string {
  return p.StringList
}
func (p *Digest) IsSetBytesValue() bool {
  return p.BytesValue != nil
}

func (p *Digest) IsSetInt64Value() bool {
  return p.Int64Value != nil
}

func (p *Digest) IsSetDoubleValue() bool {
  return p.DoubleValue != nil
}

func (p *Digest) IsSetStringValue() bool {
  return p.StringValue != nil
}

func (p *Digest) IsSetInt64List() bool {
  return p.Int64List != nil
}

func (p *Digest) IsSetDoubleList() bool {
  return p.DoubleList != nil
}

func (p *Digest) IsSetStringList() bool {
  return p.StringList != nil
}

func (p *Digest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    case 7:
      if err := p.ReadField7(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Digest)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.BytesValue = v
}
  return nil
}

func (p *Digest)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Int64Value = &v
}
  return nil
}

func (p *Digest)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.DoubleValue = &v
}
  return nil
}

func (p *Digest)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.StringValue = &v
}
  return nil
}

func (p *Digest)  ReadField5(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int64, 0, size)
  p.Int64List =  tSlice
  for i := 0; i < size; i ++ {
var _elem15 int64
    if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem15 = v
}
    p.Int64List = append(p.Int64List, _elem15)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *Digest)  ReadField6(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]float64, 0, size)
  p.DoubleList =  tSlice
  for i := 0; i < size; i ++ {
var _elem16 float64
    if v, err := iprot.ReadDouble(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem16 = v
}
    p.DoubleList = append(p.DoubleList, _elem16)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *Digest)  ReadField7(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.StringList =  tSlice
  for i := 0; i < size; i ++ {
var _elem17 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem17 = v
}
    p.StringList = append(p.StringList, _elem17)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *Digest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Digest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Digest) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetBytesValue() {
    if err := oprot.WriteFieldBegin("bytesValue", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:bytesValue: ", p), err) }
    if err := oprot.WriteBinary(p.BytesValue); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.bytesValue (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:bytesValue: ", p), err) }
  }
  return err
}

func (p *Digest) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetInt64Value() {
    if err := oprot.WriteFieldBegin("int64Value", thrift.I64, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:int64Value: ", p), err) }
    if err := oprot.WriteI64(int64(*p.Int64Value)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.int64Value (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:int64Value: ", p), err) }
  }
  return err
}

func (p *Digest) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetDoubleValue() {
    if err := oprot.WriteFieldBegin("doubleValue", thrift.DOUBLE, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:doubleValue: ", p), err) }
    if err := oprot.WriteDouble(float64(*p.DoubleValue)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.doubleValue (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:doubleValue: ", p), err) }
  }
  return err
}

func (p *Digest) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetStringValue() {
    if err := oprot.WriteFieldBegin("stringValue", thrift.STRING, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:stringValue: ", p), err) }
    if err := oprot.WriteString(string(*p.StringValue)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.stringValue (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:stringValue: ", p), err) }
  }
  return err
}

func (p *Digest) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetInt64List() {
    if err := oprot.WriteFieldBegin("int64List", thrift.LIST, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:int64List: ", p), err) }
    if err := oprot.WriteListBegin(thrift.I64, len(p.Int64List)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Int64List {
      if err := oprot.WriteI64(int64(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:int64List: ", p), err) }
  }
  return err
}

func (p *Digest) writeField6(oprot thrift.TProtocol) (err error) {
  if p.IsSetDoubleList() {
    if err := oprot.WriteFieldBegin("doubleList", thrift.LIST, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:doubleList: ", p), err) }
    if err := oprot.WriteListBegin(thrift.DOUBLE, len(p.DoubleList)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.DoubleList {
      if err := oprot.WriteDouble(float64(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:doubleList: ", p), err) }
  }
  return err
}

func (p *Digest) writeField7(oprot thrift.TProtocol) (err error) {
  if p.IsSetStringList() {
    if err := oprot.WriteFieldBegin("stringList", thrift.LIST, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:stringList: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRING, len(p.StringList)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.StringList {
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:stringList: ", p), err) }
  }
  return err
}

func (p *Digest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Digest(%+v)", *p)
}

// Metadata associated with an annotation or a set of annotations,
// that identifies where those annotations came from.
// 
// Attributes:
//  - Tool: The name of the tool that generated this annotation.
//  - Timestamp: The time at which this annotation was generated (in unix time
// UTC -- i.e., seconds since January 1, 1970).
//  - Digest: A Digest, carrying over any information the annotation metadata
// wishes to carry over.
//  - Dependencies: The theories that supported this annotation.
// 
// An empty field indicates that the theory has no
// dependencies (e.g., an ingester).
//  - KBest: An integer that represents a ranking for systems
// that output k-best lists.
// 
// For systems that do not output k-best lists,
// the default value (1) should suffice.
type AnnotationMetadata struct {
  Tool string `thrift:"tool,1,required" db:"tool" json:"tool"`
  Timestamp int64 `thrift:"timestamp,2,required" db:"timestamp" json:"timestamp"`
  // unused field # 3
  Digest *Digest `thrift:"digest,4" db:"digest" json:"digest,omitempty"`
  Dependencies *TheoryDependencies `thrift:"dependencies,5" db:"dependencies" json:"dependencies,omitempty"`
  KBest int32 `thrift:"kBest,6,required" db:"kBest" json:"kBest"`
}

func NewAnnotationMetadata() *AnnotationMetadata {
  return &AnnotationMetadata{
KBest: 1,
}
}


func (p *AnnotationMetadata) GetTool() string {
  return p.Tool
}

func (p *AnnotationMetadata) GetTimestamp() int64 {
  return p.Timestamp
}
var AnnotationMetadata_Digest_DEFAULT *Digest
func (p *AnnotationMetadata) GetDigest() *Digest {
  if !p.IsSetDigest() {
    return AnnotationMetadata_Digest_DEFAULT
  }
return p.Digest
}
var AnnotationMetadata_Dependencies_DEFAULT *TheoryDependencies
func (p *AnnotationMetadata) GetDependencies() *TheoryDependencies {
  if !p.IsSetDependencies() {
    return AnnotationMetadata_Dependencies_DEFAULT
  }
return p.Dependencies
}

func (p *AnnotationMetadata) GetKBest() int32 {
  return p.KBest
}
func (p *AnnotationMetadata) IsSetDigest() bool {
  return p.Digest != nil
}

func (p *AnnotationMetadata) IsSetDependencies() bool {
  return p.Dependencies != nil
}

func (p *AnnotationMetadata) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetTool bool = false;
  var issetTimestamp bool = false;
  var issetKBest bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetTool = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
      issetTimestamp = true
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
      issetKBest = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetTool{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Tool is not set"));
  }
  if !issetTimestamp{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Timestamp is not set"));
  }
  if !issetKBest{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field KBest is not set"));
  }
  return nil
}

func (p *AnnotationMetadata)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Tool = v
}
  return nil
}

func (p *AnnotationMetadata)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Timestamp = v
}
  return nil
}

func (p *AnnotationMetadata)  ReadField4(iprot thrift.TProtocol) error {
  p.Digest = &Digest{}
  if err := p.Digest.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Digest), err)
  }
  return nil
}

func (p *AnnotationMetadata)  ReadField5(iprot thrift.TProtocol) error {
  p.Dependencies = &TheoryDependencies{}
  if err := p.Dependencies.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Dependencies), err)
  }
  return nil
}

func (p *AnnotationMetadata)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.KBest = v
}
  return nil
}

func (p *AnnotationMetadata) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("AnnotationMetadata"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AnnotationMetadata) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("tool", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:tool: ", p), err) }
  if err := oprot.WriteString(string(p.Tool)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tool (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:tool: ", p), err) }
  return err
}

func (p *AnnotationMetadata) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("timestamp", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:timestamp: ", p), err) }
  if err := oprot.WriteI64(int64(p.Timestamp)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.timestamp (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:timestamp: ", p), err) }
  return err
}

func (p *AnnotationMetadata) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetDigest() {
    if err := oprot.WriteFieldBegin("digest", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:digest: ", p), err) }
    if err := p.Digest.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Digest), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:digest: ", p), err) }
  }
  return err
}

func (p *AnnotationMetadata) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetDependencies() {
    if err := oprot.WriteFieldBegin("dependencies", thrift.STRUCT, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:dependencies: ", p), err) }
    if err := p.Dependencies.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Dependencies), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:dependencies: ", p), err) }
  }
  return err
}

func (p *AnnotationMetadata) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("kBest", thrift.I32, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:kBest: ", p), err) }
  if err := oprot.WriteI32(int32(p.KBest)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.kBest (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:kBest: ", p), err) }
  return err
}

func (p *AnnotationMetadata) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AnnotationMetadata(%+v)", *p)
}

// Metadata specific to a particular Communication object.
// This might include corpus-specific metadata (from the Twitter API),
// attributes associated with the Communication (the author),
// or other information about the Communication.
// 
// Attributes:
//  - TweetInfo: Extra information for communications where kind==TWEET:
// Information about this tweet that is provided by the Twitter
// API.  For information about the Twitter API, see:
// https://dev.twitter.com/docs/platform-objects
//  - EmailInfo: Extra information for communications where kind==EMAIL
//  - NitfInfo: Extra information that may come from the NITF
// (News Industry Text Format) schema. See 'nitf.thrift'.
type CommunicationMetadata struct {
  TweetInfo *TweetInfo `thrift:"tweetInfo,1" db:"tweetInfo" json:"tweetInfo,omitempty"`
  EmailInfo *EmailCommunicationInfo `thrift:"emailInfo,2" db:"emailInfo" json:"emailInfo,omitempty"`
  NitfInfo *NITFInfo `thrift:"nitfInfo,3" db:"nitfInfo" json:"nitfInfo,omitempty"`
}

func NewCommunicationMetadata() *CommunicationMetadata {
  return &CommunicationMetadata{}
}

var CommunicationMetadata_TweetInfo_DEFAULT *TweetInfo
func (p *CommunicationMetadata) GetTweetInfo() *TweetInfo {
  if !p.IsSetTweetInfo() {
    return CommunicationMetadata_TweetInfo_DEFAULT
  }
return p.TweetInfo
}
var CommunicationMetadata_EmailInfo_DEFAULT *EmailCommunicationInfo
func (p *CommunicationMetadata) GetEmailInfo() *EmailCommunicationInfo {
  if !p.IsSetEmailInfo() {
    return CommunicationMetadata_EmailInfo_DEFAULT
  }
return p.EmailInfo
}
var CommunicationMetadata_NitfInfo_DEFAULT *NITFInfo
func (p *CommunicationMetadata) GetNitfInfo() *NITFInfo {
  if !p.IsSetNitfInfo() {
    return CommunicationMetadata_NitfInfo_DEFAULT
  }
return p.NitfInfo
}
func (p *CommunicationMetadata) IsSetTweetInfo() bool {
  return p.TweetInfo != nil
}

func (p *CommunicationMetadata) IsSetEmailInfo() bool {
  return p.EmailInfo != nil
}

func (p *CommunicationMetadata) IsSetNitfInfo() bool {
  return p.NitfInfo != nil
}

func (p *CommunicationMetadata) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CommunicationMetadata)  ReadField1(iprot thrift.TProtocol) error {
  p.TweetInfo = &TweetInfo{}
  if err := p.TweetInfo.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.TweetInfo), err)
  }
  return nil
}

func (p *CommunicationMetadata)  ReadField2(iprot thrift.TProtocol) error {
  p.EmailInfo = &EmailCommunicationInfo{}
  if err := p.EmailInfo.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.EmailInfo), err)
  }
  return nil
}

func (p *CommunicationMetadata)  ReadField3(iprot thrift.TProtocol) error {
  p.NitfInfo = &NITFInfo{}
  if err := p.NitfInfo.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.NitfInfo), err)
  }
  return nil
}

func (p *CommunicationMetadata) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("CommunicationMetadata"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CommunicationMetadata) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetTweetInfo() {
    if err := oprot.WriteFieldBegin("tweetInfo", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:tweetInfo: ", p), err) }
    if err := p.TweetInfo.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.TweetInfo), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:tweetInfo: ", p), err) }
  }
  return err
}

func (p *CommunicationMetadata) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetEmailInfo() {
    if err := oprot.WriteFieldBegin("emailInfo", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:emailInfo: ", p), err) }
    if err := p.EmailInfo.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.EmailInfo), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:emailInfo: ", p), err) }
  }
  return err
}

func (p *CommunicationMetadata) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetNitfInfo() {
    if err := oprot.WriteFieldBegin("nitfInfo", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:nitfInfo: ", p), err) }
    if err := p.NitfInfo.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.NitfInfo), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:nitfInfo: ", p), err) }
  }
  return err
}

func (p *CommunicationMetadata) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CommunicationMetadata(%+v)", *p)
}

