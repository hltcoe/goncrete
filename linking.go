// Autogenerated by Thrift Compiler (0.10.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package goncrete

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"

)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

// A structure that represents the target of an entity linking annotation.
// 
// Attributes:
//  - Confidence: Confidence of this LinkTarget object.
//  - TargetId: A UUID that represents the target of this LinkTarget. This
// UUID should exist in the Entity/Situation(Mention)Set that the
// Linking object is contained in.
//  - DbId: A database ID that represents the target of this linking.
// 
// This should be used if the target of the linking is not associated
// with an Entity|Situation(Mention)Set in Concrete, and therefore cannot be linked by
// a UUID internal to concrete.
// 
// If present, other optional field 'dbName' should also be populated.
//  - DbName: The name of the database that represents the target of this linking.
// 
// Together with the 'dbId', this can form a pointer to a target
// that is not represented inside concrete.
// 
// Should be populated alongside 'dbId'.
type LinkTarget struct {
  Confidence *float64 `thrift:"confidence,1" db:"confidence" json:"confidence,omitempty"`
  TargetId *UUID `thrift:"targetId,2" db:"targetId" json:"targetId,omitempty"`
  DbId *string `thrift:"dbId,3" db:"dbId" json:"dbId,omitempty"`
  DbName *string `thrift:"dbName,4" db:"dbName" json:"dbName,omitempty"`
}

func NewLinkTarget() *LinkTarget {
  return &LinkTarget{}
}

var LinkTarget_Confidence_DEFAULT float64
func (p *LinkTarget) GetConfidence() float64 {
  if !p.IsSetConfidence() {
    return LinkTarget_Confidence_DEFAULT
  }
return *p.Confidence
}
var LinkTarget_TargetId_DEFAULT *UUID
func (p *LinkTarget) GetTargetId() *UUID {
  if !p.IsSetTargetId() {
    return LinkTarget_TargetId_DEFAULT
  }
return p.TargetId
}
var LinkTarget_DbId_DEFAULT string
func (p *LinkTarget) GetDbId() string {
  if !p.IsSetDbId() {
    return LinkTarget_DbId_DEFAULT
  }
return *p.DbId
}
var LinkTarget_DbName_DEFAULT string
func (p *LinkTarget) GetDbName() string {
  if !p.IsSetDbName() {
    return LinkTarget_DbName_DEFAULT
  }
return *p.DbName
}
func (p *LinkTarget) IsSetConfidence() bool {
  return p.Confidence != nil
}

func (p *LinkTarget) IsSetTargetId() bool {
  return p.TargetId != nil
}

func (p *LinkTarget) IsSetDbId() bool {
  return p.DbId != nil
}

func (p *LinkTarget) IsSetDbName() bool {
  return p.DbName != nil
}

func (p *LinkTarget) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *LinkTarget)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Confidence = &v
}
  return nil
}

func (p *LinkTarget)  ReadField2(iprot thrift.TProtocol) error {
  p.TargetId = &UUID{}
  if err := p.TargetId.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.TargetId), err)
  }
  return nil
}

func (p *LinkTarget)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.DbId = &v
}
  return nil
}

func (p *LinkTarget)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.DbName = &v
}
  return nil
}

func (p *LinkTarget) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("LinkTarget"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *LinkTarget) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetConfidence() {
    if err := oprot.WriteFieldBegin("confidence", thrift.DOUBLE, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:confidence: ", p), err) }
    if err := oprot.WriteDouble(float64(*p.Confidence)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.confidence (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:confidence: ", p), err) }
  }
  return err
}

func (p *LinkTarget) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetTargetId() {
    if err := oprot.WriteFieldBegin("targetId", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:targetId: ", p), err) }
    if err := p.TargetId.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.TargetId), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:targetId: ", p), err) }
  }
  return err
}

func (p *LinkTarget) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetDbId() {
    if err := oprot.WriteFieldBegin("dbId", thrift.STRING, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:dbId: ", p), err) }
    if err := oprot.WriteString(string(*p.DbId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.dbId (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:dbId: ", p), err) }
  }
  return err
}

func (p *LinkTarget) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetDbName() {
    if err := oprot.WriteFieldBegin("dbName", thrift.STRING, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:dbName: ", p), err) }
    if err := oprot.WriteString(string(*p.DbName)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.dbName (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:dbName: ", p), err) }
  }
  return err
}

func (p *LinkTarget) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("LinkTarget(%+v)", *p)
}

// A structure that represents the origin of an entity linking annotation.
// 
// Attributes:
//  - SourceId: The "root" of this Link; points to a EntityMention UUID, Entity UUID, etc.
//  - LinkTargetList: A list of LinkTarget objects that this Link contains.
type Link struct {
  SourceId *UUID `thrift:"sourceId,1,required" db:"sourceId" json:"sourceId"`
  LinkTargetList []*LinkTarget `thrift:"linkTargetList,2,required" db:"linkTargetList" json:"linkTargetList"`
}

func NewLink() *Link {
  return &Link{}
}

var Link_SourceId_DEFAULT *UUID
func (p *Link) GetSourceId() *UUID {
  if !p.IsSetSourceId() {
    return Link_SourceId_DEFAULT
  }
return p.SourceId
}

func (p *Link) GetLinkTargetList() []*LinkTarget {
  return p.LinkTargetList
}
func (p *Link) IsSetSourceId() bool {
  return p.SourceId != nil
}

func (p *Link) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetSourceId bool = false;
  var issetLinkTargetList bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetSourceId = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
      issetLinkTargetList = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetSourceId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field SourceId is not set"));
  }
  if !issetLinkTargetList{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field LinkTargetList is not set"));
  }
  return nil
}

func (p *Link)  ReadField1(iprot thrift.TProtocol) error {
  p.SourceId = &UUID{}
  if err := p.SourceId.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SourceId), err)
  }
  return nil
}

func (p *Link)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*LinkTarget, 0, size)
  p.LinkTargetList =  tSlice
  for i := 0; i < size; i ++ {
    _elem0 := &LinkTarget{}
    if err := _elem0.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem0), err)
    }
    p.LinkTargetList = append(p.LinkTargetList, _elem0)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *Link) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Link"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Link) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("sourceId", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:sourceId: ", p), err) }
  if err := p.SourceId.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SourceId), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:sourceId: ", p), err) }
  return err
}

func (p *Link) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("linkTargetList", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:linkTargetList: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.LinkTargetList)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.LinkTargetList {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:linkTargetList: ", p), err) }
  return err
}

func (p *Link) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Link(%+v)", *p)
}

// A structure that represents entity linking annotations.
// 
// Attributes:
//  - Metadata: Metadata related to this Linking object.
//  - LinkList: A list of Link objects that this Linking object contains.
type Linking struct {
  Metadata *AnnotationMetadata `thrift:"metadata,1,required" db:"metadata" json:"metadata"`
  LinkList []*Link `thrift:"linkList,2,required" db:"linkList" json:"linkList"`
}

func NewLinking() *Linking {
  return &Linking{}
}

var Linking_Metadata_DEFAULT *AnnotationMetadata
func (p *Linking) GetMetadata() *AnnotationMetadata {
  if !p.IsSetMetadata() {
    return Linking_Metadata_DEFAULT
  }
return p.Metadata
}

func (p *Linking) GetLinkList() []*Link {
  return p.LinkList
}
func (p *Linking) IsSetMetadata() bool {
  return p.Metadata != nil
}

func (p *Linking) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetMetadata bool = false;
  var issetLinkList bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetMetadata = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
      issetLinkList = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetMetadata{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Metadata is not set"));
  }
  if !issetLinkList{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field LinkList is not set"));
  }
  return nil
}

func (p *Linking)  ReadField1(iprot thrift.TProtocol) error {
  p.Metadata = &AnnotationMetadata{
  KBest: 1,
}
  if err := p.Metadata.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Metadata), err)
  }
  return nil
}

func (p *Linking)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Link, 0, size)
  p.LinkList =  tSlice
  for i := 0; i < size; i ++ {
    _elem1 := &Link{}
    if err := _elem1.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem1), err)
    }
    p.LinkList = append(p.LinkList, _elem1)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *Linking) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Linking"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Linking) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("metadata", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:metadata: ", p), err) }
  if err := p.Metadata.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Metadata), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:metadata: ", p), err) }
  return err
}

func (p *Linking) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("linkList", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:linkList: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.LinkList)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.LinkList {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:linkList: ", p), err) }
  return err
}

func (p *Linking) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Linking(%+v)", *p)
}

