// Autogenerated by Thrift Compiler (0.10.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package goncrete

import (
	"bytes"
	"database/sql/driver"
	"errors"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"

)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

type SummarySourceType int64
const (
  SummarySourceType_DOCUMENT SummarySourceType = 0
  SummarySourceType_TOKENIZATION SummarySourceType = 1
  SummarySourceType_ENTITY SummarySourceType = 2
)

func (p SummarySourceType) String() string {
  switch p {
  case SummarySourceType_DOCUMENT: return "DOCUMENT"
  case SummarySourceType_TOKENIZATION: return "TOKENIZATION"
  case SummarySourceType_ENTITY: return "ENTITY"
  }
  return "<UNSET>"
}

func SummarySourceTypeFromString(s string) (SummarySourceType, error) {
  switch s {
  case "DOCUMENT": return SummarySourceType_DOCUMENT, nil 
  case "TOKENIZATION": return SummarySourceType_TOKENIZATION, nil 
  case "ENTITY": return SummarySourceType_ENTITY, nil 
  }
  return SummarySourceType(0), fmt.Errorf("not a valid SummarySourceType string")
}


func SummarySourceTypePtr(v SummarySourceType) *SummarySourceType { return &v }

func (p SummarySourceType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *SummarySourceType) UnmarshalText(text []byte) error {
q, err := SummarySourceTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *SummarySourceType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = SummarySourceType(v)
return nil
}

func (p * SummarySourceType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
// A request to summarize which specifies the length of the desired
// summary and the text data to be summarized.
// Either set sourceCommunication or sourceType and sourceIds.
// 
// Attributes:
//  - QueryTerms: Terms or features pertinent to the query.
// Can be empty, meaning summarize all source material with
// no a priori beliefs about what is important to summarize.
//  - MaximumTokens: Limit on how long the returned summary can be in tokens.
//  - MaximumCharacters: Limit on how long the returned summary can be in characters.
//  - SourceType: How to interpret the ids in sourceIds.
// May be null is sourceIds is null, otherwise must be populated.
//  - SourceIds: A list of concrete object ids which serve as the material
// to summarize.
//  - SourceCommunication: Alternative to sourceIds+sourceType: provide a Communication
// of text to summarize.
type SummarizationRequest struct {
  QueryTerms []string `thrift:"queryTerms,1" db:"queryTerms" json:"queryTerms,omitempty"`
  MaximumTokens *int32 `thrift:"maximumTokens,2" db:"maximumTokens" json:"maximumTokens,omitempty"`
  MaximumCharacters *int32 `thrift:"maximumCharacters,3" db:"maximumCharacters" json:"maximumCharacters,omitempty"`
  SourceType *SummarySourceType `thrift:"sourceType,4" db:"sourceType" json:"sourceType,omitempty"`
  SourceIds []*UUID `thrift:"sourceIds,5" db:"sourceIds" json:"sourceIds,omitempty"`
  SourceCommunication *Communication `thrift:"sourceCommunication,6" db:"sourceCommunication" json:"sourceCommunication,omitempty"`
}

func NewSummarizationRequest() *SummarizationRequest {
  return &SummarizationRequest{}
}

var SummarizationRequest_QueryTerms_DEFAULT []string

func (p *SummarizationRequest) GetQueryTerms() []string {
  return p.QueryTerms
}
var SummarizationRequest_MaximumTokens_DEFAULT int32
func (p *SummarizationRequest) GetMaximumTokens() int32 {
  if !p.IsSetMaximumTokens() {
    return SummarizationRequest_MaximumTokens_DEFAULT
  }
return *p.MaximumTokens
}
var SummarizationRequest_MaximumCharacters_DEFAULT int32
func (p *SummarizationRequest) GetMaximumCharacters() int32 {
  if !p.IsSetMaximumCharacters() {
    return SummarizationRequest_MaximumCharacters_DEFAULT
  }
return *p.MaximumCharacters
}
var SummarizationRequest_SourceType_DEFAULT SummarySourceType
func (p *SummarizationRequest) GetSourceType() SummarySourceType {
  if !p.IsSetSourceType() {
    return SummarizationRequest_SourceType_DEFAULT
  }
return *p.SourceType
}
var SummarizationRequest_SourceIds_DEFAULT []*UUID

func (p *SummarizationRequest) GetSourceIds() []*UUID {
  return p.SourceIds
}
var SummarizationRequest_SourceCommunication_DEFAULT *Communication
func (p *SummarizationRequest) GetSourceCommunication() *Communication {
  if !p.IsSetSourceCommunication() {
    return SummarizationRequest_SourceCommunication_DEFAULT
  }
return p.SourceCommunication
}
func (p *SummarizationRequest) IsSetQueryTerms() bool {
  return p.QueryTerms != nil
}

func (p *SummarizationRequest) IsSetMaximumTokens() bool {
  return p.MaximumTokens != nil
}

func (p *SummarizationRequest) IsSetMaximumCharacters() bool {
  return p.MaximumCharacters != nil
}

func (p *SummarizationRequest) IsSetSourceType() bool {
  return p.SourceType != nil
}

func (p *SummarizationRequest) IsSetSourceIds() bool {
  return p.SourceIds != nil
}

func (p *SummarizationRequest) IsSetSourceCommunication() bool {
  return p.SourceCommunication != nil
}

func (p *SummarizationRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SummarizationRequest)  ReadField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.QueryTerms =  tSlice
  for i := 0; i < size; i ++ {
var _elem0 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem0 = v
}
    p.QueryTerms = append(p.QueryTerms, _elem0)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *SummarizationRequest)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.MaximumTokens = &v
}
  return nil
}

func (p *SummarizationRequest)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.MaximumCharacters = &v
}
  return nil
}

func (p *SummarizationRequest)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  temp := SummarySourceType(v)
  p.SourceType = &temp
}
  return nil
}

func (p *SummarizationRequest)  ReadField5(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*UUID, 0, size)
  p.SourceIds =  tSlice
  for i := 0; i < size; i ++ {
    _elem1 := &UUID{}
    if err := _elem1.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem1), err)
    }
    p.SourceIds = append(p.SourceIds, _elem1)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *SummarizationRequest)  ReadField6(iprot thrift.TProtocol) error {
  p.SourceCommunication = &Communication{}
  if err := p.SourceCommunication.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SourceCommunication), err)
  }
  return nil
}

func (p *SummarizationRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SummarizationRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SummarizationRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetQueryTerms() {
    if err := oprot.WriteFieldBegin("queryTerms", thrift.LIST, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:queryTerms: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRING, len(p.QueryTerms)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.QueryTerms {
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:queryTerms: ", p), err) }
  }
  return err
}

func (p *SummarizationRequest) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetMaximumTokens() {
    if err := oprot.WriteFieldBegin("maximumTokens", thrift.I32, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:maximumTokens: ", p), err) }
    if err := oprot.WriteI32(int32(*p.MaximumTokens)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.maximumTokens (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:maximumTokens: ", p), err) }
  }
  return err
}

func (p *SummarizationRequest) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetMaximumCharacters() {
    if err := oprot.WriteFieldBegin("maximumCharacters", thrift.I32, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:maximumCharacters: ", p), err) }
    if err := oprot.WriteI32(int32(*p.MaximumCharacters)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.maximumCharacters (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:maximumCharacters: ", p), err) }
  }
  return err
}

func (p *SummarizationRequest) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetSourceType() {
    if err := oprot.WriteFieldBegin("sourceType", thrift.I32, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:sourceType: ", p), err) }
    if err := oprot.WriteI32(int32(*p.SourceType)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.sourceType (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:sourceType: ", p), err) }
  }
  return err
}

func (p *SummarizationRequest) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetSourceIds() {
    if err := oprot.WriteFieldBegin("sourceIds", thrift.LIST, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:sourceIds: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.SourceIds)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.SourceIds {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:sourceIds: ", p), err) }
  }
  return err
}

func (p *SummarizationRequest) writeField6(oprot thrift.TProtocol) (err error) {
  if p.IsSetSourceCommunication() {
    if err := oprot.WriteFieldBegin("sourceCommunication", thrift.STRUCT, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:sourceCommunication: ", p), err) }
    if err := p.SourceCommunication.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SourceCommunication), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:sourceCommunication: ", p), err) }
  }
  return err
}

func (p *SummarizationRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SummarizationRequest(%+v)", *p)
}

// A mention of a concept described in a summary which is thought
// to be informative. Concepts might be named entities, facts, or
// events which were determined to be salient in the text being
// summarized.
// 
// Attributes:
//  - Tokens: Location in summaryCommunication of this concept
//  - Concept: Short description of the concept being evoked, e.g. "kbrel:bornIn" or "related:ACME_Corp"
//  - Confidence: How confident is the system that this concept was evoked by this mention, in [0,1]
//  - Utility: How informative/important it is that this concept be included in the summary (non-negative).
type SummaryConcept struct {
  Tokens *TokenRefSequence `thrift:"tokens,1" db:"tokens" json:"tokens,omitempty"`
  Concept *string `thrift:"concept,2" db:"concept" json:"concept,omitempty"`
  Confidence float64 `thrift:"confidence,3" db:"confidence" json:"confidence,omitempty"`
  Utility float64 `thrift:"utility,4" db:"utility" json:"utility,omitempty"`
}

func NewSummaryConcept() *SummaryConcept {
  return &SummaryConcept{
Confidence: 1,

Utility: 1,
}
}

var SummaryConcept_Tokens_DEFAULT *TokenRefSequence
func (p *SummaryConcept) GetTokens() *TokenRefSequence {
  if !p.IsSetTokens() {
    return SummaryConcept_Tokens_DEFAULT
  }
return p.Tokens
}
var SummaryConcept_Concept_DEFAULT string
func (p *SummaryConcept) GetConcept() string {
  if !p.IsSetConcept() {
    return SummaryConcept_Concept_DEFAULT
  }
return *p.Concept
}
var SummaryConcept_Confidence_DEFAULT float64 = 1

func (p *SummaryConcept) GetConfidence() float64 {
  return p.Confidence
}
var SummaryConcept_Utility_DEFAULT float64 = 1

func (p *SummaryConcept) GetUtility() float64 {
  return p.Utility
}
func (p *SummaryConcept) IsSetTokens() bool {
  return p.Tokens != nil
}

func (p *SummaryConcept) IsSetConcept() bool {
  return p.Concept != nil
}

func (p *SummaryConcept) IsSetConfidence() bool {
  return p.Confidence != SummaryConcept_Confidence_DEFAULT
}

func (p *SummaryConcept) IsSetUtility() bool {
  return p.Utility != SummaryConcept_Utility_DEFAULT
}

func (p *SummaryConcept) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SummaryConcept)  ReadField1(iprot thrift.TProtocol) error {
  p.Tokens = &TokenRefSequence{
  AnchorTokenIndex: -1,
}
  if err := p.Tokens.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Tokens), err)
  }
  return nil
}

func (p *SummaryConcept)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Concept = &v
}
  return nil
}

func (p *SummaryConcept)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Confidence = v
}
  return nil
}

func (p *SummaryConcept)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Utility = v
}
  return nil
}

func (p *SummaryConcept) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SummaryConcept"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SummaryConcept) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetTokens() {
    if err := oprot.WriteFieldBegin("tokens", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:tokens: ", p), err) }
    if err := p.Tokens.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Tokens), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:tokens: ", p), err) }
  }
  return err
}

func (p *SummaryConcept) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetConcept() {
    if err := oprot.WriteFieldBegin("concept", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:concept: ", p), err) }
    if err := oprot.WriteString(string(*p.Concept)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.concept (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:concept: ", p), err) }
  }
  return err
}

func (p *SummaryConcept) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetConfidence() {
    if err := oprot.WriteFieldBegin("confidence", thrift.DOUBLE, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:confidence: ", p), err) }
    if err := oprot.WriteDouble(float64(p.Confidence)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.confidence (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:confidence: ", p), err) }
  }
  return err
}

func (p *SummaryConcept) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetUtility() {
    if err := oprot.WriteFieldBegin("utility", thrift.DOUBLE, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:utility: ", p), err) }
    if err := oprot.WriteDouble(float64(p.Utility)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.utility (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:utility: ", p), err) }
  }
  return err
}

func (p *SummaryConcept) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SummaryConcept(%+v)", *p)
}

// A shortened version of some text, possibly with some concepts
// annotated as justifications for why particular pieces of the
// summary were kept.
// 
// Attributes:
//  - SummaryCommunication: Contains the text of the generated summary.
//  - Concepts: Concepts mentioned in the summary which are believed to be
// interesting and/or worth highlighting.
type Summary struct {
  SummaryCommunication *Communication `thrift:"summaryCommunication,1" db:"summaryCommunication" json:"summaryCommunication,omitempty"`
  Concepts []*SummaryConcept `thrift:"concepts,2" db:"concepts" json:"concepts,omitempty"`
}

func NewSummary() *Summary {
  return &Summary{}
}

var Summary_SummaryCommunication_DEFAULT *Communication
func (p *Summary) GetSummaryCommunication() *Communication {
  if !p.IsSetSummaryCommunication() {
    return Summary_SummaryCommunication_DEFAULT
  }
return p.SummaryCommunication
}
var Summary_Concepts_DEFAULT []*SummaryConcept

func (p *Summary) GetConcepts() []*SummaryConcept {
  return p.Concepts
}
func (p *Summary) IsSetSummaryCommunication() bool {
  return p.SummaryCommunication != nil
}

func (p *Summary) IsSetConcepts() bool {
  return p.Concepts != nil
}

func (p *Summary) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Summary)  ReadField1(iprot thrift.TProtocol) error {
  p.SummaryCommunication = &Communication{}
  if err := p.SummaryCommunication.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SummaryCommunication), err)
  }
  return nil
}

func (p *Summary)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*SummaryConcept, 0, size)
  p.Concepts =  tSlice
  for i := 0; i < size; i ++ {
    _elem2 := &SummaryConcept{
    Confidence: 1,

    Utility: 1,
}
    if err := _elem2.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem2), err)
    }
    p.Concepts = append(p.Concepts, _elem2)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *Summary) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Summary"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Summary) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetSummaryCommunication() {
    if err := oprot.WriteFieldBegin("summaryCommunication", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:summaryCommunication: ", p), err) }
    if err := p.SummaryCommunication.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SummaryCommunication), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:summaryCommunication: ", p), err) }
  }
  return err
}

func (p *Summary) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetConcepts() {
    if err := oprot.WriteFieldBegin("concepts", thrift.LIST, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:concepts: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Concepts)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Concepts {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:concepts: ", p), err) }
  }
  return err
}

func (p *Summary) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Summary(%+v)", *p)
}

// Attributes:
//  - Type
//  - Lang
type SummarizationCapability struct {
  Type SummarySourceType `thrift:"type,1,required" db:"type" json:"type"`
  Lang string `thrift:"lang,2,required" db:"lang" json:"lang"`
}

func NewSummarizationCapability() *SummarizationCapability {
  return &SummarizationCapability{}
}


func (p *SummarizationCapability) GetType() SummarySourceType {
  return p.Type
}

func (p *SummarizationCapability) GetLang() string {
  return p.Lang
}
func (p *SummarizationCapability) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetType bool = false;
  var issetLang bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetType = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
      issetLang = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetType{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Type is not set"));
  }
  if !issetLang{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Lang is not set"));
  }
  return nil
}

func (p *SummarizationCapability)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := SummarySourceType(v)
  p.Type = temp
}
  return nil
}

func (p *SummarizationCapability)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Lang = v
}
  return nil
}

func (p *SummarizationCapability) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SummarizationCapability"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SummarizationCapability) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("type", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:type: ", p), err) }
  if err := oprot.WriteI32(int32(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:type: ", p), err) }
  return err
}

func (p *SummarizationCapability) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("lang", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:lang: ", p), err) }
  if err := oprot.WriteString(string(p.Lang)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.lang (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:lang: ", p), err) }
  return err
}

func (p *SummarizationCapability) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SummarizationCapability(%+v)", *p)
}

type SummarizationService interface {
Service

  // Parameters:
  //  - Query
  Summarize(query *SummarizationRequest) (r *Summary, err error)
  GetCapabilities() (r []*SummarizationCapability, err error)
}

type SummarizationServiceClient struct {
  *ServiceClient
}

func NewSummarizationServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *SummarizationServiceClient {
  return &SummarizationServiceClient{ServiceClient: NewServiceClientFactory(t, f)}}

func NewSummarizationServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *SummarizationServiceClient {
  return &SummarizationServiceClient{ServiceClient: NewServiceClientProtocol(t, iprot, oprot)}
}

// Parameters:
//  - Query
func (p *SummarizationServiceClient) Summarize(query *SummarizationRequest) (r *Summary, err error) {
  if err = p.sendSummarize(query); err != nil { return }
  return p.recvSummarize()
}

func (p *SummarizationServiceClient) sendSummarize(query *SummarizationRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("summarize", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := SummarizationServiceSummarizeArgs{
  Query : query,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *SummarizationServiceClient) recvSummarize() (value *Summary, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "summarize" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "summarize failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "summarize failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error3 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error4 error
    error4, err = error3.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error4
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "summarize failed: invalid message type")
    return
  }
  result := SummarizationServiceSummarizeResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ex != nil {
    err = result.Ex
    return 
  }
  value = result.GetSuccess()
  return
}

func (p *SummarizationServiceClient) GetCapabilities() (r []*SummarizationCapability, err error) {
  if err = p.sendGetCapabilities(); err != nil { return }
  return p.recvGetCapabilities()
}

func (p *SummarizationServiceClient) sendGetCapabilities()(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("getCapabilities", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := SummarizationServiceGetCapabilitiesArgs{
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *SummarizationServiceClient) recvGetCapabilities() (value []*SummarizationCapability, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "getCapabilities" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getCapabilities failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getCapabilities failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error5 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error6 error
    error6, err = error5.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error6
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getCapabilities failed: invalid message type")
    return
  }
  result := SummarizationServiceGetCapabilitiesResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ex != nil {
    err = result.Ex
    return 
  }
  value = result.GetSuccess()
  return
}


type SummarizationServiceProcessor struct {
  *ServiceProcessor
}

func NewSummarizationServiceProcessor(handler SummarizationService) *SummarizationServiceProcessor {
  self7 := &SummarizationServiceProcessor{NewServiceProcessor(handler)}
  self7.AddToProcessorMap("summarize", &summarizationServiceProcessorSummarize{handler:handler})
  self7.AddToProcessorMap("getCapabilities", &summarizationServiceProcessorGetCapabilities{handler:handler})
  return self7
}

type summarizationServiceProcessorSummarize struct {
  handler SummarizationService
}

func (p *summarizationServiceProcessorSummarize) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := SummarizationServiceSummarizeArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("summarize", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := SummarizationServiceSummarizeResult{}
var retval *Summary
  var err2 error
  if retval, err2 = p.handler.Summarize(args.Query); err2 != nil {
  switch v := err2.(type) {
    case *ServicesException:
  result.Ex = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing summarize: " + err2.Error())
    oprot.WriteMessageBegin("summarize", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("summarize", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type summarizationServiceProcessorGetCapabilities struct {
  handler SummarizationService
}

func (p *summarizationServiceProcessorGetCapabilities) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := SummarizationServiceGetCapabilitiesArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getCapabilities", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := SummarizationServiceGetCapabilitiesResult{}
var retval []*SummarizationCapability
  var err2 error
  if retval, err2 = p.handler.GetCapabilities(); err2 != nil {
  switch v := err2.(type) {
    case *ServicesException:
  result.Ex = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getCapabilities: " + err2.Error())
    oprot.WriteMessageBegin("getCapabilities", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getCapabilities", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Query
type SummarizationServiceSummarizeArgs struct {
  Query *SummarizationRequest `thrift:"query,1" db:"query" json:"query"`
}

func NewSummarizationServiceSummarizeArgs() *SummarizationServiceSummarizeArgs {
  return &SummarizationServiceSummarizeArgs{}
}

var SummarizationServiceSummarizeArgs_Query_DEFAULT *SummarizationRequest
func (p *SummarizationServiceSummarizeArgs) GetQuery() *SummarizationRequest {
  if !p.IsSetQuery() {
    return SummarizationServiceSummarizeArgs_Query_DEFAULT
  }
return p.Query
}
func (p *SummarizationServiceSummarizeArgs) IsSetQuery() bool {
  return p.Query != nil
}

func (p *SummarizationServiceSummarizeArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SummarizationServiceSummarizeArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Query = &SummarizationRequest{}
  if err := p.Query.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Query), err)
  }
  return nil
}

func (p *SummarizationServiceSummarizeArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("summarize_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SummarizationServiceSummarizeArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("query", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:query: ", p), err) }
  if err := p.Query.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Query), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:query: ", p), err) }
  return err
}

func (p *SummarizationServiceSummarizeArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SummarizationServiceSummarizeArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex
type SummarizationServiceSummarizeResult struct {
  Success *Summary `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ex *ServicesException `thrift:"ex,1" db:"ex" json:"ex,omitempty"`
}

func NewSummarizationServiceSummarizeResult() *SummarizationServiceSummarizeResult {
  return &SummarizationServiceSummarizeResult{}
}

var SummarizationServiceSummarizeResult_Success_DEFAULT *Summary
func (p *SummarizationServiceSummarizeResult) GetSuccess() *Summary {
  if !p.IsSetSuccess() {
    return SummarizationServiceSummarizeResult_Success_DEFAULT
  }
return p.Success
}
var SummarizationServiceSummarizeResult_Ex_DEFAULT *ServicesException
func (p *SummarizationServiceSummarizeResult) GetEx() *ServicesException {
  if !p.IsSetEx() {
    return SummarizationServiceSummarizeResult_Ex_DEFAULT
  }
return p.Ex
}
func (p *SummarizationServiceSummarizeResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *SummarizationServiceSummarizeResult) IsSetEx() bool {
  return p.Ex != nil
}

func (p *SummarizationServiceSummarizeResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SummarizationServiceSummarizeResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &Summary{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *SummarizationServiceSummarizeResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ex = &ServicesException{}
  if err := p.Ex.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
  }
  return nil
}

func (p *SummarizationServiceSummarizeResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("summarize_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SummarizationServiceSummarizeResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *SummarizationServiceSummarizeResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetEx() {
    if err := oprot.WriteFieldBegin("ex", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err) }
    if err := p.Ex.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err) }
  }
  return err
}

func (p *SummarizationServiceSummarizeResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SummarizationServiceSummarizeResult(%+v)", *p)
}

type SummarizationServiceGetCapabilitiesArgs struct {
}

func NewSummarizationServiceGetCapabilitiesArgs() *SummarizationServiceGetCapabilitiesArgs {
  return &SummarizationServiceGetCapabilitiesArgs{}
}

func (p *SummarizationServiceGetCapabilitiesArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SummarizationServiceGetCapabilitiesArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getCapabilities_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SummarizationServiceGetCapabilitiesArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SummarizationServiceGetCapabilitiesArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex
type SummarizationServiceGetCapabilitiesResult struct {
  Success []*SummarizationCapability `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ex *ServicesException `thrift:"ex,1" db:"ex" json:"ex,omitempty"`
}

func NewSummarizationServiceGetCapabilitiesResult() *SummarizationServiceGetCapabilitiesResult {
  return &SummarizationServiceGetCapabilitiesResult{}
}

var SummarizationServiceGetCapabilitiesResult_Success_DEFAULT []*SummarizationCapability

func (p *SummarizationServiceGetCapabilitiesResult) GetSuccess() []*SummarizationCapability {
  return p.Success
}
var SummarizationServiceGetCapabilitiesResult_Ex_DEFAULT *ServicesException
func (p *SummarizationServiceGetCapabilitiesResult) GetEx() *ServicesException {
  if !p.IsSetEx() {
    return SummarizationServiceGetCapabilitiesResult_Ex_DEFAULT
  }
return p.Ex
}
func (p *SummarizationServiceGetCapabilitiesResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *SummarizationServiceGetCapabilitiesResult) IsSetEx() bool {
  return p.Ex != nil
}

func (p *SummarizationServiceGetCapabilitiesResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SummarizationServiceGetCapabilitiesResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*SummarizationCapability, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem8 := &SummarizationCapability{}
    if err := _elem8.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem8), err)
    }
    p.Success = append(p.Success, _elem8)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *SummarizationServiceGetCapabilitiesResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ex = &ServicesException{}
  if err := p.Ex.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
  }
  return nil
}

func (p *SummarizationServiceGetCapabilitiesResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getCapabilities_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SummarizationServiceGetCapabilitiesResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *SummarizationServiceGetCapabilitiesResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetEx() {
    if err := oprot.WriteFieldBegin("ex", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err) }
    if err := p.Ex.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err) }
  }
  return err
}

func (p *SummarizationServiceGetCapabilitiesResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SummarizationServiceGetCapabilitiesResult(%+v)", *p)
}


