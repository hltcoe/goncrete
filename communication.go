// Autogenerated by Thrift Compiler (0.10.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package goncrete

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"

)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

// A structure that represents a 'tagging' of a Communication. These
// might be labels or annotations on a particular communcation.
// 
// For example, this structure might be used to describe the topics
// discussed in a Communication. The taggingType might be 'topic', and
// the tagList might include 'politics' and 'science'.
// 
// Attributes:
//  - UUID: A unique identifier for this CommunicationTagging object.
//  - Metadata: AnnotationMetadata to support this CommunicationTagging object.
//  - TaggingType: A string that captures the type of this CommunicationTagging
// object. For example: 'topic' or 'gender'.
//  - TagList: A list of strings that represent different tags related to the taggingType.
// For example, if the taggingType is 'topic', some example tags might be
// 'politics', 'science', etc.
//  - ConfidenceList: A list of doubles, parallel to the list of strings in tagList,
// that indicate the confidences of each tag.
type CommunicationTagging struct {
  UUID *UUID `thrift:"uuid,1,required" db:"uuid" json:"uuid"`
  Metadata *AnnotationMetadata `thrift:"metadata,2,required" db:"metadata" json:"metadata"`
  TaggingType string `thrift:"taggingType,3,required" db:"taggingType" json:"taggingType"`
  TagList []string `thrift:"tagList,4" db:"tagList" json:"tagList,omitempty"`
  ConfidenceList []float64 `thrift:"confidenceList,5" db:"confidenceList" json:"confidenceList,omitempty"`
}

func NewCommunicationTagging() *CommunicationTagging {
  return &CommunicationTagging{}
}

var CommunicationTagging_UUID_DEFAULT *UUID
func (p *CommunicationTagging) GetUUID() *UUID {
  if !p.IsSetUUID() {
    return CommunicationTagging_UUID_DEFAULT
  }
return p.UUID
}
var CommunicationTagging_Metadata_DEFAULT *AnnotationMetadata
func (p *CommunicationTagging) GetMetadata() *AnnotationMetadata {
  if !p.IsSetMetadata() {
    return CommunicationTagging_Metadata_DEFAULT
  }
return p.Metadata
}

func (p *CommunicationTagging) GetTaggingType() string {
  return p.TaggingType
}
var CommunicationTagging_TagList_DEFAULT []string

func (p *CommunicationTagging) GetTagList() []string {
  return p.TagList
}
var CommunicationTagging_ConfidenceList_DEFAULT []float64

func (p *CommunicationTagging) GetConfidenceList() []float64 {
  return p.ConfidenceList
}
func (p *CommunicationTagging) IsSetUUID() bool {
  return p.UUID != nil
}

func (p *CommunicationTagging) IsSetMetadata() bool {
  return p.Metadata != nil
}

func (p *CommunicationTagging) IsSetTagList() bool {
  return p.TagList != nil
}

func (p *CommunicationTagging) IsSetConfidenceList() bool {
  return p.ConfidenceList != nil
}

func (p *CommunicationTagging) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetUUID bool = false;
  var issetMetadata bool = false;
  var issetTaggingType bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetUUID = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
      issetMetadata = true
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
      issetTaggingType = true
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetUUID{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field UUID is not set"));
  }
  if !issetMetadata{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Metadata is not set"));
  }
  if !issetTaggingType{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field TaggingType is not set"));
  }
  return nil
}

func (p *CommunicationTagging)  ReadField1(iprot thrift.TProtocol) error {
  p.UUID = &UUID{}
  if err := p.UUID.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UUID), err)
  }
  return nil
}

func (p *CommunicationTagging)  ReadField2(iprot thrift.TProtocol) error {
  p.Metadata = &AnnotationMetadata{
  KBest: 1,
}
  if err := p.Metadata.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Metadata), err)
  }
  return nil
}

func (p *CommunicationTagging)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.TaggingType = v
}
  return nil
}

func (p *CommunicationTagging)  ReadField4(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.TagList =  tSlice
  for i := 0; i < size; i ++ {
var _elem0 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem0 = v
}
    p.TagList = append(p.TagList, _elem0)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *CommunicationTagging)  ReadField5(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]float64, 0, size)
  p.ConfidenceList =  tSlice
  for i := 0; i < size; i ++ {
var _elem1 float64
    if v, err := iprot.ReadDouble(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem1 = v
}
    p.ConfidenceList = append(p.ConfidenceList, _elem1)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *CommunicationTagging) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("CommunicationTagging"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CommunicationTagging) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("uuid", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:uuid: ", p), err) }
  if err := p.UUID.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UUID), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:uuid: ", p), err) }
  return err
}

func (p *CommunicationTagging) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("metadata", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:metadata: ", p), err) }
  if err := p.Metadata.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Metadata), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:metadata: ", p), err) }
  return err
}

func (p *CommunicationTagging) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("taggingType", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:taggingType: ", p), err) }
  if err := oprot.WriteString(string(p.TaggingType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.taggingType (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:taggingType: ", p), err) }
  return err
}

func (p *CommunicationTagging) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetTagList() {
    if err := oprot.WriteFieldBegin("tagList", thrift.LIST, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:tagList: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRING, len(p.TagList)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.TagList {
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:tagList: ", p), err) }
  }
  return err
}

func (p *CommunicationTagging) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetConfidenceList() {
    if err := oprot.WriteFieldBegin("confidenceList", thrift.LIST, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:confidenceList: ", p), err) }
    if err := oprot.WriteListBegin(thrift.DOUBLE, len(p.ConfidenceList)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.ConfidenceList {
      if err := oprot.WriteDouble(float64(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:confidenceList: ", p), err) }
  }
  return err
}

func (p *CommunicationTagging) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CommunicationTagging(%+v)", *p)
}

// A single communication instance, containing linguistic content
// generated by a single speaker or author.  This type is used for
// both inter-personal communications (such as phone calls or
// conversations) and third-party communications (such as news
// articles).
// 
// Each communication instance is grounded by its original
// (unannotated) contents, which should be stored in either the
// "text" field (for text communications) or the "audio" field (for
// audio communications).  If the communication is not available in
// its original form, then these fields should store the
// communication in the least-processed form available.
// 
// Attributes:
//  - ID: Stable identifier for this communication, identifying both the
// name of the source corpus and the document that it corresponds to
// in that corpus.
//  - UUID: Universally unique identifier for this communication instance.
// This is generated randomly, and can *not* be mapped back to the
// source corpus. It is used as a target for symbolic "pointers".
//  - Type: A short, corpus-specific term characterizing the nature of the
// communication; may change in a future version of concrete.
// Often used for filtering.  For example, Gigaword uses
// the type "story" to distinguish typical news articles from
// weekly summaries ("multi"), editorial advisories ("advis"), etc.
// At present, this value is typically a literal form from the
// originating corpus: as a result, a type marked 'other' may have
// different meanings across different corpora.
//  - Text: The full text contents of this communication in its original
// form, or in the least-processed form available, if the original
// is not available.
//  - StartTime: The time when this communication started (in unix time UTC --
// i.e., seconds since January 1, 1970).
//  - EndTime: The time when this communication ended (in unix time UTC --
// i.e., seconds since January 1, 1970).
//  - CommunicationTaggingList: A list of CommunicationTagging objects that can support this
// Communication. CommunicationTagging objects can be used to
// annotate Communications with topics, gender identification, etc.
//  - Metadata: metadata.AnnotationMetadata to support this particular communication.
// 
// Communications derived from other communications should
// indicate in this metadata object their dependency
// to the original communication ID.
//  - KeyValueMap: A catch-all store of keys and values. Use sparingly!
//  - LidList: Theories about the languages that are present in this
// communication.
//  - SectionList: Theory about the block structure of this communication.
//  - EntityMentionSetList: Theories about which spans of text are used to mention entities
// in this communication.
//  - EntitySetList: Theories about what entities are discussed in this
// communication, with pointers to individual mentions.
//  - SituationMentionSetList: Theories about what situations are explicitly mentioned in this
// communication.
//  - SituationSetList: Theories about what situations are asserted in this
// communication.
//  - OriginalText: Optional original text field that points back to an original
// communication.
// 
// This field can be populated for sake of convenience when creating
// "perspective" communication (communications that are based on
// highly destructive changes to an original communication [e.g.,
// via MT]). This allows developers to quickly access the original
// text that this perspective communication is based off of.
//  - Sound: The full audio contents of this communication in its original
// form, or in the least-processed form available, if the original
// is not available.
//  - CommunicationMetadata: Metadata about this specific Communication, such as information
// about its author, information specific to this Communication
// or Communications like it (info from an API, for example), etc.
type Communication struct {
  ID string `thrift:"id,1,required" db:"id" json:"id"`
  UUID *UUID `thrift:"uuid,2,required" db:"uuid" json:"uuid"`
  Type string `thrift:"type,3,required" db:"type" json:"type"`
  Text *string `thrift:"text,4" db:"text" json:"text,omitempty"`
  StartTime *int64 `thrift:"startTime,5" db:"startTime" json:"startTime,omitempty"`
  EndTime *int64 `thrift:"endTime,6" db:"endTime" json:"endTime,omitempty"`
  CommunicationTaggingList []*CommunicationTagging `thrift:"communicationTaggingList,7" db:"communicationTaggingList" json:"communicationTaggingList,omitempty"`
  Metadata *AnnotationMetadata `thrift:"metadata,8,required" db:"metadata" json:"metadata"`
  KeyValueMap map[string]string `thrift:"keyValueMap,9" db:"keyValueMap" json:"keyValueMap,omitempty"`
  LidList []*LanguageIdentification `thrift:"lidList,10" db:"lidList" json:"lidList,omitempty"`
  SectionList []*Section `thrift:"sectionList,11" db:"sectionList" json:"sectionList,omitempty"`
  EntityMentionSetList []*EntityMentionSet `thrift:"entityMentionSetList,12" db:"entityMentionSetList" json:"entityMentionSetList,omitempty"`
  EntitySetList []*EntitySet `thrift:"entitySetList,13" db:"entitySetList" json:"entitySetList,omitempty"`
  SituationMentionSetList []*SituationMentionSet `thrift:"situationMentionSetList,14" db:"situationMentionSetList" json:"situationMentionSetList,omitempty"`
  SituationSetList []*SituationSet `thrift:"situationSetList,15" db:"situationSetList" json:"situationSetList,omitempty"`
  OriginalText *string `thrift:"originalText,16" db:"originalText" json:"originalText,omitempty"`
  // unused fields # 17 to 19
  Sound *Sound `thrift:"sound,20" db:"sound" json:"sound,omitempty"`
  CommunicationMetadata *CommunicationMetadata `thrift:"communicationMetadata,21" db:"communicationMetadata" json:"communicationMetadata,omitempty"`
}

func NewCommunication() *Communication {
  return &Communication{}
}


func (p *Communication) GetID() string {
  return p.ID
}
var Communication_UUID_DEFAULT *UUID
func (p *Communication) GetUUID() *UUID {
  if !p.IsSetUUID() {
    return Communication_UUID_DEFAULT
  }
return p.UUID
}

func (p *Communication) GetType() string {
  return p.Type
}
var Communication_Text_DEFAULT string
func (p *Communication) GetText() string {
  if !p.IsSetText() {
    return Communication_Text_DEFAULT
  }
return *p.Text
}
var Communication_StartTime_DEFAULT int64
func (p *Communication) GetStartTime() int64 {
  if !p.IsSetStartTime() {
    return Communication_StartTime_DEFAULT
  }
return *p.StartTime
}
var Communication_EndTime_DEFAULT int64
func (p *Communication) GetEndTime() int64 {
  if !p.IsSetEndTime() {
    return Communication_EndTime_DEFAULT
  }
return *p.EndTime
}
var Communication_CommunicationTaggingList_DEFAULT []*CommunicationTagging

func (p *Communication) GetCommunicationTaggingList() []*CommunicationTagging {
  return p.CommunicationTaggingList
}
var Communication_Metadata_DEFAULT *AnnotationMetadata
func (p *Communication) GetMetadata() *AnnotationMetadata {
  if !p.IsSetMetadata() {
    return Communication_Metadata_DEFAULT
  }
return p.Metadata
}
var Communication_KeyValueMap_DEFAULT map[string]string

func (p *Communication) GetKeyValueMap() map[string]string {
  return p.KeyValueMap
}
var Communication_LidList_DEFAULT []*LanguageIdentification

func (p *Communication) GetLidList() []*LanguageIdentification {
  return p.LidList
}
var Communication_SectionList_DEFAULT []*Section

func (p *Communication) GetSectionList() []*Section {
  return p.SectionList
}
var Communication_EntityMentionSetList_DEFAULT []*EntityMentionSet

func (p *Communication) GetEntityMentionSetList() []*EntityMentionSet {
  return p.EntityMentionSetList
}
var Communication_EntitySetList_DEFAULT []*EntitySet

func (p *Communication) GetEntitySetList() []*EntitySet {
  return p.EntitySetList
}
var Communication_SituationMentionSetList_DEFAULT []*SituationMentionSet

func (p *Communication) GetSituationMentionSetList() []*SituationMentionSet {
  return p.SituationMentionSetList
}
var Communication_SituationSetList_DEFAULT []*SituationSet

func (p *Communication) GetSituationSetList() []*SituationSet {
  return p.SituationSetList
}
var Communication_OriginalText_DEFAULT string
func (p *Communication) GetOriginalText() string {
  if !p.IsSetOriginalText() {
    return Communication_OriginalText_DEFAULT
  }
return *p.OriginalText
}
var Communication_Sound_DEFAULT *Sound
func (p *Communication) GetSound() *Sound {
  if !p.IsSetSound() {
    return Communication_Sound_DEFAULT
  }
return p.Sound
}
var Communication_CommunicationMetadata_DEFAULT *CommunicationMetadata
func (p *Communication) GetCommunicationMetadata() *CommunicationMetadata {
  if !p.IsSetCommunicationMetadata() {
    return Communication_CommunicationMetadata_DEFAULT
  }
return p.CommunicationMetadata
}
func (p *Communication) IsSetUUID() bool {
  return p.UUID != nil
}

func (p *Communication) IsSetText() bool {
  return p.Text != nil
}

func (p *Communication) IsSetStartTime() bool {
  return p.StartTime != nil
}

func (p *Communication) IsSetEndTime() bool {
  return p.EndTime != nil
}

func (p *Communication) IsSetCommunicationTaggingList() bool {
  return p.CommunicationTaggingList != nil
}

func (p *Communication) IsSetMetadata() bool {
  return p.Metadata != nil
}

func (p *Communication) IsSetKeyValueMap() bool {
  return p.KeyValueMap != nil
}

func (p *Communication) IsSetLidList() bool {
  return p.LidList != nil
}

func (p *Communication) IsSetSectionList() bool {
  return p.SectionList != nil
}

func (p *Communication) IsSetEntityMentionSetList() bool {
  return p.EntityMentionSetList != nil
}

func (p *Communication) IsSetEntitySetList() bool {
  return p.EntitySetList != nil
}

func (p *Communication) IsSetSituationMentionSetList() bool {
  return p.SituationMentionSetList != nil
}

func (p *Communication) IsSetSituationSetList() bool {
  return p.SituationSetList != nil
}

func (p *Communication) IsSetOriginalText() bool {
  return p.OriginalText != nil
}

func (p *Communication) IsSetSound() bool {
  return p.Sound != nil
}

func (p *Communication) IsSetCommunicationMetadata() bool {
  return p.CommunicationMetadata != nil
}

func (p *Communication) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetID bool = false;
  var issetUUID bool = false;
  var issetType bool = false;
  var issetMetadata bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetID = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
      issetUUID = true
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
      issetType = true
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    case 7:
      if err := p.ReadField7(iprot); err != nil {
        return err
      }
    case 8:
      if err := p.ReadField8(iprot); err != nil {
        return err
      }
      issetMetadata = true
    case 9:
      if err := p.ReadField9(iprot); err != nil {
        return err
      }
    case 10:
      if err := p.ReadField10(iprot); err != nil {
        return err
      }
    case 11:
      if err := p.ReadField11(iprot); err != nil {
        return err
      }
    case 12:
      if err := p.ReadField12(iprot); err != nil {
        return err
      }
    case 13:
      if err := p.ReadField13(iprot); err != nil {
        return err
      }
    case 14:
      if err := p.ReadField14(iprot); err != nil {
        return err
      }
    case 15:
      if err := p.ReadField15(iprot); err != nil {
        return err
      }
    case 16:
      if err := p.ReadField16(iprot); err != nil {
        return err
      }
    case 20:
      if err := p.ReadField20(iprot); err != nil {
        return err
      }
    case 21:
      if err := p.ReadField21(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetID{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ID is not set"));
  }
  if !issetUUID{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field UUID is not set"));
  }
  if !issetType{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Type is not set"));
  }
  if !issetMetadata{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Metadata is not set"));
  }
  return nil
}

func (p *Communication)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *Communication)  ReadField2(iprot thrift.TProtocol) error {
  p.UUID = &UUID{}
  if err := p.UUID.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UUID), err)
  }
  return nil
}

func (p *Communication)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Type = v
}
  return nil
}

func (p *Communication)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Text = &v
}
  return nil
}

func (p *Communication)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.StartTime = &v
}
  return nil
}

func (p *Communication)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.EndTime = &v
}
  return nil
}

func (p *Communication)  ReadField7(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*CommunicationTagging, 0, size)
  p.CommunicationTaggingList =  tSlice
  for i := 0; i < size; i ++ {
    _elem2 := &CommunicationTagging{}
    if err := _elem2.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem2), err)
    }
    p.CommunicationTaggingList = append(p.CommunicationTaggingList, _elem2)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *Communication)  ReadField8(iprot thrift.TProtocol) error {
  p.Metadata = &AnnotationMetadata{
  KBest: 1,
}
  if err := p.Metadata.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Metadata), err)
  }
  return nil
}

func (p *Communication)  ReadField9(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.KeyValueMap =  tMap
  for i := 0; i < size; i ++ {
var _key3 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key3 = v
}
var _val4 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val4 = v
}
    p.KeyValueMap[_key3] = _val4
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *Communication)  ReadField10(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*LanguageIdentification, 0, size)
  p.LidList =  tSlice
  for i := 0; i < size; i ++ {
    _elem5 := &LanguageIdentification{}
    if err := _elem5.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem5), err)
    }
    p.LidList = append(p.LidList, _elem5)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *Communication)  ReadField11(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Section, 0, size)
  p.SectionList =  tSlice
  for i := 0; i < size; i ++ {
    _elem6 := &Section{}
    if err := _elem6.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem6), err)
    }
    p.SectionList = append(p.SectionList, _elem6)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *Communication)  ReadField12(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*EntityMentionSet, 0, size)
  p.EntityMentionSetList =  tSlice
  for i := 0; i < size; i ++ {
    _elem7 := &EntityMentionSet{}
    if err := _elem7.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem7), err)
    }
    p.EntityMentionSetList = append(p.EntityMentionSetList, _elem7)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *Communication)  ReadField13(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*EntitySet, 0, size)
  p.EntitySetList =  tSlice
  for i := 0; i < size; i ++ {
    _elem8 := &EntitySet{}
    if err := _elem8.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem8), err)
    }
    p.EntitySetList = append(p.EntitySetList, _elem8)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *Communication)  ReadField14(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*SituationMentionSet, 0, size)
  p.SituationMentionSetList =  tSlice
  for i := 0; i < size; i ++ {
    _elem9 := &SituationMentionSet{}
    if err := _elem9.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem9), err)
    }
    p.SituationMentionSetList = append(p.SituationMentionSetList, _elem9)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *Communication)  ReadField15(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*SituationSet, 0, size)
  p.SituationSetList =  tSlice
  for i := 0; i < size; i ++ {
    _elem10 := &SituationSet{}
    if err := _elem10.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem10), err)
    }
    p.SituationSetList = append(p.SituationSetList, _elem10)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *Communication)  ReadField16(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 16: ", err)
} else {
  p.OriginalText = &v
}
  return nil
}

func (p *Communication)  ReadField20(iprot thrift.TProtocol) error {
  p.Sound = &Sound{}
  if err := p.Sound.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Sound), err)
  }
  return nil
}

func (p *Communication)  ReadField21(iprot thrift.TProtocol) error {
  p.CommunicationMetadata = &CommunicationMetadata{}
  if err := p.CommunicationMetadata.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.CommunicationMetadata), err)
  }
  return nil
}

func (p *Communication) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Communication"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField11(oprot); err != nil { return err }
    if err := p.writeField12(oprot); err != nil { return err }
    if err := p.writeField13(oprot); err != nil { return err }
    if err := p.writeField14(oprot); err != nil { return err }
    if err := p.writeField15(oprot); err != nil { return err }
    if err := p.writeField16(oprot); err != nil { return err }
    if err := p.writeField20(oprot); err != nil { return err }
    if err := p.writeField21(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Communication) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := oprot.WriteString(string(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *Communication) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("uuid", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:uuid: ", p), err) }
  if err := p.UUID.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UUID), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:uuid: ", p), err) }
  return err
}

func (p *Communication) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("type", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:type: ", p), err) }
  if err := oprot.WriteString(string(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:type: ", p), err) }
  return err
}

func (p *Communication) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetText() {
    if err := oprot.WriteFieldBegin("text", thrift.STRING, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:text: ", p), err) }
    if err := oprot.WriteString(string(*p.Text)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.text (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:text: ", p), err) }
  }
  return err
}

func (p *Communication) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetStartTime() {
    if err := oprot.WriteFieldBegin("startTime", thrift.I64, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:startTime: ", p), err) }
    if err := oprot.WriteI64(int64(*p.StartTime)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.startTime (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:startTime: ", p), err) }
  }
  return err
}

func (p *Communication) writeField6(oprot thrift.TProtocol) (err error) {
  if p.IsSetEndTime() {
    if err := oprot.WriteFieldBegin("endTime", thrift.I64, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:endTime: ", p), err) }
    if err := oprot.WriteI64(int64(*p.EndTime)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.endTime (6) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:endTime: ", p), err) }
  }
  return err
}

func (p *Communication) writeField7(oprot thrift.TProtocol) (err error) {
  if p.IsSetCommunicationTaggingList() {
    if err := oprot.WriteFieldBegin("communicationTaggingList", thrift.LIST, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:communicationTaggingList: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.CommunicationTaggingList)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.CommunicationTaggingList {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:communicationTaggingList: ", p), err) }
  }
  return err
}

func (p *Communication) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("metadata", thrift.STRUCT, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:metadata: ", p), err) }
  if err := p.Metadata.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Metadata), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:metadata: ", p), err) }
  return err
}

func (p *Communication) writeField9(oprot thrift.TProtocol) (err error) {
  if p.IsSetKeyValueMap() {
    if err := oprot.WriteFieldBegin("keyValueMap", thrift.MAP, 9); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:keyValueMap: ", p), err) }
    if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.KeyValueMap)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range p.KeyValueMap {
      if err := oprot.WriteString(string(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteMapEnd(); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 9:keyValueMap: ", p), err) }
  }
  return err
}

func (p *Communication) writeField10(oprot thrift.TProtocol) (err error) {
  if p.IsSetLidList() {
    if err := oprot.WriteFieldBegin("lidList", thrift.LIST, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:lidList: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.LidList)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.LidList {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:lidList: ", p), err) }
  }
  return err
}

func (p *Communication) writeField11(oprot thrift.TProtocol) (err error) {
  if p.IsSetSectionList() {
    if err := oprot.WriteFieldBegin("sectionList", thrift.LIST, 11); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:sectionList: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.SectionList)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.SectionList {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 11:sectionList: ", p), err) }
  }
  return err
}

func (p *Communication) writeField12(oprot thrift.TProtocol) (err error) {
  if p.IsSetEntityMentionSetList() {
    if err := oprot.WriteFieldBegin("entityMentionSetList", thrift.LIST, 12); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:entityMentionSetList: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.EntityMentionSetList)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.EntityMentionSetList {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 12:entityMentionSetList: ", p), err) }
  }
  return err
}

func (p *Communication) writeField13(oprot thrift.TProtocol) (err error) {
  if p.IsSetEntitySetList() {
    if err := oprot.WriteFieldBegin("entitySetList", thrift.LIST, 13); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:entitySetList: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.EntitySetList)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.EntitySetList {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 13:entitySetList: ", p), err) }
  }
  return err
}

func (p *Communication) writeField14(oprot thrift.TProtocol) (err error) {
  if p.IsSetSituationMentionSetList() {
    if err := oprot.WriteFieldBegin("situationMentionSetList", thrift.LIST, 14); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:situationMentionSetList: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.SituationMentionSetList)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.SituationMentionSetList {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 14:situationMentionSetList: ", p), err) }
  }
  return err
}

func (p *Communication) writeField15(oprot thrift.TProtocol) (err error) {
  if p.IsSetSituationSetList() {
    if err := oprot.WriteFieldBegin("situationSetList", thrift.LIST, 15); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:situationSetList: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.SituationSetList)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.SituationSetList {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 15:situationSetList: ", p), err) }
  }
  return err
}

func (p *Communication) writeField16(oprot thrift.TProtocol) (err error) {
  if p.IsSetOriginalText() {
    if err := oprot.WriteFieldBegin("originalText", thrift.STRING, 16); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:originalText: ", p), err) }
    if err := oprot.WriteString(string(*p.OriginalText)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.originalText (16) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 16:originalText: ", p), err) }
  }
  return err
}

func (p *Communication) writeField20(oprot thrift.TProtocol) (err error) {
  if p.IsSetSound() {
    if err := oprot.WriteFieldBegin("sound", thrift.STRUCT, 20); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:sound: ", p), err) }
    if err := p.Sound.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Sound), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 20:sound: ", p), err) }
  }
  return err
}

func (p *Communication) writeField21(oprot thrift.TProtocol) (err error) {
  if p.IsSetCommunicationMetadata() {
    if err := oprot.WriteFieldBegin("communicationMetadata", thrift.STRUCT, 21); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 21:communicationMetadata: ", p), err) }
    if err := p.CommunicationMetadata.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.CommunicationMetadata), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 21:communicationMetadata: ", p), err) }
  }
  return err
}

func (p *Communication) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Communication(%+v)", *p)
}

// A structure that represents a collection of Communications.
// 
// Attributes:
//  - CommunicationIdList: A list of Communication UUIDs that this CommunicationSet
// represents.
// 
// This field may be absent if this CommunicationSet represents
// a large corpus. If absent, 'corpus' field should be present.
//  - Corpus: The name of a corpus or other document body that this
// CommunicationSet represents.
// 
// Should be present if 'communicationIdList' is absent.
//  - EntityMentionClusterList: A list of Clustering objects that represent a
// group of EntityMentions that are a part of this
// CommunicationSet.
//  - EntityClusterList: A list of Clustering objects that represent a
// group of Entities that are a part of this
// CommunicationSet.
//  - SituationMentionClusterList: A list of Clustering objects that represent a
// group of SituationMentions that are a part of this
// CommunicationSet.
//  - SituationClusterList: A list of Clustering objects that represent a
// group of Situations that are a part of this
// CommunicationSet.
type CommunicationSet struct {
  CommunicationIdList []*UUID `thrift:"communicationIdList,1" db:"communicationIdList" json:"communicationIdList,omitempty"`
  Corpus *string `thrift:"corpus,2" db:"corpus" json:"corpus,omitempty"`
  EntityMentionClusterList []*Clustering `thrift:"entityMentionClusterList,3" db:"entityMentionClusterList" json:"entityMentionClusterList,omitempty"`
  EntityClusterList []*Clustering `thrift:"entityClusterList,4" db:"entityClusterList" json:"entityClusterList,omitempty"`
  SituationMentionClusterList []*Clustering `thrift:"situationMentionClusterList,5" db:"situationMentionClusterList" json:"situationMentionClusterList,omitempty"`
  SituationClusterList []*Clustering `thrift:"situationClusterList,6" db:"situationClusterList" json:"situationClusterList,omitempty"`
}

func NewCommunicationSet() *CommunicationSet {
  return &CommunicationSet{}
}

var CommunicationSet_CommunicationIdList_DEFAULT []*UUID

func (p *CommunicationSet) GetCommunicationIdList() []*UUID {
  return p.CommunicationIdList
}
var CommunicationSet_Corpus_DEFAULT string
func (p *CommunicationSet) GetCorpus() string {
  if !p.IsSetCorpus() {
    return CommunicationSet_Corpus_DEFAULT
  }
return *p.Corpus
}
var CommunicationSet_EntityMentionClusterList_DEFAULT []*Clustering

func (p *CommunicationSet) GetEntityMentionClusterList() []*Clustering {
  return p.EntityMentionClusterList
}
var CommunicationSet_EntityClusterList_DEFAULT []*Clustering

func (p *CommunicationSet) GetEntityClusterList() []*Clustering {
  return p.EntityClusterList
}
var CommunicationSet_SituationMentionClusterList_DEFAULT []*Clustering

func (p *CommunicationSet) GetSituationMentionClusterList() []*Clustering {
  return p.SituationMentionClusterList
}
var CommunicationSet_SituationClusterList_DEFAULT []*Clustering

func (p *CommunicationSet) GetSituationClusterList() []*Clustering {
  return p.SituationClusterList
}
func (p *CommunicationSet) IsSetCommunicationIdList() bool {
  return p.CommunicationIdList != nil
}

func (p *CommunicationSet) IsSetCorpus() bool {
  return p.Corpus != nil
}

func (p *CommunicationSet) IsSetEntityMentionClusterList() bool {
  return p.EntityMentionClusterList != nil
}

func (p *CommunicationSet) IsSetEntityClusterList() bool {
  return p.EntityClusterList != nil
}

func (p *CommunicationSet) IsSetSituationMentionClusterList() bool {
  return p.SituationMentionClusterList != nil
}

func (p *CommunicationSet) IsSetSituationClusterList() bool {
  return p.SituationClusterList != nil
}

func (p *CommunicationSet) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CommunicationSet)  ReadField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*UUID, 0, size)
  p.CommunicationIdList =  tSlice
  for i := 0; i < size; i ++ {
    _elem11 := &UUID{}
    if err := _elem11.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem11), err)
    }
    p.CommunicationIdList = append(p.CommunicationIdList, _elem11)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *CommunicationSet)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Corpus = &v
}
  return nil
}

func (p *CommunicationSet)  ReadField3(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Clustering, 0, size)
  p.EntityMentionClusterList =  tSlice
  for i := 0; i < size; i ++ {
    _elem12 := &Clustering{}
    if err := _elem12.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem12), err)
    }
    p.EntityMentionClusterList = append(p.EntityMentionClusterList, _elem12)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *CommunicationSet)  ReadField4(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Clustering, 0, size)
  p.EntityClusterList =  tSlice
  for i := 0; i < size; i ++ {
    _elem13 := &Clustering{}
    if err := _elem13.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem13), err)
    }
    p.EntityClusterList = append(p.EntityClusterList, _elem13)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *CommunicationSet)  ReadField5(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Clustering, 0, size)
  p.SituationMentionClusterList =  tSlice
  for i := 0; i < size; i ++ {
    _elem14 := &Clustering{}
    if err := _elem14.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem14), err)
    }
    p.SituationMentionClusterList = append(p.SituationMentionClusterList, _elem14)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *CommunicationSet)  ReadField6(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Clustering, 0, size)
  p.SituationClusterList =  tSlice
  for i := 0; i < size; i ++ {
    _elem15 := &Clustering{}
    if err := _elem15.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem15), err)
    }
    p.SituationClusterList = append(p.SituationClusterList, _elem15)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *CommunicationSet) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("CommunicationSet"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CommunicationSet) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetCommunicationIdList() {
    if err := oprot.WriteFieldBegin("communicationIdList", thrift.LIST, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:communicationIdList: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.CommunicationIdList)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.CommunicationIdList {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:communicationIdList: ", p), err) }
  }
  return err
}

func (p *CommunicationSet) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetCorpus() {
    if err := oprot.WriteFieldBegin("corpus", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:corpus: ", p), err) }
    if err := oprot.WriteString(string(*p.Corpus)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.corpus (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:corpus: ", p), err) }
  }
  return err
}

func (p *CommunicationSet) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetEntityMentionClusterList() {
    if err := oprot.WriteFieldBegin("entityMentionClusterList", thrift.LIST, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:entityMentionClusterList: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.EntityMentionClusterList)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.EntityMentionClusterList {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:entityMentionClusterList: ", p), err) }
  }
  return err
}

func (p *CommunicationSet) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetEntityClusterList() {
    if err := oprot.WriteFieldBegin("entityClusterList", thrift.LIST, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:entityClusterList: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.EntityClusterList)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.EntityClusterList {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:entityClusterList: ", p), err) }
  }
  return err
}

func (p *CommunicationSet) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetSituationMentionClusterList() {
    if err := oprot.WriteFieldBegin("situationMentionClusterList", thrift.LIST, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:situationMentionClusterList: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.SituationMentionClusterList)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.SituationMentionClusterList {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:situationMentionClusterList: ", p), err) }
  }
  return err
}

func (p *CommunicationSet) writeField6(oprot thrift.TProtocol) (err error) {
  if p.IsSetSituationClusterList() {
    if err := oprot.WriteFieldBegin("situationClusterList", thrift.LIST, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:situationClusterList: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.SituationClusterList)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.SituationClusterList {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:situationClusterList: ", p), err) }
  }
  return err
}

func (p *CommunicationSet) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CommunicationSet(%+v)", *p)
}

