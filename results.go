// Autogenerated by Thrift Compiler (0.10.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package goncrete

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"

)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

type ResultsServerService interface {
Service

  // Register the specified search result for annotation.
  // 
  // If a name has not been assigned to the search query, one will be generated.
  // This service also requires that the user_id field be populated in the SearchQuery.
  // 
  // Parameters:
  //  - Result_
  //  - TaskType
  RegisterSearchResult_(result *SearchResult_, taskType AnnotationTaskType) (err error)
  // Get a list of search results for a particular annotation task
  // Set the limit to 0 to get all relevant search results
  // 
  // Parameters:
  //  - TaskType
  //  - Limit
  GetSearchResults(taskType AnnotationTaskType, limit int32) (r []*SearchResult_, err error)
  // Get a list of search results for a particular annotation task filtered by a user id
  // Set the limit to 0 to get all relevant search results
  // 
  // Parameters:
  //  - TaskType
  //  - UserId
  //  - Limit
  GetSearchResultsByUser(taskType AnnotationTaskType, userId string, limit int32) (r []*SearchResult_, err error)
  // Get the most recent search results for a user
  // 
  // Parameters:
  //  - UserId
  GetLatestSearchResult_(userId string) (r *SearchResult_, err error)
  // Get a search result object
  // 
  // Parameters:
  //  - SearchResultId
  GetSearchResult_(searchResultId *UUID) (r *SearchResult_, err error)
  // Start an annotation session
  // Returns a session id used in future session calls
  // 
  // Parameters:
  //  - SearchResultId
  //  - TaskType
  StartSession(searchResultId *UUID, taskType AnnotationTaskType) (r *UUID, err error)
  // Stops an annotation session
  // 
  // Parameters:
  //  - SessionId
  StopSession(sessionId *UUID) (err error)
  // Get next chunk of data to annotate
  // The client should use the Retriever service to access the data
  // 
  // Parameters:
  //  - SessionId
  GetNextChunk(sessionId *UUID) (r []*AnnotationUnitIdentifier, err error)
  // Submit an annotation for a session
  // 
  // Parameters:
  //  - SessionId
  //  - UnitId
  //  - Communication
  SubmitAnnotation(sessionId *UUID, unitId *AnnotationUnitIdentifier, communication *Communication) (err error)
}

type ResultsServerServiceClient struct {
  *ServiceClient
}

func NewResultsServerServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *ResultsServerServiceClient {
  return &ResultsServerServiceClient{ServiceClient: NewServiceClientFactory(t, f)}}

func NewResultsServerServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *ResultsServerServiceClient {
  return &ResultsServerServiceClient{ServiceClient: NewServiceClientProtocol(t, iprot, oprot)}
}

// Register the specified search result for annotation.
// 
// If a name has not been assigned to the search query, one will be generated.
// This service also requires that the user_id field be populated in the SearchQuery.
// 
// Parameters:
//  - Result_
//  - TaskType
func (p *ResultsServerServiceClient) RegisterSearchResult_(result *SearchResult_, taskType AnnotationTaskType) (err error) {
  if err = p.sendRegisterSearchResult_(result, taskType); err != nil { return }
  return p.recvRegisterSearchResult_()
}

func (p *ResultsServerServiceClient) sendRegisterSearchResult_(result *SearchResult_, taskType AnnotationTaskType)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("registerSearchResult", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := ResultsServerServiceRegisterSearchResultArgs{
  Result_ : result,
  TaskType : taskType,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *ResultsServerServiceClient) recvRegisterSearchResult_() (err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "registerSearchResult" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "registerSearchResult failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "registerSearchResult failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error0 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error1 error
    error1, err = error0.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error1
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "registerSearchResult failed: invalid message type")
    return
  }
  result := ResultsServerServiceRegisterSearchResultResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ex != nil {
    err = result.Ex
    return 
  }
  return
}

// Get a list of search results for a particular annotation task
// Set the limit to 0 to get all relevant search results
// 
// Parameters:
//  - TaskType
//  - Limit
func (p *ResultsServerServiceClient) GetSearchResults(taskType AnnotationTaskType, limit int32) (r []*SearchResult_, err error) {
  if err = p.sendGetSearchResults(taskType, limit); err != nil { return }
  return p.recvGetSearchResults()
}

func (p *ResultsServerServiceClient) sendGetSearchResults(taskType AnnotationTaskType, limit int32)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("getSearchResults", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := ResultsServerServiceGetSearchResultsArgs{
  TaskType : taskType,
  Limit : limit,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *ResultsServerServiceClient) recvGetSearchResults() (value []*SearchResult_, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "getSearchResults" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getSearchResults failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getSearchResults failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error2 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error3 error
    error3, err = error2.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error3
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getSearchResults failed: invalid message type")
    return
  }
  result := ResultsServerServiceGetSearchResultsResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ex != nil {
    err = result.Ex
    return 
  }
  value = result.GetSuccess()
  return
}

// Get a list of search results for a particular annotation task filtered by a user id
// Set the limit to 0 to get all relevant search results
// 
// Parameters:
//  - TaskType
//  - UserId
//  - Limit
func (p *ResultsServerServiceClient) GetSearchResultsByUser(taskType AnnotationTaskType, userId string, limit int32) (r []*SearchResult_, err error) {
  if err = p.sendGetSearchResultsByUser(taskType, userId, limit); err != nil { return }
  return p.recvGetSearchResultsByUser()
}

func (p *ResultsServerServiceClient) sendGetSearchResultsByUser(taskType AnnotationTaskType, userId string, limit int32)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("getSearchResultsByUser", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := ResultsServerServiceGetSearchResultsByUserArgs{
  TaskType : taskType,
  UserId : userId,
  Limit : limit,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *ResultsServerServiceClient) recvGetSearchResultsByUser() (value []*SearchResult_, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "getSearchResultsByUser" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getSearchResultsByUser failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getSearchResultsByUser failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error4 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error5 error
    error5, err = error4.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error5
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getSearchResultsByUser failed: invalid message type")
    return
  }
  result := ResultsServerServiceGetSearchResultsByUserResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ex != nil {
    err = result.Ex
    return 
  }
  value = result.GetSuccess()
  return
}

// Get the most recent search results for a user
// 
// Parameters:
//  - UserId
func (p *ResultsServerServiceClient) GetLatestSearchResult_(userId string) (r *SearchResult_, err error) {
  if err = p.sendGetLatestSearchResult_(userId); err != nil { return }
  return p.recvGetLatestSearchResult_()
}

func (p *ResultsServerServiceClient) sendGetLatestSearchResult_(userId string)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("getLatestSearchResult", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := ResultsServerServiceGetLatestSearchResultArgs{
  UserId : userId,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *ResultsServerServiceClient) recvGetLatestSearchResult_() (value *SearchResult_, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "getLatestSearchResult" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getLatestSearchResult failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getLatestSearchResult failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error6 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error7 error
    error7, err = error6.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error7
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getLatestSearchResult failed: invalid message type")
    return
  }
  result := ResultsServerServiceGetLatestSearchResultResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ex != nil {
    err = result.Ex
    return 
  }
  value = result.GetSuccess()
  return
}

// Get a search result object
// 
// Parameters:
//  - SearchResultId
func (p *ResultsServerServiceClient) GetSearchResult_(searchResultId *UUID) (r *SearchResult_, err error) {
  if err = p.sendGetSearchResult_(searchResultId); err != nil { return }
  return p.recvGetSearchResult_()
}

func (p *ResultsServerServiceClient) sendGetSearchResult_(searchResultId *UUID)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("getSearchResult", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := ResultsServerServiceGetSearchResultArgs{
  SearchResultId : searchResultId,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *ResultsServerServiceClient) recvGetSearchResult_() (value *SearchResult_, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "getSearchResult" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getSearchResult failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getSearchResult failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error8 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error9 error
    error9, err = error8.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error9
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getSearchResult failed: invalid message type")
    return
  }
  result := ResultsServerServiceGetSearchResultResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ex != nil {
    err = result.Ex
    return 
  }
  value = result.GetSuccess()
  return
}

// Start an annotation session
// Returns a session id used in future session calls
// 
// Parameters:
//  - SearchResultId
//  - TaskType
func (p *ResultsServerServiceClient) StartSession(searchResultId *UUID, taskType AnnotationTaskType) (r *UUID, err error) {
  if err = p.sendStartSession(searchResultId, taskType); err != nil { return }
  return p.recvStartSession()
}

func (p *ResultsServerServiceClient) sendStartSession(searchResultId *UUID, taskType AnnotationTaskType)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("startSession", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := ResultsServerServiceStartSessionArgs{
  SearchResultId : searchResultId,
  TaskType : taskType,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *ResultsServerServiceClient) recvStartSession() (value *UUID, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "startSession" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "startSession failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "startSession failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error10 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error11 error
    error11, err = error10.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error11
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "startSession failed: invalid message type")
    return
  }
  result := ResultsServerServiceStartSessionResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ex != nil {
    err = result.Ex
    return 
  }
  value = result.GetSuccess()
  return
}

// Stops an annotation session
// 
// Parameters:
//  - SessionId
func (p *ResultsServerServiceClient) StopSession(sessionId *UUID) (err error) {
  if err = p.sendStopSession(sessionId); err != nil { return }
  return p.recvStopSession()
}

func (p *ResultsServerServiceClient) sendStopSession(sessionId *UUID)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("stopSession", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := ResultsServerServiceStopSessionArgs{
  SessionId : sessionId,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *ResultsServerServiceClient) recvStopSession() (err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "stopSession" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "stopSession failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "stopSession failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error12 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error13 error
    error13, err = error12.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error13
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "stopSession failed: invalid message type")
    return
  }
  result := ResultsServerServiceStopSessionResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ex != nil {
    err = result.Ex
    return 
  }
  return
}

// Get next chunk of data to annotate
// The client should use the Retriever service to access the data
// 
// Parameters:
//  - SessionId
func (p *ResultsServerServiceClient) GetNextChunk(sessionId *UUID) (r []*AnnotationUnitIdentifier, err error) {
  if err = p.sendGetNextChunk(sessionId); err != nil { return }
  return p.recvGetNextChunk()
}

func (p *ResultsServerServiceClient) sendGetNextChunk(sessionId *UUID)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("getNextChunk", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := ResultsServerServiceGetNextChunkArgs{
  SessionId : sessionId,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *ResultsServerServiceClient) recvGetNextChunk() (value []*AnnotationUnitIdentifier, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "getNextChunk" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getNextChunk failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getNextChunk failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error14 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error15 error
    error15, err = error14.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error15
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getNextChunk failed: invalid message type")
    return
  }
  result := ResultsServerServiceGetNextChunkResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ex != nil {
    err = result.Ex
    return 
  }
  value = result.GetSuccess()
  return
}

// Submit an annotation for a session
// 
// Parameters:
//  - SessionId
//  - UnitId
//  - Communication
func (p *ResultsServerServiceClient) SubmitAnnotation(sessionId *UUID, unitId *AnnotationUnitIdentifier, communication *Communication) (err error) {
  if err = p.sendSubmitAnnotation(sessionId, unitId, communication); err != nil { return }
  return p.recvSubmitAnnotation()
}

func (p *ResultsServerServiceClient) sendSubmitAnnotation(sessionId *UUID, unitId *AnnotationUnitIdentifier, communication *Communication)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("submitAnnotation", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := ResultsServerServiceSubmitAnnotationArgs{
  SessionId : sessionId,
  UnitId : unitId,
  Communication : communication,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *ResultsServerServiceClient) recvSubmitAnnotation() (err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "submitAnnotation" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "submitAnnotation failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "submitAnnotation failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error16 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error17 error
    error17, err = error16.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error17
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "submitAnnotation failed: invalid message type")
    return
  }
  result := ResultsServerServiceSubmitAnnotationResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ex != nil {
    err = result.Ex
    return 
  }
  return
}


type ResultsServerServiceProcessor struct {
  *ServiceProcessor
}

func NewResultsServerServiceProcessor(handler ResultsServerService) *ResultsServerServiceProcessor {
  self18 := &ResultsServerServiceProcessor{NewServiceProcessor(handler)}
  self18.AddToProcessorMap("registerSearchResult", &resultsServerServiceProcessorRegisterSearchResult_{handler:handler})
  self18.AddToProcessorMap("getSearchResults", &resultsServerServiceProcessorGetSearchResults{handler:handler})
  self18.AddToProcessorMap("getSearchResultsByUser", &resultsServerServiceProcessorGetSearchResultsByUser{handler:handler})
  self18.AddToProcessorMap("getLatestSearchResult", &resultsServerServiceProcessorGetLatestSearchResult_{handler:handler})
  self18.AddToProcessorMap("getSearchResult", &resultsServerServiceProcessorGetSearchResult_{handler:handler})
  self18.AddToProcessorMap("startSession", &resultsServerServiceProcessorStartSession{handler:handler})
  self18.AddToProcessorMap("stopSession", &resultsServerServiceProcessorStopSession{handler:handler})
  self18.AddToProcessorMap("getNextChunk", &resultsServerServiceProcessorGetNextChunk{handler:handler})
  self18.AddToProcessorMap("submitAnnotation", &resultsServerServiceProcessorSubmitAnnotation{handler:handler})
  return self18
}

type resultsServerServiceProcessorRegisterSearchResult_ struct {
  handler ResultsServerService
}

func (p *resultsServerServiceProcessorRegisterSearchResult_) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ResultsServerServiceRegisterSearchResultArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("registerSearchResult", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ResultsServerServiceRegisterSearchResultResult{}
  var err2 error
  if err2 = p.handler.RegisterSearchResult_(args.Result_, args.TaskType); err2 != nil {
  switch v := err2.(type) {
    case *ServicesException:
  result.Ex = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing registerSearchResult: " + err2.Error())
    oprot.WriteMessageBegin("registerSearchResult", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("registerSearchResult", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type resultsServerServiceProcessorGetSearchResults struct {
  handler ResultsServerService
}

func (p *resultsServerServiceProcessorGetSearchResults) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ResultsServerServiceGetSearchResultsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getSearchResults", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ResultsServerServiceGetSearchResultsResult{}
var retval []*SearchResult_
  var err2 error
  if retval, err2 = p.handler.GetSearchResults(args.TaskType, args.Limit); err2 != nil {
  switch v := err2.(type) {
    case *ServicesException:
  result.Ex = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getSearchResults: " + err2.Error())
    oprot.WriteMessageBegin("getSearchResults", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getSearchResults", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type resultsServerServiceProcessorGetSearchResultsByUser struct {
  handler ResultsServerService
}

func (p *resultsServerServiceProcessorGetSearchResultsByUser) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ResultsServerServiceGetSearchResultsByUserArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getSearchResultsByUser", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ResultsServerServiceGetSearchResultsByUserResult{}
var retval []*SearchResult_
  var err2 error
  if retval, err2 = p.handler.GetSearchResultsByUser(args.TaskType, args.UserId, args.Limit); err2 != nil {
  switch v := err2.(type) {
    case *ServicesException:
  result.Ex = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getSearchResultsByUser: " + err2.Error())
    oprot.WriteMessageBegin("getSearchResultsByUser", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getSearchResultsByUser", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type resultsServerServiceProcessorGetLatestSearchResult_ struct {
  handler ResultsServerService
}

func (p *resultsServerServiceProcessorGetLatestSearchResult_) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ResultsServerServiceGetLatestSearchResultArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getLatestSearchResult", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ResultsServerServiceGetLatestSearchResultResult{}
var retval *SearchResult_
  var err2 error
  if retval, err2 = p.handler.GetLatestSearchResult_(args.UserId); err2 != nil {
  switch v := err2.(type) {
    case *ServicesException:
  result.Ex = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getLatestSearchResult: " + err2.Error())
    oprot.WriteMessageBegin("getLatestSearchResult", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getLatestSearchResult", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type resultsServerServiceProcessorGetSearchResult_ struct {
  handler ResultsServerService
}

func (p *resultsServerServiceProcessorGetSearchResult_) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ResultsServerServiceGetSearchResultArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getSearchResult", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ResultsServerServiceGetSearchResultResult{}
var retval *SearchResult_
  var err2 error
  if retval, err2 = p.handler.GetSearchResult_(args.SearchResultId); err2 != nil {
  switch v := err2.(type) {
    case *ServicesException:
  result.Ex = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getSearchResult: " + err2.Error())
    oprot.WriteMessageBegin("getSearchResult", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getSearchResult", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type resultsServerServiceProcessorStartSession struct {
  handler ResultsServerService
}

func (p *resultsServerServiceProcessorStartSession) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ResultsServerServiceStartSessionArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("startSession", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ResultsServerServiceStartSessionResult{}
var retval *UUID
  var err2 error
  if retval, err2 = p.handler.StartSession(args.SearchResultId, args.TaskType); err2 != nil {
  switch v := err2.(type) {
    case *ServicesException:
  result.Ex = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing startSession: " + err2.Error())
    oprot.WriteMessageBegin("startSession", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("startSession", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type resultsServerServiceProcessorStopSession struct {
  handler ResultsServerService
}

func (p *resultsServerServiceProcessorStopSession) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ResultsServerServiceStopSessionArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("stopSession", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ResultsServerServiceStopSessionResult{}
  var err2 error
  if err2 = p.handler.StopSession(args.SessionId); err2 != nil {
  switch v := err2.(type) {
    case *ServicesException:
  result.Ex = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing stopSession: " + err2.Error())
    oprot.WriteMessageBegin("stopSession", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("stopSession", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type resultsServerServiceProcessorGetNextChunk struct {
  handler ResultsServerService
}

func (p *resultsServerServiceProcessorGetNextChunk) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ResultsServerServiceGetNextChunkArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getNextChunk", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ResultsServerServiceGetNextChunkResult{}
var retval []*AnnotationUnitIdentifier
  var err2 error
  if retval, err2 = p.handler.GetNextChunk(args.SessionId); err2 != nil {
  switch v := err2.(type) {
    case *ServicesException:
  result.Ex = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getNextChunk: " + err2.Error())
    oprot.WriteMessageBegin("getNextChunk", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getNextChunk", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type resultsServerServiceProcessorSubmitAnnotation struct {
  handler ResultsServerService
}

func (p *resultsServerServiceProcessorSubmitAnnotation) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ResultsServerServiceSubmitAnnotationArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("submitAnnotation", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ResultsServerServiceSubmitAnnotationResult{}
  var err2 error
  if err2 = p.handler.SubmitAnnotation(args.SessionId, args.UnitId, args.Communication); err2 != nil {
  switch v := err2.(type) {
    case *ServicesException:
  result.Ex = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing submitAnnotation: " + err2.Error())
    oprot.WriteMessageBegin("submitAnnotation", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("submitAnnotation", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Result_
//  - TaskType
type ResultsServerServiceRegisterSearchResultArgs struct {
  Result_ *SearchResult_ `thrift:"result,1" db:"result" json:"result"`
  TaskType AnnotationTaskType `thrift:"taskType,2" db:"taskType" json:"taskType"`
}

func NewResultsServerServiceRegisterSearchResultArgs() *ResultsServerServiceRegisterSearchResultArgs {
  return &ResultsServerServiceRegisterSearchResultArgs{}
}

var ResultsServerServiceRegisterSearchResultArgs_Result__DEFAULT *SearchResult_
func (p *ResultsServerServiceRegisterSearchResultArgs) GetResult_() *SearchResult_ {
  if !p.IsSetResult_() {
    return ResultsServerServiceRegisterSearchResultArgs_Result__DEFAULT
  }
return p.Result_
}

func (p *ResultsServerServiceRegisterSearchResultArgs) GetTaskType() AnnotationTaskType {
  return p.TaskType
}
func (p *ResultsServerServiceRegisterSearchResultArgs) IsSetResult_() bool {
  return p.Result_ != nil
}

func (p *ResultsServerServiceRegisterSearchResultArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ResultsServerServiceRegisterSearchResultArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Result_ = &SearchResult_{}
  if err := p.Result_.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Result_), err)
  }
  return nil
}

func (p *ResultsServerServiceRegisterSearchResultArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := AnnotationTaskType(v)
  p.TaskType = temp
}
  return nil
}

func (p *ResultsServerServiceRegisterSearchResultArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("registerSearchResult_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ResultsServerServiceRegisterSearchResultArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("result", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:result: ", p), err) }
  if err := p.Result_.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Result_), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:result: ", p), err) }
  return err
}

func (p *ResultsServerServiceRegisterSearchResultArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("taskType", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:taskType: ", p), err) }
  if err := oprot.WriteI32(int32(p.TaskType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.taskType (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:taskType: ", p), err) }
  return err
}

func (p *ResultsServerServiceRegisterSearchResultArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ResultsServerServiceRegisterSearchResultArgs(%+v)", *p)
}

// Attributes:
//  - Ex
type ResultsServerServiceRegisterSearchResultResult struct {
  Ex *ServicesException `thrift:"ex,1" db:"ex" json:"ex,omitempty"`
}

func NewResultsServerServiceRegisterSearchResultResult() *ResultsServerServiceRegisterSearchResultResult {
  return &ResultsServerServiceRegisterSearchResultResult{}
}

var ResultsServerServiceRegisterSearchResultResult_Ex_DEFAULT *ServicesException
func (p *ResultsServerServiceRegisterSearchResultResult) GetEx() *ServicesException {
  if !p.IsSetEx() {
    return ResultsServerServiceRegisterSearchResultResult_Ex_DEFAULT
  }
return p.Ex
}
func (p *ResultsServerServiceRegisterSearchResultResult) IsSetEx() bool {
  return p.Ex != nil
}

func (p *ResultsServerServiceRegisterSearchResultResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ResultsServerServiceRegisterSearchResultResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ex = &ServicesException{}
  if err := p.Ex.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
  }
  return nil
}

func (p *ResultsServerServiceRegisterSearchResultResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("registerSearchResult_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ResultsServerServiceRegisterSearchResultResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetEx() {
    if err := oprot.WriteFieldBegin("ex", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err) }
    if err := p.Ex.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err) }
  }
  return err
}

func (p *ResultsServerServiceRegisterSearchResultResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ResultsServerServiceRegisterSearchResultResult(%+v)", *p)
}

// Attributes:
//  - TaskType
//  - Limit
type ResultsServerServiceGetSearchResultsArgs struct {
  TaskType AnnotationTaskType `thrift:"taskType,1" db:"taskType" json:"taskType"`
  Limit int32 `thrift:"limit,2" db:"limit" json:"limit"`
}

func NewResultsServerServiceGetSearchResultsArgs() *ResultsServerServiceGetSearchResultsArgs {
  return &ResultsServerServiceGetSearchResultsArgs{}
}


func (p *ResultsServerServiceGetSearchResultsArgs) GetTaskType() AnnotationTaskType {
  return p.TaskType
}

func (p *ResultsServerServiceGetSearchResultsArgs) GetLimit() int32 {
  return p.Limit
}
func (p *ResultsServerServiceGetSearchResultsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ResultsServerServiceGetSearchResultsArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := AnnotationTaskType(v)
  p.TaskType = temp
}
  return nil
}

func (p *ResultsServerServiceGetSearchResultsArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Limit = v
}
  return nil
}

func (p *ResultsServerServiceGetSearchResultsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getSearchResults_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ResultsServerServiceGetSearchResultsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("taskType", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:taskType: ", p), err) }
  if err := oprot.WriteI32(int32(p.TaskType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.taskType (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:taskType: ", p), err) }
  return err
}

func (p *ResultsServerServiceGetSearchResultsArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("limit", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:limit: ", p), err) }
  if err := oprot.WriteI32(int32(p.Limit)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.limit (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:limit: ", p), err) }
  return err
}

func (p *ResultsServerServiceGetSearchResultsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ResultsServerServiceGetSearchResultsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex
type ResultsServerServiceGetSearchResultsResult struct {
  Success []*SearchResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ex *ServicesException `thrift:"ex,1" db:"ex" json:"ex,omitempty"`
}

func NewResultsServerServiceGetSearchResultsResult() *ResultsServerServiceGetSearchResultsResult {
  return &ResultsServerServiceGetSearchResultsResult{}
}

var ResultsServerServiceGetSearchResultsResult_Success_DEFAULT []*SearchResult_

func (p *ResultsServerServiceGetSearchResultsResult) GetSuccess() []*SearchResult_ {
  return p.Success
}
var ResultsServerServiceGetSearchResultsResult_Ex_DEFAULT *ServicesException
func (p *ResultsServerServiceGetSearchResultsResult) GetEx() *ServicesException {
  if !p.IsSetEx() {
    return ResultsServerServiceGetSearchResultsResult_Ex_DEFAULT
  }
return p.Ex
}
func (p *ResultsServerServiceGetSearchResultsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ResultsServerServiceGetSearchResultsResult) IsSetEx() bool {
  return p.Ex != nil
}

func (p *ResultsServerServiceGetSearchResultsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ResultsServerServiceGetSearchResultsResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*SearchResult_, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem19 := &SearchResult_{}
    if err := _elem19.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem19), err)
    }
    p.Success = append(p.Success, _elem19)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ResultsServerServiceGetSearchResultsResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ex = &ServicesException{}
  if err := p.Ex.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
  }
  return nil
}

func (p *ResultsServerServiceGetSearchResultsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getSearchResults_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ResultsServerServiceGetSearchResultsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ResultsServerServiceGetSearchResultsResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetEx() {
    if err := oprot.WriteFieldBegin("ex", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err) }
    if err := p.Ex.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err) }
  }
  return err
}

func (p *ResultsServerServiceGetSearchResultsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ResultsServerServiceGetSearchResultsResult(%+v)", *p)
}

// Attributes:
//  - TaskType
//  - UserId
//  - Limit
type ResultsServerServiceGetSearchResultsByUserArgs struct {
  TaskType AnnotationTaskType `thrift:"taskType,1" db:"taskType" json:"taskType"`
  UserId string `thrift:"userId,2" db:"userId" json:"userId"`
  Limit int32 `thrift:"limit,3" db:"limit" json:"limit"`
}

func NewResultsServerServiceGetSearchResultsByUserArgs() *ResultsServerServiceGetSearchResultsByUserArgs {
  return &ResultsServerServiceGetSearchResultsByUserArgs{}
}


func (p *ResultsServerServiceGetSearchResultsByUserArgs) GetTaskType() AnnotationTaskType {
  return p.TaskType
}

func (p *ResultsServerServiceGetSearchResultsByUserArgs) GetUserId() string {
  return p.UserId
}

func (p *ResultsServerServiceGetSearchResultsByUserArgs) GetLimit() int32 {
  return p.Limit
}
func (p *ResultsServerServiceGetSearchResultsByUserArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ResultsServerServiceGetSearchResultsByUserArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := AnnotationTaskType(v)
  p.TaskType = temp
}
  return nil
}

func (p *ResultsServerServiceGetSearchResultsByUserArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.UserId = v
}
  return nil
}

func (p *ResultsServerServiceGetSearchResultsByUserArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Limit = v
}
  return nil
}

func (p *ResultsServerServiceGetSearchResultsByUserArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getSearchResultsByUser_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ResultsServerServiceGetSearchResultsByUserArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("taskType", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:taskType: ", p), err) }
  if err := oprot.WriteI32(int32(p.TaskType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.taskType (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:taskType: ", p), err) }
  return err
}

func (p *ResultsServerServiceGetSearchResultsByUserArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:userId: ", p), err) }
  if err := oprot.WriteString(string(p.UserId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:userId: ", p), err) }
  return err
}

func (p *ResultsServerServiceGetSearchResultsByUserArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("limit", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:limit: ", p), err) }
  if err := oprot.WriteI32(int32(p.Limit)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.limit (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:limit: ", p), err) }
  return err
}

func (p *ResultsServerServiceGetSearchResultsByUserArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ResultsServerServiceGetSearchResultsByUserArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex
type ResultsServerServiceGetSearchResultsByUserResult struct {
  Success []*SearchResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ex *ServicesException `thrift:"ex,1" db:"ex" json:"ex,omitempty"`
}

func NewResultsServerServiceGetSearchResultsByUserResult() *ResultsServerServiceGetSearchResultsByUserResult {
  return &ResultsServerServiceGetSearchResultsByUserResult{}
}

var ResultsServerServiceGetSearchResultsByUserResult_Success_DEFAULT []*SearchResult_

func (p *ResultsServerServiceGetSearchResultsByUserResult) GetSuccess() []*SearchResult_ {
  return p.Success
}
var ResultsServerServiceGetSearchResultsByUserResult_Ex_DEFAULT *ServicesException
func (p *ResultsServerServiceGetSearchResultsByUserResult) GetEx() *ServicesException {
  if !p.IsSetEx() {
    return ResultsServerServiceGetSearchResultsByUserResult_Ex_DEFAULT
  }
return p.Ex
}
func (p *ResultsServerServiceGetSearchResultsByUserResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ResultsServerServiceGetSearchResultsByUserResult) IsSetEx() bool {
  return p.Ex != nil
}

func (p *ResultsServerServiceGetSearchResultsByUserResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ResultsServerServiceGetSearchResultsByUserResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*SearchResult_, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem20 := &SearchResult_{}
    if err := _elem20.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem20), err)
    }
    p.Success = append(p.Success, _elem20)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ResultsServerServiceGetSearchResultsByUserResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ex = &ServicesException{}
  if err := p.Ex.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
  }
  return nil
}

func (p *ResultsServerServiceGetSearchResultsByUserResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getSearchResultsByUser_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ResultsServerServiceGetSearchResultsByUserResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ResultsServerServiceGetSearchResultsByUserResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetEx() {
    if err := oprot.WriteFieldBegin("ex", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err) }
    if err := p.Ex.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err) }
  }
  return err
}

func (p *ResultsServerServiceGetSearchResultsByUserResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ResultsServerServiceGetSearchResultsByUserResult(%+v)", *p)
}

// Attributes:
//  - UserId
type ResultsServerServiceGetLatestSearchResultArgs struct {
  UserId string `thrift:"userId,1" db:"userId" json:"userId"`
}

func NewResultsServerServiceGetLatestSearchResultArgs() *ResultsServerServiceGetLatestSearchResultArgs {
  return &ResultsServerServiceGetLatestSearchResultArgs{}
}


func (p *ResultsServerServiceGetLatestSearchResultArgs) GetUserId() string {
  return p.UserId
}
func (p *ResultsServerServiceGetLatestSearchResultArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ResultsServerServiceGetLatestSearchResultArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UserId = v
}
  return nil
}

func (p *ResultsServerServiceGetLatestSearchResultArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getLatestSearchResult_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ResultsServerServiceGetLatestSearchResultArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userId: ", p), err) }
  if err := oprot.WriteString(string(p.UserId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userId: ", p), err) }
  return err
}

func (p *ResultsServerServiceGetLatestSearchResultArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ResultsServerServiceGetLatestSearchResultArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex
type ResultsServerServiceGetLatestSearchResultResult struct {
  Success *SearchResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ex *ServicesException `thrift:"ex,1" db:"ex" json:"ex,omitempty"`
}

func NewResultsServerServiceGetLatestSearchResultResult() *ResultsServerServiceGetLatestSearchResultResult {
  return &ResultsServerServiceGetLatestSearchResultResult{}
}

var ResultsServerServiceGetLatestSearchResultResult_Success_DEFAULT *SearchResult_
func (p *ResultsServerServiceGetLatestSearchResultResult) GetSuccess() *SearchResult_ {
  if !p.IsSetSuccess() {
    return ResultsServerServiceGetLatestSearchResultResult_Success_DEFAULT
  }
return p.Success
}
var ResultsServerServiceGetLatestSearchResultResult_Ex_DEFAULT *ServicesException
func (p *ResultsServerServiceGetLatestSearchResultResult) GetEx() *ServicesException {
  if !p.IsSetEx() {
    return ResultsServerServiceGetLatestSearchResultResult_Ex_DEFAULT
  }
return p.Ex
}
func (p *ResultsServerServiceGetLatestSearchResultResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ResultsServerServiceGetLatestSearchResultResult) IsSetEx() bool {
  return p.Ex != nil
}

func (p *ResultsServerServiceGetLatestSearchResultResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ResultsServerServiceGetLatestSearchResultResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &SearchResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ResultsServerServiceGetLatestSearchResultResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ex = &ServicesException{}
  if err := p.Ex.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
  }
  return nil
}

func (p *ResultsServerServiceGetLatestSearchResultResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getLatestSearchResult_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ResultsServerServiceGetLatestSearchResultResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ResultsServerServiceGetLatestSearchResultResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetEx() {
    if err := oprot.WriteFieldBegin("ex", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err) }
    if err := p.Ex.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err) }
  }
  return err
}

func (p *ResultsServerServiceGetLatestSearchResultResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ResultsServerServiceGetLatestSearchResultResult(%+v)", *p)
}

// Attributes:
//  - SearchResultId
type ResultsServerServiceGetSearchResultArgs struct {
  SearchResultId *UUID `thrift:"searchResultId,1" db:"searchResultId" json:"searchResultId"`
}

func NewResultsServerServiceGetSearchResultArgs() *ResultsServerServiceGetSearchResultArgs {
  return &ResultsServerServiceGetSearchResultArgs{}
}

var ResultsServerServiceGetSearchResultArgs_SearchResultId_DEFAULT *UUID
func (p *ResultsServerServiceGetSearchResultArgs) GetSearchResultId() *UUID {
  if !p.IsSetSearchResultId() {
    return ResultsServerServiceGetSearchResultArgs_SearchResultId_DEFAULT
  }
return p.SearchResultId
}
func (p *ResultsServerServiceGetSearchResultArgs) IsSetSearchResultId() bool {
  return p.SearchResultId != nil
}

func (p *ResultsServerServiceGetSearchResultArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ResultsServerServiceGetSearchResultArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.SearchResultId = &UUID{}
  if err := p.SearchResultId.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SearchResultId), err)
  }
  return nil
}

func (p *ResultsServerServiceGetSearchResultArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getSearchResult_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ResultsServerServiceGetSearchResultArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("searchResultId", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:searchResultId: ", p), err) }
  if err := p.SearchResultId.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SearchResultId), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:searchResultId: ", p), err) }
  return err
}

func (p *ResultsServerServiceGetSearchResultArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ResultsServerServiceGetSearchResultArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex
type ResultsServerServiceGetSearchResultResult struct {
  Success *SearchResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ex *ServicesException `thrift:"ex,1" db:"ex" json:"ex,omitempty"`
}

func NewResultsServerServiceGetSearchResultResult() *ResultsServerServiceGetSearchResultResult {
  return &ResultsServerServiceGetSearchResultResult{}
}

var ResultsServerServiceGetSearchResultResult_Success_DEFAULT *SearchResult_
func (p *ResultsServerServiceGetSearchResultResult) GetSuccess() *SearchResult_ {
  if !p.IsSetSuccess() {
    return ResultsServerServiceGetSearchResultResult_Success_DEFAULT
  }
return p.Success
}
var ResultsServerServiceGetSearchResultResult_Ex_DEFAULT *ServicesException
func (p *ResultsServerServiceGetSearchResultResult) GetEx() *ServicesException {
  if !p.IsSetEx() {
    return ResultsServerServiceGetSearchResultResult_Ex_DEFAULT
  }
return p.Ex
}
func (p *ResultsServerServiceGetSearchResultResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ResultsServerServiceGetSearchResultResult) IsSetEx() bool {
  return p.Ex != nil
}

func (p *ResultsServerServiceGetSearchResultResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ResultsServerServiceGetSearchResultResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &SearchResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ResultsServerServiceGetSearchResultResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ex = &ServicesException{}
  if err := p.Ex.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
  }
  return nil
}

func (p *ResultsServerServiceGetSearchResultResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getSearchResult_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ResultsServerServiceGetSearchResultResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ResultsServerServiceGetSearchResultResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetEx() {
    if err := oprot.WriteFieldBegin("ex", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err) }
    if err := p.Ex.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err) }
  }
  return err
}

func (p *ResultsServerServiceGetSearchResultResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ResultsServerServiceGetSearchResultResult(%+v)", *p)
}

// Attributes:
//  - SearchResultId
//  - TaskType
type ResultsServerServiceStartSessionArgs struct {
  SearchResultId *UUID `thrift:"searchResultId,1" db:"searchResultId" json:"searchResultId"`
  TaskType AnnotationTaskType `thrift:"taskType,2" db:"taskType" json:"taskType"`
}

func NewResultsServerServiceStartSessionArgs() *ResultsServerServiceStartSessionArgs {
  return &ResultsServerServiceStartSessionArgs{}
}

var ResultsServerServiceStartSessionArgs_SearchResultId_DEFAULT *UUID
func (p *ResultsServerServiceStartSessionArgs) GetSearchResultId() *UUID {
  if !p.IsSetSearchResultId() {
    return ResultsServerServiceStartSessionArgs_SearchResultId_DEFAULT
  }
return p.SearchResultId
}

func (p *ResultsServerServiceStartSessionArgs) GetTaskType() AnnotationTaskType {
  return p.TaskType
}
func (p *ResultsServerServiceStartSessionArgs) IsSetSearchResultId() bool {
  return p.SearchResultId != nil
}

func (p *ResultsServerServiceStartSessionArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ResultsServerServiceStartSessionArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.SearchResultId = &UUID{}
  if err := p.SearchResultId.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SearchResultId), err)
  }
  return nil
}

func (p *ResultsServerServiceStartSessionArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := AnnotationTaskType(v)
  p.TaskType = temp
}
  return nil
}

func (p *ResultsServerServiceStartSessionArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("startSession_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ResultsServerServiceStartSessionArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("searchResultId", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:searchResultId: ", p), err) }
  if err := p.SearchResultId.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SearchResultId), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:searchResultId: ", p), err) }
  return err
}

func (p *ResultsServerServiceStartSessionArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("taskType", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:taskType: ", p), err) }
  if err := oprot.WriteI32(int32(p.TaskType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.taskType (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:taskType: ", p), err) }
  return err
}

func (p *ResultsServerServiceStartSessionArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ResultsServerServiceStartSessionArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex
type ResultsServerServiceStartSessionResult struct {
  Success *UUID `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ex *ServicesException `thrift:"ex,1" db:"ex" json:"ex,omitempty"`
}

func NewResultsServerServiceStartSessionResult() *ResultsServerServiceStartSessionResult {
  return &ResultsServerServiceStartSessionResult{}
}

var ResultsServerServiceStartSessionResult_Success_DEFAULT *UUID
func (p *ResultsServerServiceStartSessionResult) GetSuccess() *UUID {
  if !p.IsSetSuccess() {
    return ResultsServerServiceStartSessionResult_Success_DEFAULT
  }
return p.Success
}
var ResultsServerServiceStartSessionResult_Ex_DEFAULT *ServicesException
func (p *ResultsServerServiceStartSessionResult) GetEx() *ServicesException {
  if !p.IsSetEx() {
    return ResultsServerServiceStartSessionResult_Ex_DEFAULT
  }
return p.Ex
}
func (p *ResultsServerServiceStartSessionResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ResultsServerServiceStartSessionResult) IsSetEx() bool {
  return p.Ex != nil
}

func (p *ResultsServerServiceStartSessionResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ResultsServerServiceStartSessionResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &UUID{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ResultsServerServiceStartSessionResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ex = &ServicesException{}
  if err := p.Ex.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
  }
  return nil
}

func (p *ResultsServerServiceStartSessionResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("startSession_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ResultsServerServiceStartSessionResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ResultsServerServiceStartSessionResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetEx() {
    if err := oprot.WriteFieldBegin("ex", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err) }
    if err := p.Ex.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err) }
  }
  return err
}

func (p *ResultsServerServiceStartSessionResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ResultsServerServiceStartSessionResult(%+v)", *p)
}

// Attributes:
//  - SessionId
type ResultsServerServiceStopSessionArgs struct {
  SessionId *UUID `thrift:"sessionId,1" db:"sessionId" json:"sessionId"`
}

func NewResultsServerServiceStopSessionArgs() *ResultsServerServiceStopSessionArgs {
  return &ResultsServerServiceStopSessionArgs{}
}

var ResultsServerServiceStopSessionArgs_SessionId_DEFAULT *UUID
func (p *ResultsServerServiceStopSessionArgs) GetSessionId() *UUID {
  if !p.IsSetSessionId() {
    return ResultsServerServiceStopSessionArgs_SessionId_DEFAULT
  }
return p.SessionId
}
func (p *ResultsServerServiceStopSessionArgs) IsSetSessionId() bool {
  return p.SessionId != nil
}

func (p *ResultsServerServiceStopSessionArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ResultsServerServiceStopSessionArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.SessionId = &UUID{}
  if err := p.SessionId.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SessionId), err)
  }
  return nil
}

func (p *ResultsServerServiceStopSessionArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("stopSession_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ResultsServerServiceStopSessionArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("sessionId", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:sessionId: ", p), err) }
  if err := p.SessionId.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SessionId), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:sessionId: ", p), err) }
  return err
}

func (p *ResultsServerServiceStopSessionArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ResultsServerServiceStopSessionArgs(%+v)", *p)
}

// Attributes:
//  - Ex
type ResultsServerServiceStopSessionResult struct {
  Ex *ServicesException `thrift:"ex,1" db:"ex" json:"ex,omitempty"`
}

func NewResultsServerServiceStopSessionResult() *ResultsServerServiceStopSessionResult {
  return &ResultsServerServiceStopSessionResult{}
}

var ResultsServerServiceStopSessionResult_Ex_DEFAULT *ServicesException
func (p *ResultsServerServiceStopSessionResult) GetEx() *ServicesException {
  if !p.IsSetEx() {
    return ResultsServerServiceStopSessionResult_Ex_DEFAULT
  }
return p.Ex
}
func (p *ResultsServerServiceStopSessionResult) IsSetEx() bool {
  return p.Ex != nil
}

func (p *ResultsServerServiceStopSessionResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ResultsServerServiceStopSessionResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ex = &ServicesException{}
  if err := p.Ex.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
  }
  return nil
}

func (p *ResultsServerServiceStopSessionResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("stopSession_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ResultsServerServiceStopSessionResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetEx() {
    if err := oprot.WriteFieldBegin("ex", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err) }
    if err := p.Ex.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err) }
  }
  return err
}

func (p *ResultsServerServiceStopSessionResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ResultsServerServiceStopSessionResult(%+v)", *p)
}

// Attributes:
//  - SessionId
type ResultsServerServiceGetNextChunkArgs struct {
  SessionId *UUID `thrift:"sessionId,1" db:"sessionId" json:"sessionId"`
}

func NewResultsServerServiceGetNextChunkArgs() *ResultsServerServiceGetNextChunkArgs {
  return &ResultsServerServiceGetNextChunkArgs{}
}

var ResultsServerServiceGetNextChunkArgs_SessionId_DEFAULT *UUID
func (p *ResultsServerServiceGetNextChunkArgs) GetSessionId() *UUID {
  if !p.IsSetSessionId() {
    return ResultsServerServiceGetNextChunkArgs_SessionId_DEFAULT
  }
return p.SessionId
}
func (p *ResultsServerServiceGetNextChunkArgs) IsSetSessionId() bool {
  return p.SessionId != nil
}

func (p *ResultsServerServiceGetNextChunkArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ResultsServerServiceGetNextChunkArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.SessionId = &UUID{}
  if err := p.SessionId.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SessionId), err)
  }
  return nil
}

func (p *ResultsServerServiceGetNextChunkArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getNextChunk_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ResultsServerServiceGetNextChunkArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("sessionId", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:sessionId: ", p), err) }
  if err := p.SessionId.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SessionId), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:sessionId: ", p), err) }
  return err
}

func (p *ResultsServerServiceGetNextChunkArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ResultsServerServiceGetNextChunkArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex
type ResultsServerServiceGetNextChunkResult struct {
  Success []*AnnotationUnitIdentifier `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ex *ServicesException `thrift:"ex,1" db:"ex" json:"ex,omitempty"`
}

func NewResultsServerServiceGetNextChunkResult() *ResultsServerServiceGetNextChunkResult {
  return &ResultsServerServiceGetNextChunkResult{}
}

var ResultsServerServiceGetNextChunkResult_Success_DEFAULT []*AnnotationUnitIdentifier

func (p *ResultsServerServiceGetNextChunkResult) GetSuccess() []*AnnotationUnitIdentifier {
  return p.Success
}
var ResultsServerServiceGetNextChunkResult_Ex_DEFAULT *ServicesException
func (p *ResultsServerServiceGetNextChunkResult) GetEx() *ServicesException {
  if !p.IsSetEx() {
    return ResultsServerServiceGetNextChunkResult_Ex_DEFAULT
  }
return p.Ex
}
func (p *ResultsServerServiceGetNextChunkResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ResultsServerServiceGetNextChunkResult) IsSetEx() bool {
  return p.Ex != nil
}

func (p *ResultsServerServiceGetNextChunkResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ResultsServerServiceGetNextChunkResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*AnnotationUnitIdentifier, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem21 := &AnnotationUnitIdentifier{}
    if err := _elem21.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem21), err)
    }
    p.Success = append(p.Success, _elem21)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ResultsServerServiceGetNextChunkResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ex = &ServicesException{}
  if err := p.Ex.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
  }
  return nil
}

func (p *ResultsServerServiceGetNextChunkResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getNextChunk_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ResultsServerServiceGetNextChunkResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ResultsServerServiceGetNextChunkResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetEx() {
    if err := oprot.WriteFieldBegin("ex", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err) }
    if err := p.Ex.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err) }
  }
  return err
}

func (p *ResultsServerServiceGetNextChunkResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ResultsServerServiceGetNextChunkResult(%+v)", *p)
}

// Attributes:
//  - SessionId
//  - UnitId
//  - Communication
type ResultsServerServiceSubmitAnnotationArgs struct {
  SessionId *UUID `thrift:"sessionId,1" db:"sessionId" json:"sessionId"`
  UnitId *AnnotationUnitIdentifier `thrift:"unitId,2" db:"unitId" json:"unitId"`
  Communication *Communication `thrift:"communication,3" db:"communication" json:"communication"`
}

func NewResultsServerServiceSubmitAnnotationArgs() *ResultsServerServiceSubmitAnnotationArgs {
  return &ResultsServerServiceSubmitAnnotationArgs{}
}

var ResultsServerServiceSubmitAnnotationArgs_SessionId_DEFAULT *UUID
func (p *ResultsServerServiceSubmitAnnotationArgs) GetSessionId() *UUID {
  if !p.IsSetSessionId() {
    return ResultsServerServiceSubmitAnnotationArgs_SessionId_DEFAULT
  }
return p.SessionId
}
var ResultsServerServiceSubmitAnnotationArgs_UnitId_DEFAULT *AnnotationUnitIdentifier
func (p *ResultsServerServiceSubmitAnnotationArgs) GetUnitId() *AnnotationUnitIdentifier {
  if !p.IsSetUnitId() {
    return ResultsServerServiceSubmitAnnotationArgs_UnitId_DEFAULT
  }
return p.UnitId
}
var ResultsServerServiceSubmitAnnotationArgs_Communication_DEFAULT *Communication
func (p *ResultsServerServiceSubmitAnnotationArgs) GetCommunication() *Communication {
  if !p.IsSetCommunication() {
    return ResultsServerServiceSubmitAnnotationArgs_Communication_DEFAULT
  }
return p.Communication
}
func (p *ResultsServerServiceSubmitAnnotationArgs) IsSetSessionId() bool {
  return p.SessionId != nil
}

func (p *ResultsServerServiceSubmitAnnotationArgs) IsSetUnitId() bool {
  return p.UnitId != nil
}

func (p *ResultsServerServiceSubmitAnnotationArgs) IsSetCommunication() bool {
  return p.Communication != nil
}

func (p *ResultsServerServiceSubmitAnnotationArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ResultsServerServiceSubmitAnnotationArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.SessionId = &UUID{}
  if err := p.SessionId.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SessionId), err)
  }
  return nil
}

func (p *ResultsServerServiceSubmitAnnotationArgs)  ReadField2(iprot thrift.TProtocol) error {
  p.UnitId = &AnnotationUnitIdentifier{}
  if err := p.UnitId.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UnitId), err)
  }
  return nil
}

func (p *ResultsServerServiceSubmitAnnotationArgs)  ReadField3(iprot thrift.TProtocol) error {
  p.Communication = &Communication{}
  if err := p.Communication.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Communication), err)
  }
  return nil
}

func (p *ResultsServerServiceSubmitAnnotationArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("submitAnnotation_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ResultsServerServiceSubmitAnnotationArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("sessionId", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:sessionId: ", p), err) }
  if err := p.SessionId.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SessionId), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:sessionId: ", p), err) }
  return err
}

func (p *ResultsServerServiceSubmitAnnotationArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("unitId", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:unitId: ", p), err) }
  if err := p.UnitId.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UnitId), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:unitId: ", p), err) }
  return err
}

func (p *ResultsServerServiceSubmitAnnotationArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("communication", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:communication: ", p), err) }
  if err := p.Communication.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Communication), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:communication: ", p), err) }
  return err
}

func (p *ResultsServerServiceSubmitAnnotationArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ResultsServerServiceSubmitAnnotationArgs(%+v)", *p)
}

// Attributes:
//  - Ex
type ResultsServerServiceSubmitAnnotationResult struct {
  Ex *ServicesException `thrift:"ex,1" db:"ex" json:"ex,omitempty"`
}

func NewResultsServerServiceSubmitAnnotationResult() *ResultsServerServiceSubmitAnnotationResult {
  return &ResultsServerServiceSubmitAnnotationResult{}
}

var ResultsServerServiceSubmitAnnotationResult_Ex_DEFAULT *ServicesException
func (p *ResultsServerServiceSubmitAnnotationResult) GetEx() *ServicesException {
  if !p.IsSetEx() {
    return ResultsServerServiceSubmitAnnotationResult_Ex_DEFAULT
  }
return p.Ex
}
func (p *ResultsServerServiceSubmitAnnotationResult) IsSetEx() bool {
  return p.Ex != nil
}

func (p *ResultsServerServiceSubmitAnnotationResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ResultsServerServiceSubmitAnnotationResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ex = &ServicesException{}
  if err := p.Ex.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
  }
  return nil
}

func (p *ResultsServerServiceSubmitAnnotationResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("submitAnnotation_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ResultsServerServiceSubmitAnnotationResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetEx() {
    if err := oprot.WriteFieldBegin("ex", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err) }
    if err := p.Ex.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err) }
  }
  return err
}

func (p *ResultsServerServiceSubmitAnnotationResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ResultsServerServiceSubmitAnnotationResult(%+v)", *p)
}


