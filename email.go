// Autogenerated by Thrift Compiler (0.10.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package goncrete

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

// An email address, optionally accompanied by a display_name. These
// values are typically extracted from strings such as:
// <tt> "John Smith" &lt;john\@xyz.com&gt; </tt>.
// 
// \see RFC2822 http://tools.ietf.org/html/rfc2822
// 
// Attributes:
//  - Address
//  - DisplayName
type EmailAddress struct {
  Address *string `thrift:"address,1" db:"address" json:"address,omitempty"`
  DisplayName *string `thrift:"displayName,2" db:"displayName" json:"displayName,omitempty"`
}

func NewEmailAddress() *EmailAddress {
  return &EmailAddress{}
}

var EmailAddress_Address_DEFAULT string
func (p *EmailAddress) GetAddress() string {
  if !p.IsSetAddress() {
    return EmailAddress_Address_DEFAULT
  }
return *p.Address
}
var EmailAddress_DisplayName_DEFAULT string
func (p *EmailAddress) GetDisplayName() string {
  if !p.IsSetDisplayName() {
    return EmailAddress_DisplayName_DEFAULT
  }
return *p.DisplayName
}
func (p *EmailAddress) IsSetAddress() bool {
  return p.Address != nil
}

func (p *EmailAddress) IsSetDisplayName() bool {
  return p.DisplayName != nil
}

func (p *EmailAddress) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *EmailAddress)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Address = &v
}
  return nil
}

func (p *EmailAddress)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.DisplayName = &v
}
  return nil
}

func (p *EmailAddress) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("EmailAddress"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *EmailAddress) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetAddress() {
    if err := oprot.WriteFieldBegin("address", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:address: ", p), err) }
    if err := oprot.WriteString(string(*p.Address)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.address (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:address: ", p), err) }
  }
  return err
}

func (p *EmailAddress) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetDisplayName() {
    if err := oprot.WriteFieldBegin("displayName", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:displayName: ", p), err) }
    if err := oprot.WriteString(string(*p.DisplayName)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.displayName (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:displayName: ", p), err) }
  }
  return err
}

func (p *EmailAddress) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("EmailAddress(%+v)", *p)
}

// Extra information about an email communication instance.
// 
// Attributes:
//  - MessageId
//  - ContentType
//  - UserAgent
//  - InReplyToList
//  - ReferenceList
//  - SenderAddress
//  - ReturnPathAddress
//  - ToAddressList
//  - CcAddressList
//  - BccAddressList
//  - EmailFolder
//  - Subject
//  - QuotedAddresses
//  - AttachmentPaths
//  - Salutation
//  - Signature
type EmailCommunicationInfo struct {
  MessageId *string `thrift:"messageId,1" db:"messageId" json:"messageId,omitempty"`
  ContentType *string `thrift:"contentType,2" db:"contentType" json:"contentType,omitempty"`
  UserAgent *string `thrift:"userAgent,3" db:"userAgent" json:"userAgent,omitempty"`
  InReplyToList []string `thrift:"inReplyToList,4" db:"inReplyToList" json:"inReplyToList,omitempty"`
  ReferenceList []string `thrift:"referenceList,5" db:"referenceList" json:"referenceList,omitempty"`
  SenderAddress *EmailAddress `thrift:"senderAddress,6" db:"senderAddress" json:"senderAddress,omitempty"`
  ReturnPathAddress *EmailAddress `thrift:"returnPathAddress,7" db:"returnPathAddress" json:"returnPathAddress,omitempty"`
  ToAddressList []*EmailAddress `thrift:"toAddressList,8" db:"toAddressList" json:"toAddressList,omitempty"`
  CcAddressList []*EmailAddress `thrift:"ccAddressList,9" db:"ccAddressList" json:"ccAddressList,omitempty"`
  BccAddressList []*EmailAddress `thrift:"bccAddressList,10" db:"bccAddressList" json:"bccAddressList,omitempty"`
  EmailFolder *string `thrift:"emailFolder,11" db:"emailFolder" json:"emailFolder,omitempty"`
  Subject *string `thrift:"subject,12" db:"subject" json:"subject,omitempty"`
  QuotedAddresses []string `thrift:"quotedAddresses,13" db:"quotedAddresses" json:"quotedAddresses,omitempty"`
  AttachmentPaths []string `thrift:"attachmentPaths,14" db:"attachmentPaths" json:"attachmentPaths,omitempty"`
  Salutation *string `thrift:"salutation,15" db:"salutation" json:"salutation,omitempty"`
  Signature *string `thrift:"signature,16" db:"signature" json:"signature,omitempty"`
}

func NewEmailCommunicationInfo() *EmailCommunicationInfo {
  return &EmailCommunicationInfo{}
}

var EmailCommunicationInfo_MessageId_DEFAULT string
func (p *EmailCommunicationInfo) GetMessageId() string {
  if !p.IsSetMessageId() {
    return EmailCommunicationInfo_MessageId_DEFAULT
  }
return *p.MessageId
}
var EmailCommunicationInfo_ContentType_DEFAULT string
func (p *EmailCommunicationInfo) GetContentType() string {
  if !p.IsSetContentType() {
    return EmailCommunicationInfo_ContentType_DEFAULT
  }
return *p.ContentType
}
var EmailCommunicationInfo_UserAgent_DEFAULT string
func (p *EmailCommunicationInfo) GetUserAgent() string {
  if !p.IsSetUserAgent() {
    return EmailCommunicationInfo_UserAgent_DEFAULT
  }
return *p.UserAgent
}
var EmailCommunicationInfo_InReplyToList_DEFAULT []string

func (p *EmailCommunicationInfo) GetInReplyToList() []string {
  return p.InReplyToList
}
var EmailCommunicationInfo_ReferenceList_DEFAULT []string

func (p *EmailCommunicationInfo) GetReferenceList() []string {
  return p.ReferenceList
}
var EmailCommunicationInfo_SenderAddress_DEFAULT *EmailAddress
func (p *EmailCommunicationInfo) GetSenderAddress() *EmailAddress {
  if !p.IsSetSenderAddress() {
    return EmailCommunicationInfo_SenderAddress_DEFAULT
  }
return p.SenderAddress
}
var EmailCommunicationInfo_ReturnPathAddress_DEFAULT *EmailAddress
func (p *EmailCommunicationInfo) GetReturnPathAddress() *EmailAddress {
  if !p.IsSetReturnPathAddress() {
    return EmailCommunicationInfo_ReturnPathAddress_DEFAULT
  }
return p.ReturnPathAddress
}
var EmailCommunicationInfo_ToAddressList_DEFAULT []*EmailAddress

func (p *EmailCommunicationInfo) GetToAddressList() []*EmailAddress {
  return p.ToAddressList
}
var EmailCommunicationInfo_CcAddressList_DEFAULT []*EmailAddress

func (p *EmailCommunicationInfo) GetCcAddressList() []*EmailAddress {
  return p.CcAddressList
}
var EmailCommunicationInfo_BccAddressList_DEFAULT []*EmailAddress

func (p *EmailCommunicationInfo) GetBccAddressList() []*EmailAddress {
  return p.BccAddressList
}
var EmailCommunicationInfo_EmailFolder_DEFAULT string
func (p *EmailCommunicationInfo) GetEmailFolder() string {
  if !p.IsSetEmailFolder() {
    return EmailCommunicationInfo_EmailFolder_DEFAULT
  }
return *p.EmailFolder
}
var EmailCommunicationInfo_Subject_DEFAULT string
func (p *EmailCommunicationInfo) GetSubject() string {
  if !p.IsSetSubject() {
    return EmailCommunicationInfo_Subject_DEFAULT
  }
return *p.Subject
}
var EmailCommunicationInfo_QuotedAddresses_DEFAULT []string

func (p *EmailCommunicationInfo) GetQuotedAddresses() []string {
  return p.QuotedAddresses
}
var EmailCommunicationInfo_AttachmentPaths_DEFAULT []string

func (p *EmailCommunicationInfo) GetAttachmentPaths() []string {
  return p.AttachmentPaths
}
var EmailCommunicationInfo_Salutation_DEFAULT string
func (p *EmailCommunicationInfo) GetSalutation() string {
  if !p.IsSetSalutation() {
    return EmailCommunicationInfo_Salutation_DEFAULT
  }
return *p.Salutation
}
var EmailCommunicationInfo_Signature_DEFAULT string
func (p *EmailCommunicationInfo) GetSignature() string {
  if !p.IsSetSignature() {
    return EmailCommunicationInfo_Signature_DEFAULT
  }
return *p.Signature
}
func (p *EmailCommunicationInfo) IsSetMessageId() bool {
  return p.MessageId != nil
}

func (p *EmailCommunicationInfo) IsSetContentType() bool {
  return p.ContentType != nil
}

func (p *EmailCommunicationInfo) IsSetUserAgent() bool {
  return p.UserAgent != nil
}

func (p *EmailCommunicationInfo) IsSetInReplyToList() bool {
  return p.InReplyToList != nil
}

func (p *EmailCommunicationInfo) IsSetReferenceList() bool {
  return p.ReferenceList != nil
}

func (p *EmailCommunicationInfo) IsSetSenderAddress() bool {
  return p.SenderAddress != nil
}

func (p *EmailCommunicationInfo) IsSetReturnPathAddress() bool {
  return p.ReturnPathAddress != nil
}

func (p *EmailCommunicationInfo) IsSetToAddressList() bool {
  return p.ToAddressList != nil
}

func (p *EmailCommunicationInfo) IsSetCcAddressList() bool {
  return p.CcAddressList != nil
}

func (p *EmailCommunicationInfo) IsSetBccAddressList() bool {
  return p.BccAddressList != nil
}

func (p *EmailCommunicationInfo) IsSetEmailFolder() bool {
  return p.EmailFolder != nil
}

func (p *EmailCommunicationInfo) IsSetSubject() bool {
  return p.Subject != nil
}

func (p *EmailCommunicationInfo) IsSetQuotedAddresses() bool {
  return p.QuotedAddresses != nil
}

func (p *EmailCommunicationInfo) IsSetAttachmentPaths() bool {
  return p.AttachmentPaths != nil
}

func (p *EmailCommunicationInfo) IsSetSalutation() bool {
  return p.Salutation != nil
}

func (p *EmailCommunicationInfo) IsSetSignature() bool {
  return p.Signature != nil
}

func (p *EmailCommunicationInfo) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    case 7:
      if err := p.ReadField7(iprot); err != nil {
        return err
      }
    case 8:
      if err := p.ReadField8(iprot); err != nil {
        return err
      }
    case 9:
      if err := p.ReadField9(iprot); err != nil {
        return err
      }
    case 10:
      if err := p.ReadField10(iprot); err != nil {
        return err
      }
    case 11:
      if err := p.ReadField11(iprot); err != nil {
        return err
      }
    case 12:
      if err := p.ReadField12(iprot); err != nil {
        return err
      }
    case 13:
      if err := p.ReadField13(iprot); err != nil {
        return err
      }
    case 14:
      if err := p.ReadField14(iprot); err != nil {
        return err
      }
    case 15:
      if err := p.ReadField15(iprot); err != nil {
        return err
      }
    case 16:
      if err := p.ReadField16(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *EmailCommunicationInfo)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.MessageId = &v
}
  return nil
}

func (p *EmailCommunicationInfo)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ContentType = &v
}
  return nil
}

func (p *EmailCommunicationInfo)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.UserAgent = &v
}
  return nil
}

func (p *EmailCommunicationInfo)  ReadField4(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.InReplyToList =  tSlice
  for i := 0; i < size; i ++ {
var _elem0 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem0 = v
}
    p.InReplyToList = append(p.InReplyToList, _elem0)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *EmailCommunicationInfo)  ReadField5(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.ReferenceList =  tSlice
  for i := 0; i < size; i ++ {
var _elem1 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem1 = v
}
    p.ReferenceList = append(p.ReferenceList, _elem1)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *EmailCommunicationInfo)  ReadField6(iprot thrift.TProtocol) error {
  p.SenderAddress = &EmailAddress{}
  if err := p.SenderAddress.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SenderAddress), err)
  }
  return nil
}

func (p *EmailCommunicationInfo)  ReadField7(iprot thrift.TProtocol) error {
  p.ReturnPathAddress = &EmailAddress{}
  if err := p.ReturnPathAddress.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ReturnPathAddress), err)
  }
  return nil
}

func (p *EmailCommunicationInfo)  ReadField8(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*EmailAddress, 0, size)
  p.ToAddressList =  tSlice
  for i := 0; i < size; i ++ {
    _elem2 := &EmailAddress{}
    if err := _elem2.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem2), err)
    }
    p.ToAddressList = append(p.ToAddressList, _elem2)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *EmailCommunicationInfo)  ReadField9(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*EmailAddress, 0, size)
  p.CcAddressList =  tSlice
  for i := 0; i < size; i ++ {
    _elem3 := &EmailAddress{}
    if err := _elem3.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem3), err)
    }
    p.CcAddressList = append(p.CcAddressList, _elem3)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *EmailCommunicationInfo)  ReadField10(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*EmailAddress, 0, size)
  p.BccAddressList =  tSlice
  for i := 0; i < size; i ++ {
    _elem4 := &EmailAddress{}
    if err := _elem4.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem4), err)
    }
    p.BccAddressList = append(p.BccAddressList, _elem4)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *EmailCommunicationInfo)  ReadField11(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.EmailFolder = &v
}
  return nil
}

func (p *EmailCommunicationInfo)  ReadField12(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  p.Subject = &v
}
  return nil
}

func (p *EmailCommunicationInfo)  ReadField13(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.QuotedAddresses =  tSlice
  for i := 0; i < size; i ++ {
var _elem5 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem5 = v
}
    p.QuotedAddresses = append(p.QuotedAddresses, _elem5)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *EmailCommunicationInfo)  ReadField14(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.AttachmentPaths =  tSlice
  for i := 0; i < size; i ++ {
var _elem6 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem6 = v
}
    p.AttachmentPaths = append(p.AttachmentPaths, _elem6)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *EmailCommunicationInfo)  ReadField15(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 15: ", err)
} else {
  p.Salutation = &v
}
  return nil
}

func (p *EmailCommunicationInfo)  ReadField16(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 16: ", err)
} else {
  p.Signature = &v
}
  return nil
}

func (p *EmailCommunicationInfo) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("EmailCommunicationInfo"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField11(oprot); err != nil { return err }
    if err := p.writeField12(oprot); err != nil { return err }
    if err := p.writeField13(oprot); err != nil { return err }
    if err := p.writeField14(oprot); err != nil { return err }
    if err := p.writeField15(oprot); err != nil { return err }
    if err := p.writeField16(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *EmailCommunicationInfo) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetMessageId() {
    if err := oprot.WriteFieldBegin("messageId", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:messageId: ", p), err) }
    if err := oprot.WriteString(string(*p.MessageId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.messageId (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:messageId: ", p), err) }
  }
  return err
}

func (p *EmailCommunicationInfo) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetContentType() {
    if err := oprot.WriteFieldBegin("contentType", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:contentType: ", p), err) }
    if err := oprot.WriteString(string(*p.ContentType)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.contentType (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:contentType: ", p), err) }
  }
  return err
}

func (p *EmailCommunicationInfo) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetUserAgent() {
    if err := oprot.WriteFieldBegin("userAgent", thrift.STRING, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:userAgent: ", p), err) }
    if err := oprot.WriteString(string(*p.UserAgent)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.userAgent (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:userAgent: ", p), err) }
  }
  return err
}

func (p *EmailCommunicationInfo) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetInReplyToList() {
    if err := oprot.WriteFieldBegin("inReplyToList", thrift.LIST, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:inReplyToList: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRING, len(p.InReplyToList)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.InReplyToList {
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:inReplyToList: ", p), err) }
  }
  return err
}

func (p *EmailCommunicationInfo) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetReferenceList() {
    if err := oprot.WriteFieldBegin("referenceList", thrift.LIST, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:referenceList: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRING, len(p.ReferenceList)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.ReferenceList {
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:referenceList: ", p), err) }
  }
  return err
}

func (p *EmailCommunicationInfo) writeField6(oprot thrift.TProtocol) (err error) {
  if p.IsSetSenderAddress() {
    if err := oprot.WriteFieldBegin("senderAddress", thrift.STRUCT, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:senderAddress: ", p), err) }
    if err := p.SenderAddress.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SenderAddress), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:senderAddress: ", p), err) }
  }
  return err
}

func (p *EmailCommunicationInfo) writeField7(oprot thrift.TProtocol) (err error) {
  if p.IsSetReturnPathAddress() {
    if err := oprot.WriteFieldBegin("returnPathAddress", thrift.STRUCT, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:returnPathAddress: ", p), err) }
    if err := p.ReturnPathAddress.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ReturnPathAddress), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:returnPathAddress: ", p), err) }
  }
  return err
}

func (p *EmailCommunicationInfo) writeField8(oprot thrift.TProtocol) (err error) {
  if p.IsSetToAddressList() {
    if err := oprot.WriteFieldBegin("toAddressList", thrift.LIST, 8); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:toAddressList: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ToAddressList)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.ToAddressList {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 8:toAddressList: ", p), err) }
  }
  return err
}

func (p *EmailCommunicationInfo) writeField9(oprot thrift.TProtocol) (err error) {
  if p.IsSetCcAddressList() {
    if err := oprot.WriteFieldBegin("ccAddressList", thrift.LIST, 9); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:ccAddressList: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.CcAddressList)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.CcAddressList {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 9:ccAddressList: ", p), err) }
  }
  return err
}

func (p *EmailCommunicationInfo) writeField10(oprot thrift.TProtocol) (err error) {
  if p.IsSetBccAddressList() {
    if err := oprot.WriteFieldBegin("bccAddressList", thrift.LIST, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:bccAddressList: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.BccAddressList)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.BccAddressList {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:bccAddressList: ", p), err) }
  }
  return err
}

func (p *EmailCommunicationInfo) writeField11(oprot thrift.TProtocol) (err error) {
  if p.IsSetEmailFolder() {
    if err := oprot.WriteFieldBegin("emailFolder", thrift.STRING, 11); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:emailFolder: ", p), err) }
    if err := oprot.WriteString(string(*p.EmailFolder)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.emailFolder (11) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 11:emailFolder: ", p), err) }
  }
  return err
}

func (p *EmailCommunicationInfo) writeField12(oprot thrift.TProtocol) (err error) {
  if p.IsSetSubject() {
    if err := oprot.WriteFieldBegin("subject", thrift.STRING, 12); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:subject: ", p), err) }
    if err := oprot.WriteString(string(*p.Subject)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.subject (12) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 12:subject: ", p), err) }
  }
  return err
}

func (p *EmailCommunicationInfo) writeField13(oprot thrift.TProtocol) (err error) {
  if p.IsSetQuotedAddresses() {
    if err := oprot.WriteFieldBegin("quotedAddresses", thrift.LIST, 13); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:quotedAddresses: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRING, len(p.QuotedAddresses)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.QuotedAddresses {
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 13:quotedAddresses: ", p), err) }
  }
  return err
}

func (p *EmailCommunicationInfo) writeField14(oprot thrift.TProtocol) (err error) {
  if p.IsSetAttachmentPaths() {
    if err := oprot.WriteFieldBegin("attachmentPaths", thrift.LIST, 14); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:attachmentPaths: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRING, len(p.AttachmentPaths)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.AttachmentPaths {
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 14:attachmentPaths: ", p), err) }
  }
  return err
}

func (p *EmailCommunicationInfo) writeField15(oprot thrift.TProtocol) (err error) {
  if p.IsSetSalutation() {
    if err := oprot.WriteFieldBegin("salutation", thrift.STRING, 15); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:salutation: ", p), err) }
    if err := oprot.WriteString(string(*p.Salutation)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.salutation (15) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 15:salutation: ", p), err) }
  }
  return err
}

func (p *EmailCommunicationInfo) writeField16(oprot thrift.TProtocol) (err error) {
  if p.IsSetSignature() {
    if err := oprot.WriteFieldBegin("signature", thrift.STRING, 16); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:signature: ", p), err) }
    if err := oprot.WriteString(string(*p.Signature)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.signature (16) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 16:signature: ", p), err) }
  }
  return err
}

func (p *EmailCommunicationInfo) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("EmailCommunicationInfo(%+v)", *p)
}

