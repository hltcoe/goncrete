// Autogenerated by Thrift Compiler (0.10.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package goncrete

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"

)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

// Annotation task including information for pulling data.
// 
// Attributes:
//  - Type: Type of annotation task
//  - Language: Language of the data for the task
//  - UnitType: Entire communication or individual sentences
//  - Units: Identifiers for each annotation unit
type AnnotationTask struct {
  Type AnnotationTaskType `thrift:"type,1,required" db:"type" json:"type"`
  Language *string `thrift:"language,2" db:"language" json:"language,omitempty"`
  UnitType AnnotationUnitType `thrift:"unitType,3,required" db:"unitType" json:"unitType"`
  Units []*AnnotationUnitIdentifier `thrift:"units,4,required" db:"units" json:"units"`
}

func NewAnnotationTask() *AnnotationTask {
  return &AnnotationTask{}
}


func (p *AnnotationTask) GetType() AnnotationTaskType {
  return p.Type
}
var AnnotationTask_Language_DEFAULT string
func (p *AnnotationTask) GetLanguage() string {
  if !p.IsSetLanguage() {
    return AnnotationTask_Language_DEFAULT
  }
return *p.Language
}

func (p *AnnotationTask) GetUnitType() AnnotationUnitType {
  return p.UnitType
}

func (p *AnnotationTask) GetUnits() []*AnnotationUnitIdentifier {
  return p.Units
}
func (p *AnnotationTask) IsSetLanguage() bool {
  return p.Language != nil
}

func (p *AnnotationTask) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetType bool = false;
  var issetUnitType bool = false;
  var issetUnits bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetType = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
      issetUnitType = true
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
      issetUnits = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetType{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Type is not set"));
  }
  if !issetUnitType{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field UnitType is not set"));
  }
  if !issetUnits{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Units is not set"));
  }
  return nil
}

func (p *AnnotationTask)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := AnnotationTaskType(v)
  p.Type = temp
}
  return nil
}

func (p *AnnotationTask)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Language = &v
}
  return nil
}

func (p *AnnotationTask)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := AnnotationUnitType(v)
  p.UnitType = temp
}
  return nil
}

func (p *AnnotationTask)  ReadField4(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*AnnotationUnitIdentifier, 0, size)
  p.Units =  tSlice
  for i := 0; i < size; i ++ {
    _elem0 := &AnnotationUnitIdentifier{}
    if err := _elem0.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem0), err)
    }
    p.Units = append(p.Units, _elem0)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *AnnotationTask) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("AnnotationTask"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AnnotationTask) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("type", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:type: ", p), err) }
  if err := oprot.WriteI32(int32(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:type: ", p), err) }
  return err
}

func (p *AnnotationTask) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetLanguage() {
    if err := oprot.WriteFieldBegin("language", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:language: ", p), err) }
    if err := oprot.WriteString(string(*p.Language)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.language (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:language: ", p), err) }
  }
  return err
}

func (p *AnnotationTask) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("unitType", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:unitType: ", p), err) }
  if err := oprot.WriteI32(int32(p.UnitType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.unitType (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:unitType: ", p), err) }
  return err
}

func (p *AnnotationTask) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("units", thrift.LIST, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:units: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Units)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Units {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:units: ", p), err) }
  return err
}

func (p *AnnotationTask) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AnnotationTask(%+v)", *p)
}

// Annotation on a communication.
// 
// Attributes:
//  - ID: Identifier of the part of the communication being annotated.
//  - Communication: Communication with the annotation stored in it.
// The location of the annotation depends on the annotation unit identifier
type Annotation struct {
  ID *AnnotationUnitIdentifier `thrift:"id,1,required" db:"id" json:"id"`
  Communication *Communication `thrift:"communication,2,required" db:"communication" json:"communication"`
}

func NewAnnotation() *Annotation {
  return &Annotation{}
}

var Annotation_ID_DEFAULT *AnnotationUnitIdentifier
func (p *Annotation) GetID() *AnnotationUnitIdentifier {
  if !p.IsSetID() {
    return Annotation_ID_DEFAULT
  }
return p.ID
}
var Annotation_Communication_DEFAULT *Communication
func (p *Annotation) GetCommunication() *Communication {
  if !p.IsSetCommunication() {
    return Annotation_Communication_DEFAULT
  }
return p.Communication
}
func (p *Annotation) IsSetID() bool {
  return p.ID != nil
}

func (p *Annotation) IsSetCommunication() bool {
  return p.Communication != nil
}

func (p *Annotation) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetID bool = false;
  var issetCommunication bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetID = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
      issetCommunication = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetID{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ID is not set"));
  }
  if !issetCommunication{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Communication is not set"));
  }
  return nil
}

func (p *Annotation)  ReadField1(iprot thrift.TProtocol) error {
  p.ID = &AnnotationUnitIdentifier{}
  if err := p.ID.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ID), err)
  }
  return nil
}

func (p *Annotation)  ReadField2(iprot thrift.TProtocol) error {
  p.Communication = &Communication{}
  if err := p.Communication.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Communication), err)
  }
  return nil
}

func (p *Annotation) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Annotation"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Annotation) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := p.ID.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ID), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *Annotation) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("communication", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:communication: ", p), err) }
  if err := p.Communication.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Communication), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:communication: ", p), err) }
  return err
}

func (p *Annotation) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Annotation(%+v)", *p)
}

type ActiveLearnerServerService interface {
Service
  //The active learning server is responsible for sorting a list of communications.
  //Users annotate communications based on the sort.
  //
  //Active learning is an asynchronous process.
  //It is started by the client calling start().
  //At arbitrary times, the client can call addAnnotations().
  //When the server is done with a sort of the data, it calls submitSort() on the client.
  //The server can perform additional sorts until stop() is called.
  //
  //The server must be preconfigured with the details of the data source to pull communications.

  // Start an active learning session on these communications
  // 
  // Parameters:
  //  - SessionId
  //  - Task
  //  - Contact
  Start(sessionId *UUID, task *AnnotationTask, contact *AsyncContactInfo) (r bool, err error)
  // Stop the learning session
  // 
  // Parameters:
  //  - SessionId
  Stop(sessionId *UUID) (err error)
  // Add annotations from the user to the learning process
  // 
  // Parameters:
  //  - SessionId
  //  - Annotations
  AddAnnotations(sessionId *UUID, annotations []*Annotation) (err error)
}

//The active learning server is responsible for sorting a list of communications.
//Users annotate communications based on the sort.
//
//Active learning is an asynchronous process.
//It is started by the client calling start().
//At arbitrary times, the client can call addAnnotations().
//When the server is done with a sort of the data, it calls submitSort() on the client.
//The server can perform additional sorts until stop() is called.
//
//The server must be preconfigured with the details of the data source to pull communications.
type ActiveLearnerServerServiceClient struct {
  *ServiceClient
}

func NewActiveLearnerServerServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *ActiveLearnerServerServiceClient {
  return &ActiveLearnerServerServiceClient{ServiceClient: NewServiceClientFactory(t, f)}}

func NewActiveLearnerServerServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *ActiveLearnerServerServiceClient {
  return &ActiveLearnerServerServiceClient{ServiceClient: NewServiceClientProtocol(t, iprot, oprot)}
}

// Start an active learning session on these communications
// 
// Parameters:
//  - SessionId
//  - Task
//  - Contact
func (p *ActiveLearnerServerServiceClient) Start(sessionId *UUID, task *AnnotationTask, contact *AsyncContactInfo) (r bool, err error) {
  if err = p.sendStart(sessionId, task, contact); err != nil { return }
  return p.recvStart()
}

func (p *ActiveLearnerServerServiceClient) sendStart(sessionId *UUID, task *AnnotationTask, contact *AsyncContactInfo)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("start", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := ActiveLearnerServerServiceStartArgs{
  SessionId : sessionId,
  Task : task,
  Contact : contact,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *ActiveLearnerServerServiceClient) recvStart() (value bool, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "start" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "start failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "start failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error1 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error2 error
    error2, err = error1.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error2
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "start failed: invalid message type")
    return
  }
  result := ActiveLearnerServerServiceStartResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Stop the learning session
// 
// Parameters:
//  - SessionId
func (p *ActiveLearnerServerServiceClient) Stop(sessionId *UUID) (err error) {
  if err = p.sendStop(sessionId); err != nil { return }
  return p.recvStop()
}

func (p *ActiveLearnerServerServiceClient) sendStop(sessionId *UUID)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("stop", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := ActiveLearnerServerServiceStopArgs{
  SessionId : sessionId,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *ActiveLearnerServerServiceClient) recvStop() (err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "stop" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "stop failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "stop failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error3 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error4 error
    error4, err = error3.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error4
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "stop failed: invalid message type")
    return
  }
  result := ActiveLearnerServerServiceStopResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  return
}

// Add annotations from the user to the learning process
// 
// Parameters:
//  - SessionId
//  - Annotations
func (p *ActiveLearnerServerServiceClient) AddAnnotations(sessionId *UUID, annotations []*Annotation) (err error) {
  if err = p.sendAddAnnotations(sessionId, annotations); err != nil { return }
  return p.recvAddAnnotations()
}

func (p *ActiveLearnerServerServiceClient) sendAddAnnotations(sessionId *UUID, annotations []*Annotation)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("addAnnotations", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := ActiveLearnerServerServiceAddAnnotationsArgs{
  SessionId : sessionId,
  Annotations : annotations,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *ActiveLearnerServerServiceClient) recvAddAnnotations() (err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "addAnnotations" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "addAnnotations failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "addAnnotations failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error5 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error6 error
    error6, err = error5.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error6
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "addAnnotations failed: invalid message type")
    return
  }
  result := ActiveLearnerServerServiceAddAnnotationsResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  return
}


type ActiveLearnerServerServiceProcessor struct {
  *ServiceProcessor
}

func NewActiveLearnerServerServiceProcessor(handler ActiveLearnerServerService) *ActiveLearnerServerServiceProcessor {
  self7 := &ActiveLearnerServerServiceProcessor{NewServiceProcessor(handler)}
  self7.AddToProcessorMap("start", &activeLearnerServerServiceProcessorStart{handler:handler})
  self7.AddToProcessorMap("stop", &activeLearnerServerServiceProcessorStop{handler:handler})
  self7.AddToProcessorMap("addAnnotations", &activeLearnerServerServiceProcessorAddAnnotations{handler:handler})
  return self7
}

type activeLearnerServerServiceProcessorStart struct {
  handler ActiveLearnerServerService
}

func (p *activeLearnerServerServiceProcessorStart) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ActiveLearnerServerServiceStartArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("start", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ActiveLearnerServerServiceStartResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.Start(args.SessionId, args.Task, args.Contact); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing start: " + err2.Error())
    oprot.WriteMessageBegin("start", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("start", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type activeLearnerServerServiceProcessorStop struct {
  handler ActiveLearnerServerService
}

func (p *activeLearnerServerServiceProcessorStop) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ActiveLearnerServerServiceStopArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("stop", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ActiveLearnerServerServiceStopResult{}
  var err2 error
  if err2 = p.handler.Stop(args.SessionId); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing stop: " + err2.Error())
    oprot.WriteMessageBegin("stop", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  if err2 = oprot.WriteMessageBegin("stop", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type activeLearnerServerServiceProcessorAddAnnotations struct {
  handler ActiveLearnerServerService
}

func (p *activeLearnerServerServiceProcessorAddAnnotations) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ActiveLearnerServerServiceAddAnnotationsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("addAnnotations", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ActiveLearnerServerServiceAddAnnotationsResult{}
  var err2 error
  if err2 = p.handler.AddAnnotations(args.SessionId, args.Annotations); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing addAnnotations: " + err2.Error())
    oprot.WriteMessageBegin("addAnnotations", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  if err2 = oprot.WriteMessageBegin("addAnnotations", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - SessionId
//  - Task
//  - Contact
type ActiveLearnerServerServiceStartArgs struct {
  SessionId *UUID `thrift:"sessionId,1" db:"sessionId" json:"sessionId"`
  Task *AnnotationTask `thrift:"task,2" db:"task" json:"task"`
  Contact *AsyncContactInfo `thrift:"contact,3" db:"contact" json:"contact"`
}

func NewActiveLearnerServerServiceStartArgs() *ActiveLearnerServerServiceStartArgs {
  return &ActiveLearnerServerServiceStartArgs{}
}

var ActiveLearnerServerServiceStartArgs_SessionId_DEFAULT *UUID
func (p *ActiveLearnerServerServiceStartArgs) GetSessionId() *UUID {
  if !p.IsSetSessionId() {
    return ActiveLearnerServerServiceStartArgs_SessionId_DEFAULT
  }
return p.SessionId
}
var ActiveLearnerServerServiceStartArgs_Task_DEFAULT *AnnotationTask
func (p *ActiveLearnerServerServiceStartArgs) GetTask() *AnnotationTask {
  if !p.IsSetTask() {
    return ActiveLearnerServerServiceStartArgs_Task_DEFAULT
  }
return p.Task
}
var ActiveLearnerServerServiceStartArgs_Contact_DEFAULT *AsyncContactInfo
func (p *ActiveLearnerServerServiceStartArgs) GetContact() *AsyncContactInfo {
  if !p.IsSetContact() {
    return ActiveLearnerServerServiceStartArgs_Contact_DEFAULT
  }
return p.Contact
}
func (p *ActiveLearnerServerServiceStartArgs) IsSetSessionId() bool {
  return p.SessionId != nil
}

func (p *ActiveLearnerServerServiceStartArgs) IsSetTask() bool {
  return p.Task != nil
}

func (p *ActiveLearnerServerServiceStartArgs) IsSetContact() bool {
  return p.Contact != nil
}

func (p *ActiveLearnerServerServiceStartArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ActiveLearnerServerServiceStartArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.SessionId = &UUID{}
  if err := p.SessionId.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SessionId), err)
  }
  return nil
}

func (p *ActiveLearnerServerServiceStartArgs)  ReadField2(iprot thrift.TProtocol) error {
  p.Task = &AnnotationTask{}
  if err := p.Task.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Task), err)
  }
  return nil
}

func (p *ActiveLearnerServerServiceStartArgs)  ReadField3(iprot thrift.TProtocol) error {
  p.Contact = &AsyncContactInfo{}
  if err := p.Contact.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Contact), err)
  }
  return nil
}

func (p *ActiveLearnerServerServiceStartArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("start_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ActiveLearnerServerServiceStartArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("sessionId", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:sessionId: ", p), err) }
  if err := p.SessionId.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SessionId), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:sessionId: ", p), err) }
  return err
}

func (p *ActiveLearnerServerServiceStartArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("task", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:task: ", p), err) }
  if err := p.Task.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Task), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:task: ", p), err) }
  return err
}

func (p *ActiveLearnerServerServiceStartArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("contact", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:contact: ", p), err) }
  if err := p.Contact.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Contact), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:contact: ", p), err) }
  return err
}

func (p *ActiveLearnerServerServiceStartArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ActiveLearnerServerServiceStartArgs(%+v)", *p)
}

// Attributes:
//  - Success
type ActiveLearnerServerServiceStartResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewActiveLearnerServerServiceStartResult() *ActiveLearnerServerServiceStartResult {
  return &ActiveLearnerServerServiceStartResult{}
}

var ActiveLearnerServerServiceStartResult_Success_DEFAULT bool
func (p *ActiveLearnerServerServiceStartResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return ActiveLearnerServerServiceStartResult_Success_DEFAULT
  }
return *p.Success
}
func (p *ActiveLearnerServerServiceStartResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ActiveLearnerServerServiceStartResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ActiveLearnerServerServiceStartResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *ActiveLearnerServerServiceStartResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("start_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ActiveLearnerServerServiceStartResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ActiveLearnerServerServiceStartResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ActiveLearnerServerServiceStartResult(%+v)", *p)
}

// Attributes:
//  - SessionId
type ActiveLearnerServerServiceStopArgs struct {
  SessionId *UUID `thrift:"sessionId,1" db:"sessionId" json:"sessionId"`
}

func NewActiveLearnerServerServiceStopArgs() *ActiveLearnerServerServiceStopArgs {
  return &ActiveLearnerServerServiceStopArgs{}
}

var ActiveLearnerServerServiceStopArgs_SessionId_DEFAULT *UUID
func (p *ActiveLearnerServerServiceStopArgs) GetSessionId() *UUID {
  if !p.IsSetSessionId() {
    return ActiveLearnerServerServiceStopArgs_SessionId_DEFAULT
  }
return p.SessionId
}
func (p *ActiveLearnerServerServiceStopArgs) IsSetSessionId() bool {
  return p.SessionId != nil
}

func (p *ActiveLearnerServerServiceStopArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ActiveLearnerServerServiceStopArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.SessionId = &UUID{}
  if err := p.SessionId.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SessionId), err)
  }
  return nil
}

func (p *ActiveLearnerServerServiceStopArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("stop_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ActiveLearnerServerServiceStopArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("sessionId", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:sessionId: ", p), err) }
  if err := p.SessionId.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SessionId), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:sessionId: ", p), err) }
  return err
}

func (p *ActiveLearnerServerServiceStopArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ActiveLearnerServerServiceStopArgs(%+v)", *p)
}

type ActiveLearnerServerServiceStopResult struct {
}

func NewActiveLearnerServerServiceStopResult() *ActiveLearnerServerServiceStopResult {
  return &ActiveLearnerServerServiceStopResult{}
}

func (p *ActiveLearnerServerServiceStopResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ActiveLearnerServerServiceStopResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("stop_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ActiveLearnerServerServiceStopResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ActiveLearnerServerServiceStopResult(%+v)", *p)
}

// Attributes:
//  - SessionId
//  - Annotations
type ActiveLearnerServerServiceAddAnnotationsArgs struct {
  SessionId *UUID `thrift:"sessionId,1" db:"sessionId" json:"sessionId"`
  Annotations []*Annotation `thrift:"annotations,2" db:"annotations" json:"annotations"`
}

func NewActiveLearnerServerServiceAddAnnotationsArgs() *ActiveLearnerServerServiceAddAnnotationsArgs {
  return &ActiveLearnerServerServiceAddAnnotationsArgs{}
}

var ActiveLearnerServerServiceAddAnnotationsArgs_SessionId_DEFAULT *UUID
func (p *ActiveLearnerServerServiceAddAnnotationsArgs) GetSessionId() *UUID {
  if !p.IsSetSessionId() {
    return ActiveLearnerServerServiceAddAnnotationsArgs_SessionId_DEFAULT
  }
return p.SessionId
}

func (p *ActiveLearnerServerServiceAddAnnotationsArgs) GetAnnotations() []*Annotation {
  return p.Annotations
}
func (p *ActiveLearnerServerServiceAddAnnotationsArgs) IsSetSessionId() bool {
  return p.SessionId != nil
}

func (p *ActiveLearnerServerServiceAddAnnotationsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ActiveLearnerServerServiceAddAnnotationsArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.SessionId = &UUID{}
  if err := p.SessionId.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SessionId), err)
  }
  return nil
}

func (p *ActiveLearnerServerServiceAddAnnotationsArgs)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Annotation, 0, size)
  p.Annotations =  tSlice
  for i := 0; i < size; i ++ {
    _elem8 := &Annotation{}
    if err := _elem8.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem8), err)
    }
    p.Annotations = append(p.Annotations, _elem8)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ActiveLearnerServerServiceAddAnnotationsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("addAnnotations_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ActiveLearnerServerServiceAddAnnotationsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("sessionId", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:sessionId: ", p), err) }
  if err := p.SessionId.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SessionId), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:sessionId: ", p), err) }
  return err
}

func (p *ActiveLearnerServerServiceAddAnnotationsArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("annotations", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:annotations: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Annotations)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Annotations {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:annotations: ", p), err) }
  return err
}

func (p *ActiveLearnerServerServiceAddAnnotationsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ActiveLearnerServerServiceAddAnnotationsArgs(%+v)", *p)
}

type ActiveLearnerServerServiceAddAnnotationsResult struct {
}

func NewActiveLearnerServerServiceAddAnnotationsResult() *ActiveLearnerServerServiceAddAnnotationsResult {
  return &ActiveLearnerServerServiceAddAnnotationsResult{}
}

func (p *ActiveLearnerServerServiceAddAnnotationsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ActiveLearnerServerServiceAddAnnotationsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("addAnnotations_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ActiveLearnerServerServiceAddAnnotationsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ActiveLearnerServerServiceAddAnnotationsResult(%+v)", *p)
}


type ActiveLearnerClientService interface {
Service
  //The active learner client implements a method to accept new sorts of the annotation units

  // Submit a new sort of communications to the broker
  // 
  // Parameters:
  //  - SessionId
  //  - UnitIds
  SubmitSort(sessionId *UUID, unitIds []*AnnotationUnitIdentifier) (err error)
}

//The active learner client implements a method to accept new sorts of the annotation units
type ActiveLearnerClientServiceClient struct {
  *ServiceClient
}

func NewActiveLearnerClientServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *ActiveLearnerClientServiceClient {
  return &ActiveLearnerClientServiceClient{ServiceClient: NewServiceClientFactory(t, f)}}

func NewActiveLearnerClientServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *ActiveLearnerClientServiceClient {
  return &ActiveLearnerClientServiceClient{ServiceClient: NewServiceClientProtocol(t, iprot, oprot)}
}

// Submit a new sort of communications to the broker
// 
// Parameters:
//  - SessionId
//  - UnitIds
func (p *ActiveLearnerClientServiceClient) SubmitSort(sessionId *UUID, unitIds []*AnnotationUnitIdentifier) (err error) {
  if err = p.sendSubmitSort(sessionId, unitIds); err != nil { return }
  return p.recvSubmitSort()
}

func (p *ActiveLearnerClientServiceClient) sendSubmitSort(sessionId *UUID, unitIds []*AnnotationUnitIdentifier)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("submitSort", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := ActiveLearnerClientServiceSubmitSortArgs{
  SessionId : sessionId,
  UnitIds : unitIds,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *ActiveLearnerClientServiceClient) recvSubmitSort() (err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "submitSort" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "submitSort failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "submitSort failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error45 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error46 error
    error46, err = error45.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error46
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "submitSort failed: invalid message type")
    return
  }
  result := ActiveLearnerClientServiceSubmitSortResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  return
}


type ActiveLearnerClientServiceProcessor struct {
  *ServiceProcessor
}

func NewActiveLearnerClientServiceProcessor(handler ActiveLearnerClientService) *ActiveLearnerClientServiceProcessor {
  self47 := &ActiveLearnerClientServiceProcessor{NewServiceProcessor(handler)}
  self47.AddToProcessorMap("submitSort", &activeLearnerClientServiceProcessorSubmitSort{handler:handler})
  return self47
}

type activeLearnerClientServiceProcessorSubmitSort struct {
  handler ActiveLearnerClientService
}

func (p *activeLearnerClientServiceProcessorSubmitSort) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ActiveLearnerClientServiceSubmitSortArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("submitSort", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ActiveLearnerClientServiceSubmitSortResult{}
  var err2 error
  if err2 = p.handler.SubmitSort(args.SessionId, args.UnitIds); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing submitSort: " + err2.Error())
    oprot.WriteMessageBegin("submitSort", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  if err2 = oprot.WriteMessageBegin("submitSort", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - SessionId
//  - UnitIds
type ActiveLearnerClientServiceSubmitSortArgs struct {
  SessionId *UUID `thrift:"sessionId,1" db:"sessionId" json:"sessionId"`
  UnitIds []*AnnotationUnitIdentifier `thrift:"unitIds,2" db:"unitIds" json:"unitIds"`
}

func NewActiveLearnerClientServiceSubmitSortArgs() *ActiveLearnerClientServiceSubmitSortArgs {
  return &ActiveLearnerClientServiceSubmitSortArgs{}
}

var ActiveLearnerClientServiceSubmitSortArgs_SessionId_DEFAULT *UUID
func (p *ActiveLearnerClientServiceSubmitSortArgs) GetSessionId() *UUID {
  if !p.IsSetSessionId() {
    return ActiveLearnerClientServiceSubmitSortArgs_SessionId_DEFAULT
  }
return p.SessionId
}

func (p *ActiveLearnerClientServiceSubmitSortArgs) GetUnitIds() []*AnnotationUnitIdentifier {
  return p.UnitIds
}
func (p *ActiveLearnerClientServiceSubmitSortArgs) IsSetSessionId() bool {
  return p.SessionId != nil
}

func (p *ActiveLearnerClientServiceSubmitSortArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ActiveLearnerClientServiceSubmitSortArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.SessionId = &UUID{}
  if err := p.SessionId.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SessionId), err)
  }
  return nil
}

func (p *ActiveLearnerClientServiceSubmitSortArgs)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*AnnotationUnitIdentifier, 0, size)
  p.UnitIds =  tSlice
  for i := 0; i < size; i ++ {
    _elem48 := &AnnotationUnitIdentifier{}
    if err := _elem48.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem48), err)
    }
    p.UnitIds = append(p.UnitIds, _elem48)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ActiveLearnerClientServiceSubmitSortArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("submitSort_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ActiveLearnerClientServiceSubmitSortArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("sessionId", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:sessionId: ", p), err) }
  if err := p.SessionId.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SessionId), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:sessionId: ", p), err) }
  return err
}

func (p *ActiveLearnerClientServiceSubmitSortArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("unitIds", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:unitIds: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.UnitIds)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.UnitIds {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:unitIds: ", p), err) }
  return err
}

func (p *ActiveLearnerClientServiceSubmitSortArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ActiveLearnerClientServiceSubmitSortArgs(%+v)", *p)
}

type ActiveLearnerClientServiceSubmitSortResult struct {
}

func NewActiveLearnerClientServiceSubmitSortResult() *ActiveLearnerClientServiceSubmitSortResult {
  return &ActiveLearnerClientServiceSubmitSortResult{}
}

func (p *ActiveLearnerClientServiceSubmitSortResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ActiveLearnerClientServiceSubmitSortResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("submitSort_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ActiveLearnerClientServiceSubmitSortResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ActiveLearnerClientServiceSubmitSortResult(%+v)", *p)
}


