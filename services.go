// Autogenerated by Thrift Compiler (0.10.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package goncrete

import (
	"bytes"
	"database/sql/driver"
	"errors"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"

)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

//Annotation Tasks Types
type AnnotationTaskType int64
const (
  AnnotationTaskType_TRANSLATION AnnotationTaskType = 1
  AnnotationTaskType_NER AnnotationTaskType = 2
  AnnotationTaskType_TOPICID AnnotationTaskType = 3
)

func (p AnnotationTaskType) String() string {
  switch p {
  case AnnotationTaskType_TRANSLATION: return "TRANSLATION"
  case AnnotationTaskType_NER: return "NER"
  case AnnotationTaskType_TOPICID: return "TOPICID"
  }
  return "<UNSET>"
}

func AnnotationTaskTypeFromString(s string) (AnnotationTaskType, error) {
  switch s {
  case "TRANSLATION": return AnnotationTaskType_TRANSLATION, nil 
  case "NER": return AnnotationTaskType_NER, nil 
  case "TOPICID": return AnnotationTaskType_TOPICID, nil 
  }
  return AnnotationTaskType(0), fmt.Errorf("not a valid AnnotationTaskType string")
}


func AnnotationTaskTypePtr(v AnnotationTaskType) *AnnotationTaskType { return &v }

func (p AnnotationTaskType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *AnnotationTaskType) UnmarshalText(text []byte) error {
q, err := AnnotationTaskTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *AnnotationTaskType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = AnnotationTaskType(v)
return nil
}

func (p * AnnotationTaskType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
//An annotation unit is the part of the communication to be annotated.
type AnnotationUnitType int64
const (
  AnnotationUnitType_COMMUNICATION AnnotationUnitType = 1
  AnnotationUnitType_SENTENCE AnnotationUnitType = 2
)

func (p AnnotationUnitType) String() string {
  switch p {
  case AnnotationUnitType_COMMUNICATION: return "COMMUNICATION"
  case AnnotationUnitType_SENTENCE: return "SENTENCE"
  }
  return "<UNSET>"
}

func AnnotationUnitTypeFromString(s string) (AnnotationUnitType, error) {
  switch s {
  case "COMMUNICATION": return AnnotationUnitType_COMMUNICATION, nil 
  case "SENTENCE": return AnnotationUnitType_SENTENCE, nil 
  }
  return AnnotationUnitType(0), fmt.Errorf("not a valid AnnotationUnitType string")
}


func AnnotationUnitTypePtr(v AnnotationUnitType) *AnnotationUnitType { return &v }

func (p AnnotationUnitType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *AnnotationUnitType) UnmarshalText(text []byte) error {
q, err := AnnotationUnitTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *AnnotationUnitType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = AnnotationUnitType(v)
return nil
}

func (p * AnnotationUnitType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
// An exception to be used with Concrete services.
// 
// Attributes:
//  - Message: The explanation (why the exception occurred)
//  - SerEx: The serialized exception
type ServicesException struct {
  Message string `thrift:"message,1,required" db:"message" json:"message"`
  SerEx []byte `thrift:"serEx,2" db:"serEx" json:"serEx,omitempty"`
}

func NewServicesException() *ServicesException {
  return &ServicesException{}
}


func (p *ServicesException) GetMessage() string {
  return p.Message
}
var ServicesException_SerEx_DEFAULT []byte

func (p *ServicesException) GetSerEx() []byte {
  return p.SerEx
}
func (p *ServicesException) IsSetSerEx() bool {
  return p.SerEx != nil
}

func (p *ServicesException) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetMessage bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetMessage = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetMessage{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Message is not set"));
  }
  return nil
}

func (p *ServicesException)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Message = v
}
  return nil
}

func (p *ServicesException)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.SerEx = v
}
  return nil
}

func (p *ServicesException) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ServicesException"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ServicesException) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("message", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:message: ", p), err) }
  if err := oprot.WriteString(string(p.Message)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.message (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:message: ", p), err) }
  return err
}

func (p *ServicesException) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetSerEx() {
    if err := oprot.WriteFieldBegin("serEx", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:serEx: ", p), err) }
    if err := oprot.WriteBinary(p.SerEx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.serEx (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:serEx: ", p), err) }
  }
  return err
}

func (p *ServicesException) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ServicesException(%+v)", *p)
}

func (p *ServicesException) Error() string {
  return p.String()
}

// An exception to be used when an invoked method has
// not been implemented by the service.
// 
// Attributes:
//  - Message: The explanation (why the exception occurred)
//  - SerEx: The serialized exception
type NotImplementedException struct {
  Message string `thrift:"message,1,required" db:"message" json:"message"`
  SerEx []byte `thrift:"serEx,2" db:"serEx" json:"serEx,omitempty"`
}

func NewNotImplementedException() *NotImplementedException {
  return &NotImplementedException{}
}


func (p *NotImplementedException) GetMessage() string {
  return p.Message
}
var NotImplementedException_SerEx_DEFAULT []byte

func (p *NotImplementedException) GetSerEx() []byte {
  return p.SerEx
}
func (p *NotImplementedException) IsSetSerEx() bool {
  return p.SerEx != nil
}

func (p *NotImplementedException) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetMessage bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetMessage = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetMessage{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Message is not set"));
  }
  return nil
}

func (p *NotImplementedException)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Message = v
}
  return nil
}

func (p *NotImplementedException)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.SerEx = v
}
  return nil
}

func (p *NotImplementedException) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("NotImplementedException"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *NotImplementedException) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("message", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:message: ", p), err) }
  if err := oprot.WriteString(string(p.Message)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.message (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:message: ", p), err) }
  return err
}

func (p *NotImplementedException) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetSerEx() {
    if err := oprot.WriteFieldBegin("serEx", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:serEx: ", p), err) }
    if err := oprot.WriteBinary(p.SerEx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.serEx (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:serEx: ", p), err) }
  }
  return err
}

func (p *NotImplementedException) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("NotImplementedException(%+v)", *p)
}

func (p *NotImplementedException) Error() string {
  return p.String()
}

// Contact information for the asynchronous communications.
// When a client contacts a server for a job that takes a significant amount of time,
// it is often best to implement this asynchronously.
// We do this by having the client stand up a server to accept the results and
// passing that information to the original server.
// The server may want to create a new thrift client on every request or maintain
// a pool of clients for reuse.
// 
// Attributes:
//  - Host
//  - Port
type AsyncContactInfo struct {
  Host string `thrift:"host,1,required" db:"host" json:"host"`
  Port int32 `thrift:"port,2,required" db:"port" json:"port"`
}

func NewAsyncContactInfo() *AsyncContactInfo {
  return &AsyncContactInfo{}
}


func (p *AsyncContactInfo) GetHost() string {
  return p.Host
}

func (p *AsyncContactInfo) GetPort() int32 {
  return p.Port
}
func (p *AsyncContactInfo) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetHost bool = false;
  var issetPort bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetHost = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
      issetPort = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetHost{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Host is not set"));
  }
  if !issetPort{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Port is not set"));
  }
  return nil
}

func (p *AsyncContactInfo)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Host = v
}
  return nil
}

func (p *AsyncContactInfo)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Port = v
}
  return nil
}

func (p *AsyncContactInfo) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("AsyncContactInfo"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AsyncContactInfo) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("host", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:host: ", p), err) }
  if err := oprot.WriteString(string(p.Host)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.host (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:host: ", p), err) }
  return err
}

func (p *AsyncContactInfo) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("port", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:port: ", p), err) }
  if err := oprot.WriteI32(int32(p.Port)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.port (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:port: ", p), err) }
  return err
}

func (p *AsyncContactInfo) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AsyncContactInfo(%+v)", *p)
}

// An annotation unit is the part of the communication to be annotated.
// It can be the entire communication or a particular sentence in the communication.
// If the sentenceID is null, the unit is the entire communication
// 
// Attributes:
//  - CommunicationId: Communication identifier for loading data
//  - SentenceId: Sentence identifer if annotating sentences
type AnnotationUnitIdentifier struct {
  CommunicationId string `thrift:"communicationId,1,required" db:"communicationId" json:"communicationId"`
  SentenceId *UUID `thrift:"sentenceId,2" db:"sentenceId" json:"sentenceId,omitempty"`
}

func NewAnnotationUnitIdentifier() *AnnotationUnitIdentifier {
  return &AnnotationUnitIdentifier{}
}


func (p *AnnotationUnitIdentifier) GetCommunicationId() string {
  return p.CommunicationId
}
var AnnotationUnitIdentifier_SentenceId_DEFAULT *UUID
func (p *AnnotationUnitIdentifier) GetSentenceId() *UUID {
  if !p.IsSetSentenceId() {
    return AnnotationUnitIdentifier_SentenceId_DEFAULT
  }
return p.SentenceId
}
func (p *AnnotationUnitIdentifier) IsSetSentenceId() bool {
  return p.SentenceId != nil
}

func (p *AnnotationUnitIdentifier) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetCommunicationId bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetCommunicationId = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetCommunicationId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field CommunicationId is not set"));
  }
  return nil
}

func (p *AnnotationUnitIdentifier)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.CommunicationId = v
}
  return nil
}

func (p *AnnotationUnitIdentifier)  ReadField2(iprot thrift.TProtocol) error {
  p.SentenceId = &UUID{}
  if err := p.SentenceId.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SentenceId), err)
  }
  return nil
}

func (p *AnnotationUnitIdentifier) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("AnnotationUnitIdentifier"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AnnotationUnitIdentifier) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("communicationId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:communicationId: ", p), err) }
  if err := oprot.WriteString(string(p.CommunicationId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.communicationId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:communicationId: ", p), err) }
  return err
}

func (p *AnnotationUnitIdentifier) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetSentenceId() {
    if err := oprot.WriteFieldBegin("sentenceId", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:sentenceId: ", p), err) }
    if err := p.SentenceId.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SentenceId), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:sentenceId: ", p), err) }
  }
  return err
}

func (p *AnnotationUnitIdentifier) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AnnotationUnitIdentifier(%+v)", *p)
}

// Each service is described by this info struct.
// It is for human consumption and for records of versions in deployments.
// 
// Attributes:
//  - Name: Name of the service
//  - Version: Version string of the service.
// It is preferred that the services implement semantic versioning: http://semver.org/
// with version strings like x.y.z
//  - Description: Description of the service
type ServiceInfo struct {
  Name string `thrift:"name,1,required" db:"name" json:"name"`
  Version string `thrift:"version,2,required" db:"version" json:"version"`
  Description *string `thrift:"description,3" db:"description" json:"description,omitempty"`
}

func NewServiceInfo() *ServiceInfo {
  return &ServiceInfo{}
}


func (p *ServiceInfo) GetName() string {
  return p.Name
}

func (p *ServiceInfo) GetVersion() string {
  return p.Version
}
var ServiceInfo_Description_DEFAULT string
func (p *ServiceInfo) GetDescription() string {
  if !p.IsSetDescription() {
    return ServiceInfo_Description_DEFAULT
  }
return *p.Description
}
func (p *ServiceInfo) IsSetDescription() bool {
  return p.Description != nil
}

func (p *ServiceInfo) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetName bool = false;
  var issetVersion bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetName = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
      issetVersion = true
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetName{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Name is not set"));
  }
  if !issetVersion{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Version is not set"));
  }
  return nil
}

func (p *ServiceInfo)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *ServiceInfo)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Version = v
}
  return nil
}

func (p *ServiceInfo)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Description = &v
}
  return nil
}

func (p *ServiceInfo) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ServiceInfo"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ServiceInfo) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:name: ", p), err) }
  if err := oprot.WriteString(string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:name: ", p), err) }
  return err
}

func (p *ServiceInfo) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("version", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:version: ", p), err) }
  if err := oprot.WriteString(string(p.Version)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.version (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:version: ", p), err) }
  return err
}

func (p *ServiceInfo) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetDescription() {
    if err := oprot.WriteFieldBegin("description", thrift.STRING, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:description: ", p), err) }
    if err := oprot.WriteString(string(*p.Description)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.description (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:description: ", p), err) }
  }
  return err
}

func (p *ServiceInfo) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ServiceInfo(%+v)", *p)
}

type Service interface {  //Base service that all other services should inherit from

  // Get information about the service
  About() (r *ServiceInfo, err error)
  // Is the service alive?
  Alive() (r bool, err error)
}

//Base service that all other services should inherit from
type ServiceClient struct {
  Transport thrift.TTransport
  ProtocolFactory thrift.TProtocolFactory
  InputProtocol thrift.TProtocol
  OutputProtocol thrift.TProtocol
  SeqId int32
}

func NewServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *ServiceClient {
  return &ServiceClient{Transport: t,
    ProtocolFactory: f,
    InputProtocol: f.GetProtocol(t),
    OutputProtocol: f.GetProtocol(t),
    SeqId: 0,
  }
}

func NewServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *ServiceClient {
  return &ServiceClient{Transport: t,
    ProtocolFactory: nil,
    InputProtocol: iprot,
    OutputProtocol: oprot,
    SeqId: 0,
  }
}

// Get information about the service
func (p *ServiceClient) About() (r *ServiceInfo, err error) {
  if err = p.sendAbout(); err != nil { return }
  return p.recvAbout()
}

func (p *ServiceClient) sendAbout()(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("about", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := ServiceAboutArgs{
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *ServiceClient) recvAbout() (value *ServiceInfo, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "about" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "about failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "about failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error0 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error1 error
    error1, err = error0.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error1
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "about failed: invalid message type")
    return
  }
  result := ServiceAboutResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Is the service alive?
func (p *ServiceClient) Alive() (r bool, err error) {
  if err = p.sendAlive(); err != nil { return }
  return p.recvAlive()
}

func (p *ServiceClient) sendAlive()(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("alive", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := ServiceAliveArgs{
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *ServiceClient) recvAlive() (value bool, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "alive" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "alive failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "alive failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error2 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error3 error
    error3, err = error2.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error3
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "alive failed: invalid message type")
    return
  }
  result := ServiceAliveResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}


type ServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler Service
}

func (p *ServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *ServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *ServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewServiceProcessor(handler Service) *ServiceProcessor {

  self4 := &ServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self4.processorMap["about"] = &serviceProcessorAbout{handler:handler}
  self4.processorMap["alive"] = &serviceProcessorAlive{handler:handler}
return self4
}

func (p *ServiceProcessor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x5 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x5.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush()
  return false, x5

}

type serviceProcessorAbout struct {
  handler Service
}

func (p *serviceProcessorAbout) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ServiceAboutArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("about", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ServiceAboutResult{}
var retval *ServiceInfo
  var err2 error
  if retval, err2 = p.handler.About(); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing about: " + err2.Error())
    oprot.WriteMessageBegin("about", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("about", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type serviceProcessorAlive struct {
  handler Service
}

func (p *serviceProcessorAlive) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ServiceAliveArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("alive", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ServiceAliveResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.Alive(); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing alive: " + err2.Error())
    oprot.WriteMessageBegin("alive", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("alive", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

type ServiceAboutArgs struct {
}

func NewServiceAboutArgs() *ServiceAboutArgs {
  return &ServiceAboutArgs{}
}

func (p *ServiceAboutArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ServiceAboutArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("about_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ServiceAboutArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ServiceAboutArgs(%+v)", *p)
}

// Attributes:
//  - Success
type ServiceAboutResult struct {
  Success *ServiceInfo `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewServiceAboutResult() *ServiceAboutResult {
  return &ServiceAboutResult{}
}

var ServiceAboutResult_Success_DEFAULT *ServiceInfo
func (p *ServiceAboutResult) GetSuccess() *ServiceInfo {
  if !p.IsSetSuccess() {
    return ServiceAboutResult_Success_DEFAULT
  }
return p.Success
}
func (p *ServiceAboutResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ServiceAboutResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ServiceAboutResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &ServiceInfo{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ServiceAboutResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("about_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ServiceAboutResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ServiceAboutResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ServiceAboutResult(%+v)", *p)
}

type ServiceAliveArgs struct {
}

func NewServiceAliveArgs() *ServiceAliveArgs {
  return &ServiceAliveArgs{}
}

func (p *ServiceAliveArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ServiceAliveArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("alive_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ServiceAliveArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ServiceAliveArgs(%+v)", *p)
}

// Attributes:
//  - Success
type ServiceAliveResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewServiceAliveResult() *ServiceAliveResult {
  return &ServiceAliveResult{}
}

var ServiceAliveResult_Success_DEFAULT bool
func (p *ServiceAliveResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return ServiceAliveResult_Success_DEFAULT
  }
return *p.Success
}
func (p *ServiceAliveResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ServiceAliveResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ServiceAliveResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *ServiceAliveResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("alive_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ServiceAliveResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ServiceAliveResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ServiceAliveResult(%+v)", *p)
}


