// Autogenerated by Thrift Compiler (0.10.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package goncrete

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

// A span of text within a single communication, identified by a pair
// of zero-indexed character offsets into a Thrift string. Thrift strings
// are encoded using UTF-8:
//   https://thrift.apache.org/docs/types
// The offsets are character-based, not byte-based - a character with a
// three-byte UTF-8 representation only counts as one character.
// 
// NOTE: This span represents a best guess, or 'provenance':
// it cannot be guaranteed that this text span matches the _exact_
// text of the original document, but is the annotation's best
// effort at such a representation.
// 
// Attributes:
//  - Start: Start character, inclusive.
//  - Ending: End character, exclusive
type TextSpan struct {
  Start int32 `thrift:"start,1,required" db:"start" json:"start"`
  Ending int32 `thrift:"ending,2,required" db:"ending" json:"ending"`
}

func NewTextSpan() *TextSpan {
  return &TextSpan{}
}


func (p *TextSpan) GetStart() int32 {
  return p.Start
}

func (p *TextSpan) GetEnding() int32 {
  return p.Ending
}
func (p *TextSpan) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetStart bool = false;
  var issetEnding bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetStart = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
      issetEnding = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetStart{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Start is not set"));
  }
  if !issetEnding{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Ending is not set"));
  }
  return nil
}

func (p *TextSpan)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Start = v
}
  return nil
}

func (p *TextSpan)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Ending = v
}
  return nil
}

func (p *TextSpan) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TextSpan"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TextSpan) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("start", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:start: ", p), err) }
  if err := oprot.WriteI32(int32(p.Start)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.start (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:start: ", p), err) }
  return err
}

func (p *TextSpan) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("ending", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ending: ", p), err) }
  if err := oprot.WriteI32(int32(p.Ending)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ending (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ending: ", p), err) }
  return err
}

func (p *TextSpan) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TextSpan(%+v)", *p)
}

// A span of audio within a single communication, identified by a
// pair of time offests. Time offsets are zero-based.
// 
// NOTE: This span represents a best guess, or 'provenance':
// it cannot be guaranteed that this text span matches the _exact_
// text of the original document, but is the annotation's best
// effort at such a representation.
// 
// Attributes:
//  - Start: Start time (in seconds)
//  - Ending: End time (in seconds)
type AudioSpan struct {
  Start int64 `thrift:"start,1,required" db:"start" json:"start"`
  Ending int64 `thrift:"ending,2,required" db:"ending" json:"ending"`
}

func NewAudioSpan() *AudioSpan {
  return &AudioSpan{}
}


func (p *AudioSpan) GetStart() int64 {
  return p.Start
}

func (p *AudioSpan) GetEnding() int64 {
  return p.Ending
}
func (p *AudioSpan) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetStart bool = false;
  var issetEnding bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetStart = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
      issetEnding = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetStart{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Start is not set"));
  }
  if !issetEnding{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Ending is not set"));
  }
  return nil
}

func (p *AudioSpan)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Start = v
}
  return nil
}

func (p *AudioSpan)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Ending = v
}
  return nil
}

func (p *AudioSpan) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("AudioSpan"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AudioSpan) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("start", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:start: ", p), err) }
  if err := oprot.WriteI64(int64(p.Start)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.start (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:start: ", p), err) }
  return err
}

func (p *AudioSpan) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("ending", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ending: ", p), err) }
  if err := oprot.WriteI64(int64(p.Ending)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ending (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ending: ", p), err) }
  return err
}

func (p *AudioSpan) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AudioSpan(%+v)", *p)
}

