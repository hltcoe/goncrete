// Autogenerated by Thrift Compiler (0.10.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package goncrete

import (
	"bytes"
	"database/sql/driver"
	"errors"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"

)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

//What are we searching over
type SearchType int64
const (
  SearchType_COMMUNICATIONS SearchType = 0
  SearchType_SECTIONS SearchType = 1
  SearchType_SENTENCES SearchType = 2
  SearchType_ENTITIES SearchType = 3
  SearchType_ENTITY_MENTIONS SearchType = 4
  SearchType_SITUATIONS SearchType = 5
  SearchType_SITUATION_MENTIONS SearchType = 6
)

func (p SearchType) String() string {
  switch p {
  case SearchType_COMMUNICATIONS: return "COMMUNICATIONS"
  case SearchType_SECTIONS: return "SECTIONS"
  case SearchType_SENTENCES: return "SENTENCES"
  case SearchType_ENTITIES: return "ENTITIES"
  case SearchType_ENTITY_MENTIONS: return "ENTITY_MENTIONS"
  case SearchType_SITUATIONS: return "SITUATIONS"
  case SearchType_SITUATION_MENTIONS: return "SITUATION_MENTIONS"
  }
  return "<UNSET>"
}

func SearchTypeFromString(s string) (SearchType, error) {
  switch s {
  case "COMMUNICATIONS": return SearchType_COMMUNICATIONS, nil 
  case "SECTIONS": return SearchType_SECTIONS, nil 
  case "SENTENCES": return SearchType_SENTENCES, nil 
  case "ENTITIES": return SearchType_ENTITIES, nil 
  case "ENTITY_MENTIONS": return SearchType_ENTITY_MENTIONS, nil 
  case "SITUATIONS": return SearchType_SITUATIONS, nil 
  case "SITUATION_MENTIONS": return SearchType_SITUATION_MENTIONS, nil 
  }
  return SearchType(0), fmt.Errorf("not a valid SearchType string")
}


func SearchTypePtr(v SearchType) *SearchType { return &v }

func (p SearchType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *SearchType) UnmarshalText(text []byte) error {
q, err := SearchTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *SearchType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = SearchType(v)
return nil
}

func (p * SearchType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
//Feedback values
type SearchFeedback int64
const (
  SearchFeedback_NEGATIVE SearchFeedback = -1
  SearchFeedback_NONE SearchFeedback = 0
  SearchFeedback_POSITIVE SearchFeedback = 1
)

func (p SearchFeedback) String() string {
  switch p {
  case SearchFeedback_NEGATIVE: return "NEGATIVE"
  case SearchFeedback_NONE: return "NONE"
  case SearchFeedback_POSITIVE: return "POSITIVE"
  }
  return "<UNSET>"
}

func SearchFeedbackFromString(s string) (SearchFeedback, error) {
  switch s {
  case "NEGATIVE": return SearchFeedback_NEGATIVE, nil 
  case "NONE": return SearchFeedback_NONE, nil 
  case "POSITIVE": return SearchFeedback_POSITIVE, nil 
  }
  return SearchFeedback(0), fmt.Errorf("not a valid SearchFeedback string")
}


func SearchFeedbackPtr(v SearchFeedback) *SearchFeedback { return &v }

func (p SearchFeedback) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *SearchFeedback) UnmarshalText(text []byte) error {
q, err := SearchFeedbackFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *SearchFeedback) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = SearchFeedback(v)
return nil
}

func (p * SearchFeedback) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
// A search provider describes its capabilities with a list of search type and language pairs.
// 
// Attributes:
//  - Type: A type of search supported by the search provider
//  - Lang: Language that the search provider supports.
// Use ISO 639-2/T three letter codes.
type SearchCapability struct {
  Type SearchType `thrift:"type,1,required" db:"type" json:"type"`
  Lang string `thrift:"lang,2,required" db:"lang" json:"lang"`
}

func NewSearchCapability() *SearchCapability {
  return &SearchCapability{}
}


func (p *SearchCapability) GetType() SearchType {
  return p.Type
}

func (p *SearchCapability) GetLang() string {
  return p.Lang
}
func (p *SearchCapability) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetType bool = false;
  var issetLang bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetType = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
      issetLang = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetType{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Type is not set"));
  }
  if !issetLang{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Lang is not set"));
  }
  return nil
}

func (p *SearchCapability)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := SearchType(v)
  p.Type = temp
}
  return nil
}

func (p *SearchCapability)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Lang = v
}
  return nil
}

func (p *SearchCapability) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SearchCapability"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SearchCapability) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("type", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:type: ", p), err) }
  if err := oprot.WriteI32(int32(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:type: ", p), err) }
  return err
}

func (p *SearchCapability) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("lang", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:lang: ", p), err) }
  if err := oprot.WriteString(string(p.Lang)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.lang (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:lang: ", p), err) }
  return err
}

func (p *SearchCapability) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SearchCapability(%+v)", *p)
}

// Wrapper for information relevant to a (possibly structured) search.
// 
// Attributes:
//  - Terms: Individual words, or multiword phrases, e.g., 'dog', 'blue
// cheese'.  It is the responsibility of the implementation of
// Search* to tokenize multiword phrases, if so-desired.  Further,
// an implementation may choose to support advanced features such as
// wildcards, e.g.: 'blue*'.  This specification makes no
// committment as to the internal structure of keywords and their
// semantics: that is the responsibility of the individual
// implementation.
//  - Questions: e.g., "what is the capital of spain?"
// 
// questions is a list in order that possibly different phrasings of
// the question can be included, e.g.: "what is the name of spain's
// capital?"
//  - CommunicationId: Refers to an optional communication that can provide context for the query.
//  - Tokens: Refers to a sequence of tokens in the communication referenced by communicationId.
//  - RawQuery: The input from the user provided in the search box, unmodified
//  - Auths: optional authorization mechanism
//  - UserId: Identifies the user who submitted the search query
//  - Name: Human readable name of the query.
//  - Labels: Properties of the query or user.
// These labels can be used to group queries and results by a domain or group of
// users for training. An example usage would be assigning the geographical region
// as a label ("spain"). User labels could be based on organizational units ("hltcoe").
//  - Type: This search is over this type of data (communications, sentences, entities)
//  - Lang: The language of the corpus that the user wants to search.
// Use ISO 639-2/T three letter codes.
//  - Corpus: An identifier of the corpus that the search is to be performed over.
//  - K: The maximum number of candidates the search service should return.
//  - Communication: An optional communication used as context for the query.
// If both this field and communicationId is populated, then it is
// assumed the ID of the communication is the same as communicationId.
type SearchQuery struct {
  Terms []string `thrift:"terms,1" db:"terms" json:"terms,omitempty"`
  Questions []string `thrift:"questions,2" db:"questions" json:"questions,omitempty"`
  CommunicationId *string `thrift:"communicationId,3" db:"communicationId" json:"communicationId,omitempty"`
  Tokens *TokenRefSequence `thrift:"tokens,4" db:"tokens" json:"tokens,omitempty"`
  RawQuery *string `thrift:"rawQuery,5" db:"rawQuery" json:"rawQuery,omitempty"`
  Auths *string `thrift:"auths,6" db:"auths" json:"auths,omitempty"`
  UserId *string `thrift:"userId,7" db:"userId" json:"userId,omitempty"`
  Name *string `thrift:"name,8" db:"name" json:"name,omitempty"`
  Labels []string `thrift:"labels,9" db:"labels" json:"labels,omitempty"`
  Type SearchType `thrift:"type,10,required" db:"type" json:"type"`
  Lang *string `thrift:"lang,11" db:"lang" json:"lang,omitempty"`
  Corpus *string `thrift:"corpus,12" db:"corpus" json:"corpus,omitempty"`
  K *int32 `thrift:"k,13" db:"k" json:"k,omitempty"`
  Communication *Communication `thrift:"communication,14" db:"communication" json:"communication,omitempty"`
}

func NewSearchQuery() *SearchQuery {
  return &SearchQuery{}
}

var SearchQuery_Terms_DEFAULT []string

func (p *SearchQuery) GetTerms() []string {
  return p.Terms
}
var SearchQuery_Questions_DEFAULT []string

func (p *SearchQuery) GetQuestions() []string {
  return p.Questions
}
var SearchQuery_CommunicationId_DEFAULT string
func (p *SearchQuery) GetCommunicationId() string {
  if !p.IsSetCommunicationId() {
    return SearchQuery_CommunicationId_DEFAULT
  }
return *p.CommunicationId
}
var SearchQuery_Tokens_DEFAULT *TokenRefSequence
func (p *SearchQuery) GetTokens() *TokenRefSequence {
  if !p.IsSetTokens() {
    return SearchQuery_Tokens_DEFAULT
  }
return p.Tokens
}
var SearchQuery_RawQuery_DEFAULT string
func (p *SearchQuery) GetRawQuery() string {
  if !p.IsSetRawQuery() {
    return SearchQuery_RawQuery_DEFAULT
  }
return *p.RawQuery
}
var SearchQuery_Auths_DEFAULT string
func (p *SearchQuery) GetAuths() string {
  if !p.IsSetAuths() {
    return SearchQuery_Auths_DEFAULT
  }
return *p.Auths
}
var SearchQuery_UserId_DEFAULT string
func (p *SearchQuery) GetUserId() string {
  if !p.IsSetUserId() {
    return SearchQuery_UserId_DEFAULT
  }
return *p.UserId
}
var SearchQuery_Name_DEFAULT string
func (p *SearchQuery) GetName() string {
  if !p.IsSetName() {
    return SearchQuery_Name_DEFAULT
  }
return *p.Name
}
var SearchQuery_Labels_DEFAULT []string

func (p *SearchQuery) GetLabels() []string {
  return p.Labels
}

func (p *SearchQuery) GetType() SearchType {
  return p.Type
}
var SearchQuery_Lang_DEFAULT string
func (p *SearchQuery) GetLang() string {
  if !p.IsSetLang() {
    return SearchQuery_Lang_DEFAULT
  }
return *p.Lang
}
var SearchQuery_Corpus_DEFAULT string
func (p *SearchQuery) GetCorpus() string {
  if !p.IsSetCorpus() {
    return SearchQuery_Corpus_DEFAULT
  }
return *p.Corpus
}
var SearchQuery_K_DEFAULT int32
func (p *SearchQuery) GetK() int32 {
  if !p.IsSetK() {
    return SearchQuery_K_DEFAULT
  }
return *p.K
}
var SearchQuery_Communication_DEFAULT *Communication
func (p *SearchQuery) GetCommunication() *Communication {
  if !p.IsSetCommunication() {
    return SearchQuery_Communication_DEFAULT
  }
return p.Communication
}
func (p *SearchQuery) IsSetTerms() bool {
  return p.Terms != nil
}

func (p *SearchQuery) IsSetQuestions() bool {
  return p.Questions != nil
}

func (p *SearchQuery) IsSetCommunicationId() bool {
  return p.CommunicationId != nil
}

func (p *SearchQuery) IsSetTokens() bool {
  return p.Tokens != nil
}

func (p *SearchQuery) IsSetRawQuery() bool {
  return p.RawQuery != nil
}

func (p *SearchQuery) IsSetAuths() bool {
  return p.Auths != nil
}

func (p *SearchQuery) IsSetUserId() bool {
  return p.UserId != nil
}

func (p *SearchQuery) IsSetName() bool {
  return p.Name != nil
}

func (p *SearchQuery) IsSetLabels() bool {
  return p.Labels != nil
}

func (p *SearchQuery) IsSetLang() bool {
  return p.Lang != nil
}

func (p *SearchQuery) IsSetCorpus() bool {
  return p.Corpus != nil
}

func (p *SearchQuery) IsSetK() bool {
  return p.K != nil
}

func (p *SearchQuery) IsSetCommunication() bool {
  return p.Communication != nil
}

func (p *SearchQuery) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetType bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    case 7:
      if err := p.ReadField7(iprot); err != nil {
        return err
      }
    case 8:
      if err := p.ReadField8(iprot); err != nil {
        return err
      }
    case 9:
      if err := p.ReadField9(iprot); err != nil {
        return err
      }
    case 10:
      if err := p.ReadField10(iprot); err != nil {
        return err
      }
      issetType = true
    case 11:
      if err := p.ReadField11(iprot); err != nil {
        return err
      }
    case 12:
      if err := p.ReadField12(iprot); err != nil {
        return err
      }
    case 13:
      if err := p.ReadField13(iprot); err != nil {
        return err
      }
    case 14:
      if err := p.ReadField14(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetType{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Type is not set"));
  }
  return nil
}

func (p *SearchQuery)  ReadField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Terms =  tSlice
  for i := 0; i < size; i ++ {
var _elem0 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem0 = v
}
    p.Terms = append(p.Terms, _elem0)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *SearchQuery)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Questions =  tSlice
  for i := 0; i < size; i ++ {
var _elem1 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem1 = v
}
    p.Questions = append(p.Questions, _elem1)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *SearchQuery)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.CommunicationId = &v
}
  return nil
}

func (p *SearchQuery)  ReadField4(iprot thrift.TProtocol) error {
  p.Tokens = &TokenRefSequence{
  AnchorTokenIndex: -1,
}
  if err := p.Tokens.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Tokens), err)
  }
  return nil
}

func (p *SearchQuery)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.RawQuery = &v
}
  return nil
}

func (p *SearchQuery)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.Auths = &v
}
  return nil
}

func (p *SearchQuery)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.UserId = &v
}
  return nil
}

func (p *SearchQuery)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.Name = &v
}
  return nil
}

func (p *SearchQuery)  ReadField9(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Labels =  tSlice
  for i := 0; i < size; i ++ {
var _elem2 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem2 = v
}
    p.Labels = append(p.Labels, _elem2)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *SearchQuery)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  temp := SearchType(v)
  p.Type = temp
}
  return nil
}

func (p *SearchQuery)  ReadField11(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.Lang = &v
}
  return nil
}

func (p *SearchQuery)  ReadField12(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  p.Corpus = &v
}
  return nil
}

func (p *SearchQuery)  ReadField13(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 13: ", err)
} else {
  p.K = &v
}
  return nil
}

func (p *SearchQuery)  ReadField14(iprot thrift.TProtocol) error {
  p.Communication = &Communication{}
  if err := p.Communication.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Communication), err)
  }
  return nil
}

func (p *SearchQuery) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SearchQuery"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField11(oprot); err != nil { return err }
    if err := p.writeField12(oprot); err != nil { return err }
    if err := p.writeField13(oprot); err != nil { return err }
    if err := p.writeField14(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SearchQuery) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetTerms() {
    if err := oprot.WriteFieldBegin("terms", thrift.LIST, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:terms: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRING, len(p.Terms)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Terms {
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:terms: ", p), err) }
  }
  return err
}

func (p *SearchQuery) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetQuestions() {
    if err := oprot.WriteFieldBegin("questions", thrift.LIST, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:questions: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRING, len(p.Questions)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Questions {
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:questions: ", p), err) }
  }
  return err
}

func (p *SearchQuery) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetCommunicationId() {
    if err := oprot.WriteFieldBegin("communicationId", thrift.STRING, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:communicationId: ", p), err) }
    if err := oprot.WriteString(string(*p.CommunicationId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.communicationId (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:communicationId: ", p), err) }
  }
  return err
}

func (p *SearchQuery) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetTokens() {
    if err := oprot.WriteFieldBegin("tokens", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:tokens: ", p), err) }
    if err := p.Tokens.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Tokens), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:tokens: ", p), err) }
  }
  return err
}

func (p *SearchQuery) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetRawQuery() {
    if err := oprot.WriteFieldBegin("rawQuery", thrift.STRING, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:rawQuery: ", p), err) }
    if err := oprot.WriteString(string(*p.RawQuery)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.rawQuery (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:rawQuery: ", p), err) }
  }
  return err
}

func (p *SearchQuery) writeField6(oprot thrift.TProtocol) (err error) {
  if p.IsSetAuths() {
    if err := oprot.WriteFieldBegin("auths", thrift.STRING, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:auths: ", p), err) }
    if err := oprot.WriteString(string(*p.Auths)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.auths (6) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:auths: ", p), err) }
  }
  return err
}

func (p *SearchQuery) writeField7(oprot thrift.TProtocol) (err error) {
  if p.IsSetUserId() {
    if err := oprot.WriteFieldBegin("userId", thrift.STRING, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:userId: ", p), err) }
    if err := oprot.WriteString(string(*p.UserId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.userId (7) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:userId: ", p), err) }
  }
  return err
}

func (p *SearchQuery) writeField8(oprot thrift.TProtocol) (err error) {
  if p.IsSetName() {
    if err := oprot.WriteFieldBegin("name", thrift.STRING, 8); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:name: ", p), err) }
    if err := oprot.WriteString(string(*p.Name)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.name (8) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 8:name: ", p), err) }
  }
  return err
}

func (p *SearchQuery) writeField9(oprot thrift.TProtocol) (err error) {
  if p.IsSetLabels() {
    if err := oprot.WriteFieldBegin("labels", thrift.LIST, 9); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:labels: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRING, len(p.Labels)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Labels {
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 9:labels: ", p), err) }
  }
  return err
}

func (p *SearchQuery) writeField10(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("type", thrift.I32, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:type: ", p), err) }
  if err := oprot.WriteI32(int32(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:type: ", p), err) }
  return err
}

func (p *SearchQuery) writeField11(oprot thrift.TProtocol) (err error) {
  if p.IsSetLang() {
    if err := oprot.WriteFieldBegin("lang", thrift.STRING, 11); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:lang: ", p), err) }
    if err := oprot.WriteString(string(*p.Lang)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.lang (11) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 11:lang: ", p), err) }
  }
  return err
}

func (p *SearchQuery) writeField12(oprot thrift.TProtocol) (err error) {
  if p.IsSetCorpus() {
    if err := oprot.WriteFieldBegin("corpus", thrift.STRING, 12); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:corpus: ", p), err) }
    if err := oprot.WriteString(string(*p.Corpus)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.corpus (12) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 12:corpus: ", p), err) }
  }
  return err
}

func (p *SearchQuery) writeField13(oprot thrift.TProtocol) (err error) {
  if p.IsSetK() {
    if err := oprot.WriteFieldBegin("k", thrift.I32, 13); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:k: ", p), err) }
    if err := oprot.WriteI32(int32(*p.K)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.k (13) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 13:k: ", p), err) }
  }
  return err
}

func (p *SearchQuery) writeField14(oprot thrift.TProtocol) (err error) {
  if p.IsSetCommunication() {
    if err := oprot.WriteFieldBegin("communication", thrift.STRUCT, 14); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:communication: ", p), err) }
    if err := p.Communication.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Communication), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 14:communication: ", p), err) }
  }
  return err
}

func (p *SearchQuery) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SearchQuery(%+v)", *p)
}

// An individual element returned from a search.  Most/all methods
// will return a communicationId, possibly with an associated score.
// For example if the target element type of the search is Sentence
// then the sentenceId field should be populated.
// 
// Attributes:
//  - CommunicationId
//  - SentenceId: The UUID of the returned sentence, which appears in the
// communication referenced by communicationId.
//  - Score: Values are not restricted in range (e.g., do not have to be
// within [0,1]).  Higher is better.
// 
//  - Tokens: If SearchType=ENTITY_MENTIONS then this field should be populated.
// Otherwise, this field may be optionally populated in order to
// provide a hint to the client as to where to center a
// visualization, or the extraction of context, etc.
//  - Entity: If SearchType=ENTITIES then this field should be populated.
type SearchResultItem struct {
  CommunicationId *string `thrift:"communicationId,1" db:"communicationId" json:"communicationId,omitempty"`
  SentenceId *UUID `thrift:"sentenceId,2" db:"sentenceId" json:"sentenceId,omitempty"`
  Score *float64 `thrift:"score,3" db:"score" json:"score,omitempty"`
  Tokens *TokenRefSequence `thrift:"tokens,4" db:"tokens" json:"tokens,omitempty"`
  Entity *Entity `thrift:"entity,5" db:"entity" json:"entity,omitempty"`
}

func NewSearchResultItem() *SearchResultItem {
  return &SearchResultItem{}
}

var SearchResultItem_CommunicationId_DEFAULT string
func (p *SearchResultItem) GetCommunicationId() string {
  if !p.IsSetCommunicationId() {
    return SearchResultItem_CommunicationId_DEFAULT
  }
return *p.CommunicationId
}
var SearchResultItem_SentenceId_DEFAULT *UUID
func (p *SearchResultItem) GetSentenceId() *UUID {
  if !p.IsSetSentenceId() {
    return SearchResultItem_SentenceId_DEFAULT
  }
return p.SentenceId
}
var SearchResultItem_Score_DEFAULT float64
func (p *SearchResultItem) GetScore() float64 {
  if !p.IsSetScore() {
    return SearchResultItem_Score_DEFAULT
  }
return *p.Score
}
var SearchResultItem_Tokens_DEFAULT *TokenRefSequence
func (p *SearchResultItem) GetTokens() *TokenRefSequence {
  if !p.IsSetTokens() {
    return SearchResultItem_Tokens_DEFAULT
  }
return p.Tokens
}
var SearchResultItem_Entity_DEFAULT *Entity
func (p *SearchResultItem) GetEntity() *Entity {
  if !p.IsSetEntity() {
    return SearchResultItem_Entity_DEFAULT
  }
return p.Entity
}
func (p *SearchResultItem) IsSetCommunicationId() bool {
  return p.CommunicationId != nil
}

func (p *SearchResultItem) IsSetSentenceId() bool {
  return p.SentenceId != nil
}

func (p *SearchResultItem) IsSetScore() bool {
  return p.Score != nil
}

func (p *SearchResultItem) IsSetTokens() bool {
  return p.Tokens != nil
}

func (p *SearchResultItem) IsSetEntity() bool {
  return p.Entity != nil
}

func (p *SearchResultItem) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SearchResultItem)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.CommunicationId = &v
}
  return nil
}

func (p *SearchResultItem)  ReadField2(iprot thrift.TProtocol) error {
  p.SentenceId = &UUID{}
  if err := p.SentenceId.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SentenceId), err)
  }
  return nil
}

func (p *SearchResultItem)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Score = &v
}
  return nil
}

func (p *SearchResultItem)  ReadField4(iprot thrift.TProtocol) error {
  p.Tokens = &TokenRefSequence{
  AnchorTokenIndex: -1,
}
  if err := p.Tokens.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Tokens), err)
  }
  return nil
}

func (p *SearchResultItem)  ReadField5(iprot thrift.TProtocol) error {
  p.Entity = &Entity{}
  if err := p.Entity.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Entity), err)
  }
  return nil
}

func (p *SearchResultItem) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SearchResultItem"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SearchResultItem) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetCommunicationId() {
    if err := oprot.WriteFieldBegin("communicationId", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:communicationId: ", p), err) }
    if err := oprot.WriteString(string(*p.CommunicationId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.communicationId (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:communicationId: ", p), err) }
  }
  return err
}

func (p *SearchResultItem) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetSentenceId() {
    if err := oprot.WriteFieldBegin("sentenceId", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:sentenceId: ", p), err) }
    if err := p.SentenceId.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SentenceId), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:sentenceId: ", p), err) }
  }
  return err
}

func (p *SearchResultItem) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetScore() {
    if err := oprot.WriteFieldBegin("score", thrift.DOUBLE, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:score: ", p), err) }
    if err := oprot.WriteDouble(float64(*p.Score)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.score (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:score: ", p), err) }
  }
  return err
}

func (p *SearchResultItem) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetTokens() {
    if err := oprot.WriteFieldBegin("tokens", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:tokens: ", p), err) }
    if err := p.Tokens.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Tokens), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:tokens: ", p), err) }
  }
  return err
}

func (p *SearchResultItem) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetEntity() {
    if err := oprot.WriteFieldBegin("entity", thrift.STRUCT, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:entity: ", p), err) }
    if err := p.Entity.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Entity), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:entity: ", p), err) }
  }
  return err
}

func (p *SearchResultItem) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SearchResultItem(%+v)", *p)
}

// Single wrapper for results from all the various Search* services.
// 
// Attributes:
//  - UUID: Unique identifier for the results of this search.
//  - SearchQuery: The query that led to this result.
// Useful for capturing feedback or building training data.
//  - SearchResultItems: The list is assumed sorted best to worst, which should be
// reflected by the values contained in the score field of each
// SearchResult, if that field is populated.
//  - Metadata: The system that provided the response: likely use case for
// populating this field is for building training data.  Presumably
// a system will not need/want to return this object in live use.
//  - Lang: The dominant language of the search results.
// Use ISO 639-2/T three letter codes.
// Search providers should set this when possible to support downstream processing.
// Do not set if it is not known.
// If multilingual, use the string "multilingual".
type SearchResult_ struct {
  UUID *UUID `thrift:"uuid,1,required" db:"uuid" json:"uuid"`
  SearchQuery *SearchQuery `thrift:"searchQuery,2,required" db:"searchQuery" json:"searchQuery"`
  SearchResultItems []*SearchResultItem `thrift:"searchResultItems,3" db:"searchResultItems" json:"searchResultItems,omitempty"`
  Metadata *AnnotationMetadata `thrift:"metadata,4" db:"metadata" json:"metadata,omitempty"`
  Lang *string `thrift:"lang,5" db:"lang" json:"lang,omitempty"`
}

func NewSearchResult_() *SearchResult_ {
  return &SearchResult_{}
}

var SearchResult__UUID_DEFAULT *UUID
func (p *SearchResult_) GetUUID() *UUID {
  if !p.IsSetUUID() {
    return SearchResult__UUID_DEFAULT
  }
return p.UUID
}
var SearchResult__SearchQuery_DEFAULT *SearchQuery
func (p *SearchResult_) GetSearchQuery() *SearchQuery {
  if !p.IsSetSearchQuery() {
    return SearchResult__SearchQuery_DEFAULT
  }
return p.SearchQuery
}
var SearchResult__SearchResultItems_DEFAULT []*SearchResultItem

func (p *SearchResult_) GetSearchResultItems() []*SearchResultItem {
  return p.SearchResultItems
}
var SearchResult__Metadata_DEFAULT *AnnotationMetadata
func (p *SearchResult_) GetMetadata() *AnnotationMetadata {
  if !p.IsSetMetadata() {
    return SearchResult__Metadata_DEFAULT
  }
return p.Metadata
}
var SearchResult__Lang_DEFAULT string
func (p *SearchResult_) GetLang() string {
  if !p.IsSetLang() {
    return SearchResult__Lang_DEFAULT
  }
return *p.Lang
}
func (p *SearchResult_) IsSetUUID() bool {
  return p.UUID != nil
}

func (p *SearchResult_) IsSetSearchQuery() bool {
  return p.SearchQuery != nil
}

func (p *SearchResult_) IsSetSearchResultItems() bool {
  return p.SearchResultItems != nil
}

func (p *SearchResult_) IsSetMetadata() bool {
  return p.Metadata != nil
}

func (p *SearchResult_) IsSetLang() bool {
  return p.Lang != nil
}

func (p *SearchResult_) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetUUID bool = false;
  var issetSearchQuery bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetUUID = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
      issetSearchQuery = true
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetUUID{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field UUID is not set"));
  }
  if !issetSearchQuery{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field SearchQuery is not set"));
  }
  return nil
}

func (p *SearchResult_)  ReadField1(iprot thrift.TProtocol) error {
  p.UUID = &UUID{}
  if err := p.UUID.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UUID), err)
  }
  return nil
}

func (p *SearchResult_)  ReadField2(iprot thrift.TProtocol) error {
  p.SearchQuery = &SearchQuery{}
  if err := p.SearchQuery.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SearchQuery), err)
  }
  return nil
}

func (p *SearchResult_)  ReadField3(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*SearchResultItem, 0, size)
  p.SearchResultItems =  tSlice
  for i := 0; i < size; i ++ {
    _elem3 := &SearchResultItem{}
    if err := _elem3.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem3), err)
    }
    p.SearchResultItems = append(p.SearchResultItems, _elem3)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *SearchResult_)  ReadField4(iprot thrift.TProtocol) error {
  p.Metadata = &AnnotationMetadata{
  KBest: 1,
}
  if err := p.Metadata.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Metadata), err)
  }
  return nil
}

func (p *SearchResult_)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Lang = &v
}
  return nil
}

func (p *SearchResult_) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SearchResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SearchResult_) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("uuid", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:uuid: ", p), err) }
  if err := p.UUID.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UUID), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:uuid: ", p), err) }
  return err
}

func (p *SearchResult_) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("searchQuery", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:searchQuery: ", p), err) }
  if err := p.SearchQuery.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SearchQuery), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:searchQuery: ", p), err) }
  return err
}

func (p *SearchResult_) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetSearchResultItems() {
    if err := oprot.WriteFieldBegin("searchResultItems", thrift.LIST, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:searchResultItems: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.SearchResultItems)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.SearchResultItems {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:searchResultItems: ", p), err) }
  }
  return err
}

func (p *SearchResult_) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetMetadata() {
    if err := oprot.WriteFieldBegin("metadata", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:metadata: ", p), err) }
    if err := p.Metadata.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Metadata), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:metadata: ", p), err) }
  }
  return err
}

func (p *SearchResult_) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetLang() {
    if err := oprot.WriteFieldBegin("lang", thrift.STRING, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:lang: ", p), err) }
    if err := oprot.WriteString(string(*p.Lang)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.lang (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:lang: ", p), err) }
  }
  return err
}

func (p *SearchResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SearchResult_(%+v)", *p)
}

type SearchService interface {
Service

  // Perform a search specified by the query
  // 
  // Parameters:
  //  - Query
  Search(query *SearchQuery) (r *SearchResult_, err error)
  // Get a list of search type-language pairs
  GetCapabilities() (r []*SearchCapability, err error)
  // Get a corpus list from the search provider
  GetCorpora() (r []string, err error)
}

type SearchServiceClient struct {
  *ServiceClient
}

func NewSearchServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *SearchServiceClient {
  return &SearchServiceClient{ServiceClient: NewServiceClientFactory(t, f)}}

func NewSearchServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *SearchServiceClient {
  return &SearchServiceClient{ServiceClient: NewServiceClientProtocol(t, iprot, oprot)}
}

// Perform a search specified by the query
// 
// Parameters:
//  - Query
func (p *SearchServiceClient) Search(query *SearchQuery) (r *SearchResult_, err error) {
  if err = p.sendSearch(query); err != nil { return }
  return p.recvSearch()
}

func (p *SearchServiceClient) sendSearch(query *SearchQuery)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("search", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := SearchServiceSearchArgs{
  Query : query,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *SearchServiceClient) recvSearch() (value *SearchResult_, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "search" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "search failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "search failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error4 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error5 error
    error5, err = error4.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error5
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "search failed: invalid message type")
    return
  }
  result := SearchServiceSearchResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ex != nil {
    err = result.Ex
    return 
  }
  value = result.GetSuccess()
  return
}

// Get a list of search type-language pairs
func (p *SearchServiceClient) GetCapabilities() (r []*SearchCapability, err error) {
  if err = p.sendGetCapabilities(); err != nil { return }
  return p.recvGetCapabilities()
}

func (p *SearchServiceClient) sendGetCapabilities()(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("getCapabilities", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := SearchServiceGetCapabilitiesArgs{
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *SearchServiceClient) recvGetCapabilities() (value []*SearchCapability, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "getCapabilities" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getCapabilities failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getCapabilities failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error6 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error7 error
    error7, err = error6.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error7
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getCapabilities failed: invalid message type")
    return
  }
  result := SearchServiceGetCapabilitiesResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ex != nil {
    err = result.Ex
    return 
  }
  value = result.GetSuccess()
  return
}

// Get a corpus list from the search provider
func (p *SearchServiceClient) GetCorpora() (r []string, err error) {
  if err = p.sendGetCorpora(); err != nil { return }
  return p.recvGetCorpora()
}

func (p *SearchServiceClient) sendGetCorpora()(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("getCorpora", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := SearchServiceGetCorporaArgs{
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *SearchServiceClient) recvGetCorpora() (value []string, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "getCorpora" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getCorpora failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getCorpora failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error8 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error9 error
    error9, err = error8.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error9
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getCorpora failed: invalid message type")
    return
  }
  result := SearchServiceGetCorporaResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ex != nil {
    err = result.Ex
    return 
  }
  value = result.GetSuccess()
  return
}


type SearchServiceProcessor struct {
  *ServiceProcessor
}

func NewSearchServiceProcessor(handler SearchService) *SearchServiceProcessor {
  self10 := &SearchServiceProcessor{NewServiceProcessor(handler)}
  self10.AddToProcessorMap("search", &searchServiceProcessorSearch{handler:handler})
  self10.AddToProcessorMap("getCapabilities", &searchServiceProcessorGetCapabilities{handler:handler})
  self10.AddToProcessorMap("getCorpora", &searchServiceProcessorGetCorpora{handler:handler})
  return self10
}

type searchServiceProcessorSearch struct {
  handler SearchService
}

func (p *searchServiceProcessorSearch) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := SearchServiceSearchArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("search", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := SearchServiceSearchResult{}
var retval *SearchResult_
  var err2 error
  if retval, err2 = p.handler.Search(args.Query); err2 != nil {
  switch v := err2.(type) {
    case *ServicesException:
  result.Ex = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing search: " + err2.Error())
    oprot.WriteMessageBegin("search", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("search", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type searchServiceProcessorGetCapabilities struct {
  handler SearchService
}

func (p *searchServiceProcessorGetCapabilities) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := SearchServiceGetCapabilitiesArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getCapabilities", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := SearchServiceGetCapabilitiesResult{}
var retval []*SearchCapability
  var err2 error
  if retval, err2 = p.handler.GetCapabilities(); err2 != nil {
  switch v := err2.(type) {
    case *ServicesException:
  result.Ex = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getCapabilities: " + err2.Error())
    oprot.WriteMessageBegin("getCapabilities", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getCapabilities", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type searchServiceProcessorGetCorpora struct {
  handler SearchService
}

func (p *searchServiceProcessorGetCorpora) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := SearchServiceGetCorporaArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getCorpora", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := SearchServiceGetCorporaResult{}
var retval []string
  var err2 error
  if retval, err2 = p.handler.GetCorpora(); err2 != nil {
  switch v := err2.(type) {
    case *ServicesException:
  result.Ex = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getCorpora: " + err2.Error())
    oprot.WriteMessageBegin("getCorpora", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getCorpora", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Query
type SearchServiceSearchArgs struct {
  Query *SearchQuery `thrift:"query,1" db:"query" json:"query"`
}

func NewSearchServiceSearchArgs() *SearchServiceSearchArgs {
  return &SearchServiceSearchArgs{}
}

var SearchServiceSearchArgs_Query_DEFAULT *SearchQuery
func (p *SearchServiceSearchArgs) GetQuery() *SearchQuery {
  if !p.IsSetQuery() {
    return SearchServiceSearchArgs_Query_DEFAULT
  }
return p.Query
}
func (p *SearchServiceSearchArgs) IsSetQuery() bool {
  return p.Query != nil
}

func (p *SearchServiceSearchArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SearchServiceSearchArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Query = &SearchQuery{}
  if err := p.Query.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Query), err)
  }
  return nil
}

func (p *SearchServiceSearchArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("search_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SearchServiceSearchArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("query", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:query: ", p), err) }
  if err := p.Query.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Query), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:query: ", p), err) }
  return err
}

func (p *SearchServiceSearchArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SearchServiceSearchArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex
type SearchServiceSearchResult struct {
  Success *SearchResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ex *ServicesException `thrift:"ex,1" db:"ex" json:"ex,omitempty"`
}

func NewSearchServiceSearchResult() *SearchServiceSearchResult {
  return &SearchServiceSearchResult{}
}

var SearchServiceSearchResult_Success_DEFAULT *SearchResult_
func (p *SearchServiceSearchResult) GetSuccess() *SearchResult_ {
  if !p.IsSetSuccess() {
    return SearchServiceSearchResult_Success_DEFAULT
  }
return p.Success
}
var SearchServiceSearchResult_Ex_DEFAULT *ServicesException
func (p *SearchServiceSearchResult) GetEx() *ServicesException {
  if !p.IsSetEx() {
    return SearchServiceSearchResult_Ex_DEFAULT
  }
return p.Ex
}
func (p *SearchServiceSearchResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *SearchServiceSearchResult) IsSetEx() bool {
  return p.Ex != nil
}

func (p *SearchServiceSearchResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SearchServiceSearchResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &SearchResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *SearchServiceSearchResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ex = &ServicesException{}
  if err := p.Ex.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
  }
  return nil
}

func (p *SearchServiceSearchResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("search_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SearchServiceSearchResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *SearchServiceSearchResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetEx() {
    if err := oprot.WriteFieldBegin("ex", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err) }
    if err := p.Ex.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err) }
  }
  return err
}

func (p *SearchServiceSearchResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SearchServiceSearchResult(%+v)", *p)
}

type SearchServiceGetCapabilitiesArgs struct {
}

func NewSearchServiceGetCapabilitiesArgs() *SearchServiceGetCapabilitiesArgs {
  return &SearchServiceGetCapabilitiesArgs{}
}

func (p *SearchServiceGetCapabilitiesArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SearchServiceGetCapabilitiesArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getCapabilities_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SearchServiceGetCapabilitiesArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SearchServiceGetCapabilitiesArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex
type SearchServiceGetCapabilitiesResult struct {
  Success []*SearchCapability `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ex *ServicesException `thrift:"ex,1" db:"ex" json:"ex,omitempty"`
}

func NewSearchServiceGetCapabilitiesResult() *SearchServiceGetCapabilitiesResult {
  return &SearchServiceGetCapabilitiesResult{}
}

var SearchServiceGetCapabilitiesResult_Success_DEFAULT []*SearchCapability

func (p *SearchServiceGetCapabilitiesResult) GetSuccess() []*SearchCapability {
  return p.Success
}
var SearchServiceGetCapabilitiesResult_Ex_DEFAULT *ServicesException
func (p *SearchServiceGetCapabilitiesResult) GetEx() *ServicesException {
  if !p.IsSetEx() {
    return SearchServiceGetCapabilitiesResult_Ex_DEFAULT
  }
return p.Ex
}
func (p *SearchServiceGetCapabilitiesResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *SearchServiceGetCapabilitiesResult) IsSetEx() bool {
  return p.Ex != nil
}

func (p *SearchServiceGetCapabilitiesResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SearchServiceGetCapabilitiesResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*SearchCapability, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem11 := &SearchCapability{}
    if err := _elem11.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem11), err)
    }
    p.Success = append(p.Success, _elem11)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *SearchServiceGetCapabilitiesResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ex = &ServicesException{}
  if err := p.Ex.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
  }
  return nil
}

func (p *SearchServiceGetCapabilitiesResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getCapabilities_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SearchServiceGetCapabilitiesResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *SearchServiceGetCapabilitiesResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetEx() {
    if err := oprot.WriteFieldBegin("ex", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err) }
    if err := p.Ex.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err) }
  }
  return err
}

func (p *SearchServiceGetCapabilitiesResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SearchServiceGetCapabilitiesResult(%+v)", *p)
}

type SearchServiceGetCorporaArgs struct {
}

func NewSearchServiceGetCorporaArgs() *SearchServiceGetCorporaArgs {
  return &SearchServiceGetCorporaArgs{}
}

func (p *SearchServiceGetCorporaArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SearchServiceGetCorporaArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getCorpora_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SearchServiceGetCorporaArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SearchServiceGetCorporaArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex
type SearchServiceGetCorporaResult struct {
  Success []string `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ex *ServicesException `thrift:"ex,1" db:"ex" json:"ex,omitempty"`
}

func NewSearchServiceGetCorporaResult() *SearchServiceGetCorporaResult {
  return &SearchServiceGetCorporaResult{}
}

var SearchServiceGetCorporaResult_Success_DEFAULT []string

func (p *SearchServiceGetCorporaResult) GetSuccess() []string {
  return p.Success
}
var SearchServiceGetCorporaResult_Ex_DEFAULT *ServicesException
func (p *SearchServiceGetCorporaResult) GetEx() *ServicesException {
  if !p.IsSetEx() {
    return SearchServiceGetCorporaResult_Ex_DEFAULT
  }
return p.Ex
}
func (p *SearchServiceGetCorporaResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *SearchServiceGetCorporaResult) IsSetEx() bool {
  return p.Ex != nil
}

func (p *SearchServiceGetCorporaResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SearchServiceGetCorporaResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
var _elem12 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem12 = v
}
    p.Success = append(p.Success, _elem12)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *SearchServiceGetCorporaResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ex = &ServicesException{}
  if err := p.Ex.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
  }
  return nil
}

func (p *SearchServiceGetCorporaResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getCorpora_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SearchServiceGetCorporaResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRING, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *SearchServiceGetCorporaResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetEx() {
    if err := oprot.WriteFieldBegin("ex", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err) }
    if err := p.Ex.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err) }
  }
  return err
}

func (p *SearchServiceGetCorporaResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SearchServiceGetCorporaResult(%+v)", *p)
}


type SearchProxyService interface {
Service
  //The search proxy service provides a single interface to multiple search providers

  // Specify the search provider when performing a search
  // 
  // Parameters:
  //  - Query
  //  - Provider
  Search(query *SearchQuery, provider string) (r *SearchResult_, err error)
  // Get a list of search providers behind the proxy
  GetProviders() (r []string, err error)
  // Get a list of search type and language pairs for a search provider
  // 
  // Parameters:
  //  - Provider
  GetCapabilities(provider string) (r []*SearchCapability, err error)
  // Get a corpus list for a search provider
  // 
  // Parameters:
  //  - Provider
  GetCorpora(provider string) (r []string, err error)
}

//The search proxy service provides a single interface to multiple search providers
type SearchProxyServiceClient struct {
  *ServiceClient
}

func NewSearchProxyServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *SearchProxyServiceClient {
  return &SearchProxyServiceClient{ServiceClient: NewServiceClientFactory(t, f)}}

func NewSearchProxyServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *SearchProxyServiceClient {
  return &SearchProxyServiceClient{ServiceClient: NewServiceClientProtocol(t, iprot, oprot)}
}

// Specify the search provider when performing a search
// 
// Parameters:
//  - Query
//  - Provider
func (p *SearchProxyServiceClient) Search(query *SearchQuery, provider string) (r *SearchResult_, err error) {
  if err = p.sendSearch(query, provider); err != nil { return }
  return p.recvSearch()
}

func (p *SearchProxyServiceClient) sendSearch(query *SearchQuery, provider string)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("search", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := SearchProxyServiceSearchArgs{
  Query : query,
  Provider : provider,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *SearchProxyServiceClient) recvSearch() (value *SearchResult_, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "search" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "search failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "search failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error19 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error20 error
    error20, err = error19.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error20
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "search failed: invalid message type")
    return
  }
  result := SearchProxyServiceSearchResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ex != nil {
    err = result.Ex
    return 
  }
  value = result.GetSuccess()
  return
}

// Get a list of search providers behind the proxy
func (p *SearchProxyServiceClient) GetProviders() (r []string, err error) {
  if err = p.sendGetProviders(); err != nil { return }
  return p.recvGetProviders()
}

func (p *SearchProxyServiceClient) sendGetProviders()(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("getProviders", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := SearchProxyServiceGetProvidersArgs{
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *SearchProxyServiceClient) recvGetProviders() (value []string, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "getProviders" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getProviders failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getProviders failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error21 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error22 error
    error22, err = error21.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error22
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getProviders failed: invalid message type")
    return
  }
  result := SearchProxyServiceGetProvidersResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ex != nil {
    err = result.Ex
    return 
  }
  value = result.GetSuccess()
  return
}

// Get a list of search type and language pairs for a search provider
// 
// Parameters:
//  - Provider
func (p *SearchProxyServiceClient) GetCapabilities(provider string) (r []*SearchCapability, err error) {
  if err = p.sendGetCapabilities(provider); err != nil { return }
  return p.recvGetCapabilities()
}

func (p *SearchProxyServiceClient) sendGetCapabilities(provider string)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("getCapabilities", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := SearchProxyServiceGetCapabilitiesArgs{
  Provider : provider,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *SearchProxyServiceClient) recvGetCapabilities() (value []*SearchCapability, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "getCapabilities" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getCapabilities failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getCapabilities failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error23 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error24 error
    error24, err = error23.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error24
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getCapabilities failed: invalid message type")
    return
  }
  result := SearchProxyServiceGetCapabilitiesResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ex != nil {
    err = result.Ex
    return 
  }
  value = result.GetSuccess()
  return
}

// Get a corpus list for a search provider
// 
// Parameters:
//  - Provider
func (p *SearchProxyServiceClient) GetCorpora(provider string) (r []string, err error) {
  if err = p.sendGetCorpora(provider); err != nil { return }
  return p.recvGetCorpora()
}

func (p *SearchProxyServiceClient) sendGetCorpora(provider string)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("getCorpora", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := SearchProxyServiceGetCorporaArgs{
  Provider : provider,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *SearchProxyServiceClient) recvGetCorpora() (value []string, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "getCorpora" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getCorpora failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getCorpora failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error25 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error26 error
    error26, err = error25.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error26
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getCorpora failed: invalid message type")
    return
  }
  result := SearchProxyServiceGetCorporaResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ex != nil {
    err = result.Ex
    return 
  }
  value = result.GetSuccess()
  return
}


type SearchProxyServiceProcessor struct {
  *ServiceProcessor
}

func NewSearchProxyServiceProcessor(handler SearchProxyService) *SearchProxyServiceProcessor {
  self27 := &SearchProxyServiceProcessor{NewServiceProcessor(handler)}
  self27.AddToProcessorMap("search", &searchProxyServiceProcessorSearch{handler:handler})
  self27.AddToProcessorMap("getProviders", &searchProxyServiceProcessorGetProviders{handler:handler})
  self27.AddToProcessorMap("getCapabilities", &searchProxyServiceProcessorGetCapabilities{handler:handler})
  self27.AddToProcessorMap("getCorpora", &searchProxyServiceProcessorGetCorpora{handler:handler})
  return self27
}

type searchProxyServiceProcessorSearch struct {
  handler SearchProxyService
}

func (p *searchProxyServiceProcessorSearch) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := SearchProxyServiceSearchArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("search", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := SearchProxyServiceSearchResult{}
var retval *SearchResult_
  var err2 error
  if retval, err2 = p.handler.Search(args.Query, args.Provider); err2 != nil {
  switch v := err2.(type) {
    case *ServicesException:
  result.Ex = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing search: " + err2.Error())
    oprot.WriteMessageBegin("search", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("search", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type searchProxyServiceProcessorGetProviders struct {
  handler SearchProxyService
}

func (p *searchProxyServiceProcessorGetProviders) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := SearchProxyServiceGetProvidersArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getProviders", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := SearchProxyServiceGetProvidersResult{}
var retval []string
  var err2 error
  if retval, err2 = p.handler.GetProviders(); err2 != nil {
  switch v := err2.(type) {
    case *ServicesException:
  result.Ex = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getProviders: " + err2.Error())
    oprot.WriteMessageBegin("getProviders", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getProviders", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type searchProxyServiceProcessorGetCapabilities struct {
  handler SearchProxyService
}

func (p *searchProxyServiceProcessorGetCapabilities) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := SearchProxyServiceGetCapabilitiesArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getCapabilities", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := SearchProxyServiceGetCapabilitiesResult{}
var retval []*SearchCapability
  var err2 error
  if retval, err2 = p.handler.GetCapabilities(args.Provider); err2 != nil {
  switch v := err2.(type) {
    case *ServicesException:
  result.Ex = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getCapabilities: " + err2.Error())
    oprot.WriteMessageBegin("getCapabilities", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getCapabilities", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type searchProxyServiceProcessorGetCorpora struct {
  handler SearchProxyService
}

func (p *searchProxyServiceProcessorGetCorpora) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := SearchProxyServiceGetCorporaArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getCorpora", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := SearchProxyServiceGetCorporaResult{}
var retval []string
  var err2 error
  if retval, err2 = p.handler.GetCorpora(args.Provider); err2 != nil {
  switch v := err2.(type) {
    case *ServicesException:
  result.Ex = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getCorpora: " + err2.Error())
    oprot.WriteMessageBegin("getCorpora", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getCorpora", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Query
//  - Provider
type SearchProxyServiceSearchArgs struct {
  Query *SearchQuery `thrift:"query,1" db:"query" json:"query"`
  Provider string `thrift:"provider,2" db:"provider" json:"provider"`
}

func NewSearchProxyServiceSearchArgs() *SearchProxyServiceSearchArgs {
  return &SearchProxyServiceSearchArgs{}
}

var SearchProxyServiceSearchArgs_Query_DEFAULT *SearchQuery
func (p *SearchProxyServiceSearchArgs) GetQuery() *SearchQuery {
  if !p.IsSetQuery() {
    return SearchProxyServiceSearchArgs_Query_DEFAULT
  }
return p.Query
}

func (p *SearchProxyServiceSearchArgs) GetProvider() string {
  return p.Provider
}
func (p *SearchProxyServiceSearchArgs) IsSetQuery() bool {
  return p.Query != nil
}

func (p *SearchProxyServiceSearchArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SearchProxyServiceSearchArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Query = &SearchQuery{}
  if err := p.Query.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Query), err)
  }
  return nil
}

func (p *SearchProxyServiceSearchArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Provider = v
}
  return nil
}

func (p *SearchProxyServiceSearchArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("search_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SearchProxyServiceSearchArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("query", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:query: ", p), err) }
  if err := p.Query.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Query), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:query: ", p), err) }
  return err
}

func (p *SearchProxyServiceSearchArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("provider", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:provider: ", p), err) }
  if err := oprot.WriteString(string(p.Provider)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.provider (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:provider: ", p), err) }
  return err
}

func (p *SearchProxyServiceSearchArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SearchProxyServiceSearchArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex
type SearchProxyServiceSearchResult struct {
  Success *SearchResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ex *ServicesException `thrift:"ex,1" db:"ex" json:"ex,omitempty"`
}

func NewSearchProxyServiceSearchResult() *SearchProxyServiceSearchResult {
  return &SearchProxyServiceSearchResult{}
}

var SearchProxyServiceSearchResult_Success_DEFAULT *SearchResult_
func (p *SearchProxyServiceSearchResult) GetSuccess() *SearchResult_ {
  if !p.IsSetSuccess() {
    return SearchProxyServiceSearchResult_Success_DEFAULT
  }
return p.Success
}
var SearchProxyServiceSearchResult_Ex_DEFAULT *ServicesException
func (p *SearchProxyServiceSearchResult) GetEx() *ServicesException {
  if !p.IsSetEx() {
    return SearchProxyServiceSearchResult_Ex_DEFAULT
  }
return p.Ex
}
func (p *SearchProxyServiceSearchResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *SearchProxyServiceSearchResult) IsSetEx() bool {
  return p.Ex != nil
}

func (p *SearchProxyServiceSearchResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SearchProxyServiceSearchResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &SearchResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *SearchProxyServiceSearchResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ex = &ServicesException{}
  if err := p.Ex.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
  }
  return nil
}

func (p *SearchProxyServiceSearchResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("search_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SearchProxyServiceSearchResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *SearchProxyServiceSearchResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetEx() {
    if err := oprot.WriteFieldBegin("ex", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err) }
    if err := p.Ex.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err) }
  }
  return err
}

func (p *SearchProxyServiceSearchResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SearchProxyServiceSearchResult(%+v)", *p)
}

type SearchProxyServiceGetProvidersArgs struct {
}

func NewSearchProxyServiceGetProvidersArgs() *SearchProxyServiceGetProvidersArgs {
  return &SearchProxyServiceGetProvidersArgs{}
}

func (p *SearchProxyServiceGetProvidersArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SearchProxyServiceGetProvidersArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getProviders_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SearchProxyServiceGetProvidersArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SearchProxyServiceGetProvidersArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex
type SearchProxyServiceGetProvidersResult struct {
  Success []string `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ex *ServicesException `thrift:"ex,1" db:"ex" json:"ex,omitempty"`
}

func NewSearchProxyServiceGetProvidersResult() *SearchProxyServiceGetProvidersResult {
  return &SearchProxyServiceGetProvidersResult{}
}

var SearchProxyServiceGetProvidersResult_Success_DEFAULT []string

func (p *SearchProxyServiceGetProvidersResult) GetSuccess() []string {
  return p.Success
}
var SearchProxyServiceGetProvidersResult_Ex_DEFAULT *ServicesException
func (p *SearchProxyServiceGetProvidersResult) GetEx() *ServicesException {
  if !p.IsSetEx() {
    return SearchProxyServiceGetProvidersResult_Ex_DEFAULT
  }
return p.Ex
}
func (p *SearchProxyServiceGetProvidersResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *SearchProxyServiceGetProvidersResult) IsSetEx() bool {
  return p.Ex != nil
}

func (p *SearchProxyServiceGetProvidersResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SearchProxyServiceGetProvidersResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
var _elem28 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem28 = v
}
    p.Success = append(p.Success, _elem28)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *SearchProxyServiceGetProvidersResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ex = &ServicesException{}
  if err := p.Ex.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
  }
  return nil
}

func (p *SearchProxyServiceGetProvidersResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getProviders_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SearchProxyServiceGetProvidersResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRING, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *SearchProxyServiceGetProvidersResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetEx() {
    if err := oprot.WriteFieldBegin("ex", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err) }
    if err := p.Ex.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err) }
  }
  return err
}

func (p *SearchProxyServiceGetProvidersResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SearchProxyServiceGetProvidersResult(%+v)", *p)
}

// Attributes:
//  - Provider
type SearchProxyServiceGetCapabilitiesArgs struct {
  Provider string `thrift:"provider,1" db:"provider" json:"provider"`
}

func NewSearchProxyServiceGetCapabilitiesArgs() *SearchProxyServiceGetCapabilitiesArgs {
  return &SearchProxyServiceGetCapabilitiesArgs{}
}


func (p *SearchProxyServiceGetCapabilitiesArgs) GetProvider() string {
  return p.Provider
}
func (p *SearchProxyServiceGetCapabilitiesArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SearchProxyServiceGetCapabilitiesArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Provider = v
}
  return nil
}

func (p *SearchProxyServiceGetCapabilitiesArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getCapabilities_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SearchProxyServiceGetCapabilitiesArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("provider", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:provider: ", p), err) }
  if err := oprot.WriteString(string(p.Provider)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.provider (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:provider: ", p), err) }
  return err
}

func (p *SearchProxyServiceGetCapabilitiesArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SearchProxyServiceGetCapabilitiesArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex
type SearchProxyServiceGetCapabilitiesResult struct {
  Success []*SearchCapability `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ex *ServicesException `thrift:"ex,1" db:"ex" json:"ex,omitempty"`
}

func NewSearchProxyServiceGetCapabilitiesResult() *SearchProxyServiceGetCapabilitiesResult {
  return &SearchProxyServiceGetCapabilitiesResult{}
}

var SearchProxyServiceGetCapabilitiesResult_Success_DEFAULT []*SearchCapability

func (p *SearchProxyServiceGetCapabilitiesResult) GetSuccess() []*SearchCapability {
  return p.Success
}
var SearchProxyServiceGetCapabilitiesResult_Ex_DEFAULT *ServicesException
func (p *SearchProxyServiceGetCapabilitiesResult) GetEx() *ServicesException {
  if !p.IsSetEx() {
    return SearchProxyServiceGetCapabilitiesResult_Ex_DEFAULT
  }
return p.Ex
}
func (p *SearchProxyServiceGetCapabilitiesResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *SearchProxyServiceGetCapabilitiesResult) IsSetEx() bool {
  return p.Ex != nil
}

func (p *SearchProxyServiceGetCapabilitiesResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SearchProxyServiceGetCapabilitiesResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*SearchCapability, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem29 := &SearchCapability{}
    if err := _elem29.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem29), err)
    }
    p.Success = append(p.Success, _elem29)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *SearchProxyServiceGetCapabilitiesResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ex = &ServicesException{}
  if err := p.Ex.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
  }
  return nil
}

func (p *SearchProxyServiceGetCapabilitiesResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getCapabilities_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SearchProxyServiceGetCapabilitiesResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *SearchProxyServiceGetCapabilitiesResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetEx() {
    if err := oprot.WriteFieldBegin("ex", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err) }
    if err := p.Ex.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err) }
  }
  return err
}

func (p *SearchProxyServiceGetCapabilitiesResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SearchProxyServiceGetCapabilitiesResult(%+v)", *p)
}

// Attributes:
//  - Provider
type SearchProxyServiceGetCorporaArgs struct {
  Provider string `thrift:"provider,1" db:"provider" json:"provider"`
}

func NewSearchProxyServiceGetCorporaArgs() *SearchProxyServiceGetCorporaArgs {
  return &SearchProxyServiceGetCorporaArgs{}
}


func (p *SearchProxyServiceGetCorporaArgs) GetProvider() string {
  return p.Provider
}
func (p *SearchProxyServiceGetCorporaArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SearchProxyServiceGetCorporaArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Provider = v
}
  return nil
}

func (p *SearchProxyServiceGetCorporaArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getCorpora_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SearchProxyServiceGetCorporaArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("provider", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:provider: ", p), err) }
  if err := oprot.WriteString(string(p.Provider)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.provider (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:provider: ", p), err) }
  return err
}

func (p *SearchProxyServiceGetCorporaArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SearchProxyServiceGetCorporaArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex
type SearchProxyServiceGetCorporaResult struct {
  Success []string `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ex *ServicesException `thrift:"ex,1" db:"ex" json:"ex,omitempty"`
}

func NewSearchProxyServiceGetCorporaResult() *SearchProxyServiceGetCorporaResult {
  return &SearchProxyServiceGetCorporaResult{}
}

var SearchProxyServiceGetCorporaResult_Success_DEFAULT []string

func (p *SearchProxyServiceGetCorporaResult) GetSuccess() []string {
  return p.Success
}
var SearchProxyServiceGetCorporaResult_Ex_DEFAULT *ServicesException
func (p *SearchProxyServiceGetCorporaResult) GetEx() *ServicesException {
  if !p.IsSetEx() {
    return SearchProxyServiceGetCorporaResult_Ex_DEFAULT
  }
return p.Ex
}
func (p *SearchProxyServiceGetCorporaResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *SearchProxyServiceGetCorporaResult) IsSetEx() bool {
  return p.Ex != nil
}

func (p *SearchProxyServiceGetCorporaResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SearchProxyServiceGetCorporaResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
var _elem30 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem30 = v
}
    p.Success = append(p.Success, _elem30)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *SearchProxyServiceGetCorporaResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ex = &ServicesException{}
  if err := p.Ex.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
  }
  return nil
}

func (p *SearchProxyServiceGetCorporaResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getCorpora_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SearchProxyServiceGetCorporaResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRING, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *SearchProxyServiceGetCorporaResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetEx() {
    if err := oprot.WriteFieldBegin("ex", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err) }
    if err := p.Ex.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err) }
  }
  return err
}

func (p *SearchProxyServiceGetCorporaResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SearchProxyServiceGetCorporaResult(%+v)", *p)
}


type FeedbackService interface {
Service

  // Start providing feedback for the specified SearchResults.
  // This causes the search and its results to be persisted.
  // 
  // Parameters:
  //  - Results
  StartFeedback(results *SearchResult_) (err error)
  // Provide feedback on the relevance of a particular communication to a search
  // 
  // Parameters:
  //  - SearchResultsId
  //  - CommunicationId
  //  - Feedback
  AddCommunicationFeedback(searchResultsId *UUID, communicationId string, feedback SearchFeedback) (err error)
  // Provide feedback on the relevance of a particular sentence to a search
  // 
  // Parameters:
  //  - SearchResultsId
  //  - CommunicationId
  //  - SentenceId
  //  - Feedback
  AddSentenceFeedback(searchResultsId *UUID, communicationId string, sentenceId *UUID, feedback SearchFeedback) (err error)
}

type FeedbackServiceClient struct {
  *ServiceClient
}

func NewFeedbackServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *FeedbackServiceClient {
  return &FeedbackServiceClient{ServiceClient: NewServiceClientFactory(t, f)}}

func NewFeedbackServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *FeedbackServiceClient {
  return &FeedbackServiceClient{ServiceClient: NewServiceClientProtocol(t, iprot, oprot)}
}

// Start providing feedback for the specified SearchResults.
// This causes the search and its results to be persisted.
// 
// Parameters:
//  - Results
func (p *FeedbackServiceClient) StartFeedback(results *SearchResult_) (err error) {
  if err = p.sendStartFeedback(results); err != nil { return }
  return p.recvStartFeedback()
}

func (p *FeedbackServiceClient) sendStartFeedback(results *SearchResult_)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("startFeedback", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := FeedbackServiceStartFeedbackArgs{
  Results : results,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *FeedbackServiceClient) recvStartFeedback() (err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "startFeedback" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "startFeedback failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "startFeedback failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error40 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error41 error
    error41, err = error40.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error41
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "startFeedback failed: invalid message type")
    return
  }
  result := FeedbackServiceStartFeedbackResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ex != nil {
    err = result.Ex
    return 
  }
  return
}

// Provide feedback on the relevance of a particular communication to a search
// 
// Parameters:
//  - SearchResultsId
//  - CommunicationId
//  - Feedback
func (p *FeedbackServiceClient) AddCommunicationFeedback(searchResultsId *UUID, communicationId string, feedback SearchFeedback) (err error) {
  if err = p.sendAddCommunicationFeedback(searchResultsId, communicationId, feedback); err != nil { return }
  return p.recvAddCommunicationFeedback()
}

func (p *FeedbackServiceClient) sendAddCommunicationFeedback(searchResultsId *UUID, communicationId string, feedback SearchFeedback)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("addCommunicationFeedback", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := FeedbackServiceAddCommunicationFeedbackArgs{
  SearchResultsId : searchResultsId,
  CommunicationId : communicationId,
  Feedback : feedback,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *FeedbackServiceClient) recvAddCommunicationFeedback() (err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "addCommunicationFeedback" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "addCommunicationFeedback failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "addCommunicationFeedback failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error42 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error43 error
    error43, err = error42.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error43
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "addCommunicationFeedback failed: invalid message type")
    return
  }
  result := FeedbackServiceAddCommunicationFeedbackResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ex != nil {
    err = result.Ex
    return 
  }
  return
}

// Provide feedback on the relevance of a particular sentence to a search
// 
// Parameters:
//  - SearchResultsId
//  - CommunicationId
//  - SentenceId
//  - Feedback
func (p *FeedbackServiceClient) AddSentenceFeedback(searchResultsId *UUID, communicationId string, sentenceId *UUID, feedback SearchFeedback) (err error) {
  if err = p.sendAddSentenceFeedback(searchResultsId, communicationId, sentenceId, feedback); err != nil { return }
  return p.recvAddSentenceFeedback()
}

func (p *FeedbackServiceClient) sendAddSentenceFeedback(searchResultsId *UUID, communicationId string, sentenceId *UUID, feedback SearchFeedback)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("addSentenceFeedback", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := FeedbackServiceAddSentenceFeedbackArgs{
  SearchResultsId : searchResultsId,
  CommunicationId : communicationId,
  SentenceId : sentenceId,
  Feedback : feedback,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *FeedbackServiceClient) recvAddSentenceFeedback() (err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "addSentenceFeedback" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "addSentenceFeedback failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "addSentenceFeedback failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error44 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error45 error
    error45, err = error44.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error45
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "addSentenceFeedback failed: invalid message type")
    return
  }
  result := FeedbackServiceAddSentenceFeedbackResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ex != nil {
    err = result.Ex
    return 
  }
  return
}


type FeedbackServiceProcessor struct {
  *ServiceProcessor
}

func NewFeedbackServiceProcessor(handler FeedbackService) *FeedbackServiceProcessor {
  self46 := &FeedbackServiceProcessor{NewServiceProcessor(handler)}
  self46.AddToProcessorMap("startFeedback", &feedbackServiceProcessorStartFeedback{handler:handler})
  self46.AddToProcessorMap("addCommunicationFeedback", &feedbackServiceProcessorAddCommunicationFeedback{handler:handler})
  self46.AddToProcessorMap("addSentenceFeedback", &feedbackServiceProcessorAddSentenceFeedback{handler:handler})
  return self46
}

type feedbackServiceProcessorStartFeedback struct {
  handler FeedbackService
}

func (p *feedbackServiceProcessorStartFeedback) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := FeedbackServiceStartFeedbackArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("startFeedback", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := FeedbackServiceStartFeedbackResult{}
  var err2 error
  if err2 = p.handler.StartFeedback(args.Results); err2 != nil {
  switch v := err2.(type) {
    case *ServicesException:
  result.Ex = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing startFeedback: " + err2.Error())
    oprot.WriteMessageBegin("startFeedback", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("startFeedback", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type feedbackServiceProcessorAddCommunicationFeedback struct {
  handler FeedbackService
}

func (p *feedbackServiceProcessorAddCommunicationFeedback) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := FeedbackServiceAddCommunicationFeedbackArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("addCommunicationFeedback", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := FeedbackServiceAddCommunicationFeedbackResult{}
  var err2 error
  if err2 = p.handler.AddCommunicationFeedback(args.SearchResultsId, args.CommunicationId, args.Feedback); err2 != nil {
  switch v := err2.(type) {
    case *ServicesException:
  result.Ex = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing addCommunicationFeedback: " + err2.Error())
    oprot.WriteMessageBegin("addCommunicationFeedback", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("addCommunicationFeedback", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type feedbackServiceProcessorAddSentenceFeedback struct {
  handler FeedbackService
}

func (p *feedbackServiceProcessorAddSentenceFeedback) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := FeedbackServiceAddSentenceFeedbackArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("addSentenceFeedback", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := FeedbackServiceAddSentenceFeedbackResult{}
  var err2 error
  if err2 = p.handler.AddSentenceFeedback(args.SearchResultsId, args.CommunicationId, args.SentenceId, args.Feedback); err2 != nil {
  switch v := err2.(type) {
    case *ServicesException:
  result.Ex = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing addSentenceFeedback: " + err2.Error())
    oprot.WriteMessageBegin("addSentenceFeedback", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("addSentenceFeedback", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Results
type FeedbackServiceStartFeedbackArgs struct {
  Results *SearchResult_ `thrift:"results,1" db:"results" json:"results"`
}

func NewFeedbackServiceStartFeedbackArgs() *FeedbackServiceStartFeedbackArgs {
  return &FeedbackServiceStartFeedbackArgs{}
}

var FeedbackServiceStartFeedbackArgs_Results_DEFAULT *SearchResult_
func (p *FeedbackServiceStartFeedbackArgs) GetResults() *SearchResult_ {
  if !p.IsSetResults() {
    return FeedbackServiceStartFeedbackArgs_Results_DEFAULT
  }
return p.Results
}
func (p *FeedbackServiceStartFeedbackArgs) IsSetResults() bool {
  return p.Results != nil
}

func (p *FeedbackServiceStartFeedbackArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *FeedbackServiceStartFeedbackArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Results = &SearchResult_{}
  if err := p.Results.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Results), err)
  }
  return nil
}

func (p *FeedbackServiceStartFeedbackArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("startFeedback_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *FeedbackServiceStartFeedbackArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("results", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:results: ", p), err) }
  if err := p.Results.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Results), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:results: ", p), err) }
  return err
}

func (p *FeedbackServiceStartFeedbackArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("FeedbackServiceStartFeedbackArgs(%+v)", *p)
}

// Attributes:
//  - Ex
type FeedbackServiceStartFeedbackResult struct {
  Ex *ServicesException `thrift:"ex,1" db:"ex" json:"ex,omitempty"`
}

func NewFeedbackServiceStartFeedbackResult() *FeedbackServiceStartFeedbackResult {
  return &FeedbackServiceStartFeedbackResult{}
}

var FeedbackServiceStartFeedbackResult_Ex_DEFAULT *ServicesException
func (p *FeedbackServiceStartFeedbackResult) GetEx() *ServicesException {
  if !p.IsSetEx() {
    return FeedbackServiceStartFeedbackResult_Ex_DEFAULT
  }
return p.Ex
}
func (p *FeedbackServiceStartFeedbackResult) IsSetEx() bool {
  return p.Ex != nil
}

func (p *FeedbackServiceStartFeedbackResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *FeedbackServiceStartFeedbackResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ex = &ServicesException{}
  if err := p.Ex.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
  }
  return nil
}

func (p *FeedbackServiceStartFeedbackResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("startFeedback_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *FeedbackServiceStartFeedbackResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetEx() {
    if err := oprot.WriteFieldBegin("ex", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err) }
    if err := p.Ex.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err) }
  }
  return err
}

func (p *FeedbackServiceStartFeedbackResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("FeedbackServiceStartFeedbackResult(%+v)", *p)
}

// Attributes:
//  - SearchResultsId
//  - CommunicationId
//  - Feedback
type FeedbackServiceAddCommunicationFeedbackArgs struct {
  SearchResultsId *UUID `thrift:"searchResultsId,1" db:"searchResultsId" json:"searchResultsId"`
  CommunicationId string `thrift:"communicationId,2" db:"communicationId" json:"communicationId"`
  Feedback SearchFeedback `thrift:"feedback,3" db:"feedback" json:"feedback"`
}

func NewFeedbackServiceAddCommunicationFeedbackArgs() *FeedbackServiceAddCommunicationFeedbackArgs {
  return &FeedbackServiceAddCommunicationFeedbackArgs{}
}

var FeedbackServiceAddCommunicationFeedbackArgs_SearchResultsId_DEFAULT *UUID
func (p *FeedbackServiceAddCommunicationFeedbackArgs) GetSearchResultsId() *UUID {
  if !p.IsSetSearchResultsId() {
    return FeedbackServiceAddCommunicationFeedbackArgs_SearchResultsId_DEFAULT
  }
return p.SearchResultsId
}

func (p *FeedbackServiceAddCommunicationFeedbackArgs) GetCommunicationId() string {
  return p.CommunicationId
}

func (p *FeedbackServiceAddCommunicationFeedbackArgs) GetFeedback() SearchFeedback {
  return p.Feedback
}
func (p *FeedbackServiceAddCommunicationFeedbackArgs) IsSetSearchResultsId() bool {
  return p.SearchResultsId != nil
}

func (p *FeedbackServiceAddCommunicationFeedbackArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *FeedbackServiceAddCommunicationFeedbackArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.SearchResultsId = &UUID{}
  if err := p.SearchResultsId.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SearchResultsId), err)
  }
  return nil
}

func (p *FeedbackServiceAddCommunicationFeedbackArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.CommunicationId = v
}
  return nil
}

func (p *FeedbackServiceAddCommunicationFeedbackArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := SearchFeedback(v)
  p.Feedback = temp
}
  return nil
}

func (p *FeedbackServiceAddCommunicationFeedbackArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("addCommunicationFeedback_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *FeedbackServiceAddCommunicationFeedbackArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("searchResultsId", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:searchResultsId: ", p), err) }
  if err := p.SearchResultsId.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SearchResultsId), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:searchResultsId: ", p), err) }
  return err
}

func (p *FeedbackServiceAddCommunicationFeedbackArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("communicationId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:communicationId: ", p), err) }
  if err := oprot.WriteString(string(p.CommunicationId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.communicationId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:communicationId: ", p), err) }
  return err
}

func (p *FeedbackServiceAddCommunicationFeedbackArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("feedback", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:feedback: ", p), err) }
  if err := oprot.WriteI32(int32(p.Feedback)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.feedback (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:feedback: ", p), err) }
  return err
}

func (p *FeedbackServiceAddCommunicationFeedbackArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("FeedbackServiceAddCommunicationFeedbackArgs(%+v)", *p)
}

// Attributes:
//  - Ex
type FeedbackServiceAddCommunicationFeedbackResult struct {
  Ex *ServicesException `thrift:"ex,1" db:"ex" json:"ex,omitempty"`
}

func NewFeedbackServiceAddCommunicationFeedbackResult() *FeedbackServiceAddCommunicationFeedbackResult {
  return &FeedbackServiceAddCommunicationFeedbackResult{}
}

var FeedbackServiceAddCommunicationFeedbackResult_Ex_DEFAULT *ServicesException
func (p *FeedbackServiceAddCommunicationFeedbackResult) GetEx() *ServicesException {
  if !p.IsSetEx() {
    return FeedbackServiceAddCommunicationFeedbackResult_Ex_DEFAULT
  }
return p.Ex
}
func (p *FeedbackServiceAddCommunicationFeedbackResult) IsSetEx() bool {
  return p.Ex != nil
}

func (p *FeedbackServiceAddCommunicationFeedbackResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *FeedbackServiceAddCommunicationFeedbackResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ex = &ServicesException{}
  if err := p.Ex.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
  }
  return nil
}

func (p *FeedbackServiceAddCommunicationFeedbackResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("addCommunicationFeedback_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *FeedbackServiceAddCommunicationFeedbackResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetEx() {
    if err := oprot.WriteFieldBegin("ex", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err) }
    if err := p.Ex.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err) }
  }
  return err
}

func (p *FeedbackServiceAddCommunicationFeedbackResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("FeedbackServiceAddCommunicationFeedbackResult(%+v)", *p)
}

// Attributes:
//  - SearchResultsId
//  - CommunicationId
//  - SentenceId
//  - Feedback
type FeedbackServiceAddSentenceFeedbackArgs struct {
  SearchResultsId *UUID `thrift:"searchResultsId,1" db:"searchResultsId" json:"searchResultsId"`
  CommunicationId string `thrift:"communicationId,2" db:"communicationId" json:"communicationId"`
  SentenceId *UUID `thrift:"sentenceId,3" db:"sentenceId" json:"sentenceId"`
  Feedback SearchFeedback `thrift:"feedback,4" db:"feedback" json:"feedback"`
}

func NewFeedbackServiceAddSentenceFeedbackArgs() *FeedbackServiceAddSentenceFeedbackArgs {
  return &FeedbackServiceAddSentenceFeedbackArgs{}
}

var FeedbackServiceAddSentenceFeedbackArgs_SearchResultsId_DEFAULT *UUID
func (p *FeedbackServiceAddSentenceFeedbackArgs) GetSearchResultsId() *UUID {
  if !p.IsSetSearchResultsId() {
    return FeedbackServiceAddSentenceFeedbackArgs_SearchResultsId_DEFAULT
  }
return p.SearchResultsId
}

func (p *FeedbackServiceAddSentenceFeedbackArgs) GetCommunicationId() string {
  return p.CommunicationId
}
var FeedbackServiceAddSentenceFeedbackArgs_SentenceId_DEFAULT *UUID
func (p *FeedbackServiceAddSentenceFeedbackArgs) GetSentenceId() *UUID {
  if !p.IsSetSentenceId() {
    return FeedbackServiceAddSentenceFeedbackArgs_SentenceId_DEFAULT
  }
return p.SentenceId
}

func (p *FeedbackServiceAddSentenceFeedbackArgs) GetFeedback() SearchFeedback {
  return p.Feedback
}
func (p *FeedbackServiceAddSentenceFeedbackArgs) IsSetSearchResultsId() bool {
  return p.SearchResultsId != nil
}

func (p *FeedbackServiceAddSentenceFeedbackArgs) IsSetSentenceId() bool {
  return p.SentenceId != nil
}

func (p *FeedbackServiceAddSentenceFeedbackArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *FeedbackServiceAddSentenceFeedbackArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.SearchResultsId = &UUID{}
  if err := p.SearchResultsId.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SearchResultsId), err)
  }
  return nil
}

func (p *FeedbackServiceAddSentenceFeedbackArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.CommunicationId = v
}
  return nil
}

func (p *FeedbackServiceAddSentenceFeedbackArgs)  ReadField3(iprot thrift.TProtocol) error {
  p.SentenceId = &UUID{}
  if err := p.SentenceId.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SentenceId), err)
  }
  return nil
}

func (p *FeedbackServiceAddSentenceFeedbackArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  temp := SearchFeedback(v)
  p.Feedback = temp
}
  return nil
}

func (p *FeedbackServiceAddSentenceFeedbackArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("addSentenceFeedback_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *FeedbackServiceAddSentenceFeedbackArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("searchResultsId", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:searchResultsId: ", p), err) }
  if err := p.SearchResultsId.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SearchResultsId), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:searchResultsId: ", p), err) }
  return err
}

func (p *FeedbackServiceAddSentenceFeedbackArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("communicationId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:communicationId: ", p), err) }
  if err := oprot.WriteString(string(p.CommunicationId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.communicationId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:communicationId: ", p), err) }
  return err
}

func (p *FeedbackServiceAddSentenceFeedbackArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("sentenceId", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:sentenceId: ", p), err) }
  if err := p.SentenceId.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SentenceId), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:sentenceId: ", p), err) }
  return err
}

func (p *FeedbackServiceAddSentenceFeedbackArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("feedback", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:feedback: ", p), err) }
  if err := oprot.WriteI32(int32(p.Feedback)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.feedback (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:feedback: ", p), err) }
  return err
}

func (p *FeedbackServiceAddSentenceFeedbackArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("FeedbackServiceAddSentenceFeedbackArgs(%+v)", *p)
}

// Attributes:
//  - Ex
type FeedbackServiceAddSentenceFeedbackResult struct {
  Ex *ServicesException `thrift:"ex,1" db:"ex" json:"ex,omitempty"`
}

func NewFeedbackServiceAddSentenceFeedbackResult() *FeedbackServiceAddSentenceFeedbackResult {
  return &FeedbackServiceAddSentenceFeedbackResult{}
}

var FeedbackServiceAddSentenceFeedbackResult_Ex_DEFAULT *ServicesException
func (p *FeedbackServiceAddSentenceFeedbackResult) GetEx() *ServicesException {
  if !p.IsSetEx() {
    return FeedbackServiceAddSentenceFeedbackResult_Ex_DEFAULT
  }
return p.Ex
}
func (p *FeedbackServiceAddSentenceFeedbackResult) IsSetEx() bool {
  return p.Ex != nil
}

func (p *FeedbackServiceAddSentenceFeedbackResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *FeedbackServiceAddSentenceFeedbackResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ex = &ServicesException{}
  if err := p.Ex.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
  }
  return nil
}

func (p *FeedbackServiceAddSentenceFeedbackResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("addSentenceFeedback_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *FeedbackServiceAddSentenceFeedbackResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetEx() {
    if err := oprot.WriteFieldBegin("ex", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err) }
    if err := p.Ex.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err) }
  }
  return err
}

func (p *FeedbackServiceAddSentenceFeedbackResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("FeedbackServiceAddSentenceFeedbackResult(%+v)", *p)
}


